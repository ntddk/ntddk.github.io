<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一生あとで読んでろ</title>
  <subtitle>技術ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ntddk.github.io/"/>
  <updated>2018-05-17T15:02:10.211Z</updated>
  <id>http://ntddk.github.io/</id>
  
  <author>
    <name>ntddk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DEF CON CTF Qualifier 2018 Round-up</title>
    <link href="http://ntddk.github.io/2018/05/14/def-con-ctf-qualifier-2018-round-up/"/>
    <id>http://ntddk.github.io/2018/05/14/def-con-ctf-qualifier-2018-round-up/</id>
    <published>2018-05-14T11:00:00.000Z</published>
    <updated>2018-05-17T15:02:10.211Z</updated>
    
    <content type="html"><![CDATA[<p>This is too brief to be called write-up. But I’m tired …</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>I’ve participated in DEF CON CTF Qualifier 2018 as a member of a certain team, ignominious 40th place. But somehow I solved 3 tasks:</p>
<ul>
<li>ELF Crumble</li>
<li>babypwn1805</li>
<li>elastic cloud compute (memory) corruption</li>
</ul>
<p>I write down my impressions.</p>
<h1 id="ELF-Crumble"><a href="#ELF-Crumble" class="headerlink" title="ELF Crumble"></a>ELF Crumble</h1><p>This is a task to combine and execute 8 binary fragments correctly. I wrote damn brute-force solver for this, 脳が死んでいるので．</p>
<h1 id="babypwn1805"><a href="#babypwn1805" class="headerlink" title="babypwn1805"></a>babypwn1805</h1><p>A blind pwn task. I accidentally found offset <code>-0x38</code> to the GOT entry of <code>read</code>. Then I wrote the probabilistic solver.</p>
<h1 id="elastic-cloud-compute-memory-corruption"><a href="#elastic-cloud-compute-memory-corruption" class="headerlink" title="elastic cloud compute (memory) corruption"></a>elastic cloud compute (memory) corruption</h1><p>A VM escape task.</p>
<p>We were given <code>qemu-system-x86_64</code> binary with vulnerable PCI device namely <code>ooo</code>.　Notable functions are as follows:</p>
<table>
<thead>
<tr>
<th>function</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sub_6E61F4</code></td>
<td>correspond to <code>ooo_mmio_write</code></td>
</tr>
<tr>
<td><code>sub_6E613C</code></td>
<td>correspond to <code>ooo_mmio_read</code></td>
</tr>
<tr>
<td><code>sub_6E64A5</code></td>
<td>invokes <code>system(&quot;cat ./flag&quot;)</code></td>
</tr>
</tbody>
</table>
<p>What matters is use-after-free vulnerability in:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//----- (00000000006E61F4) ----------------------------------------------------</span></div><div class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">sub_6E61F4</span><span class="params">(__int64 opaque, __int64 addr, __int64 value, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd; <span class="comment">// eax</span></div><div class="line">...</div><div class="line"></div><div class="line">  *(_QWORD *)&amp;n[<span class="number">4</span>] = value;</div><div class="line">  cmd = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)addr &amp; <span class="number">0xF00000</span>) &gt;&gt; <span class="number">20</span>;</div><div class="line">  <span class="keyword">switch</span> ( cmd )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1u</span>:</div><div class="line">          <span class="built_in">free</span>(qword_1317940[((<span class="keyword">unsigned</span> <span class="keyword">int</span>)addr &amp; <span class="number">0xF0000</span>) &gt;&gt; <span class="number">16</span>]);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">2u</span>:</div><div class="line">          v12 = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)addr &amp; <span class="number">0xF0000</span>) &gt;&gt; <span class="number">16</span>;</div><div class="line">          v8 = addr;</div><div class="line">          <span class="built_in">memcpy</span>((<span class="keyword">char</span> *)qword_1317940[v12] + (<span class="keyword">signed</span> __int16)addr, &amp;n[<span class="number">4</span>], size);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">0u</span>:</div><div class="line">          idx = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)addr &amp; <span class="number">0xF0000</span>) &gt;&gt; <span class="number">16</span>;</div><div class="line">          <span class="keyword">if</span> ( idx == <span class="number">15</span> )</div><div class="line">          &#123;</div><div class="line">                <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">14</span>; ++i )</div><div class="line">                  qword_1317940[i] = <span class="built_in">malloc</span>(<span class="number">8L</span>L * *(_QWORD *)&amp;n[<span class="number">4</span>]);</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">else</span></div><div class="line">          &#123;</div><div class="line">                qword_1317940[idx] = <span class="built_in">malloc</span>(<span class="number">8L</span>L * *(_QWORD *)&amp;n[<span class="number">4</span>]);</div><div class="line">          &#125;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>With the clue of the chunk offset on <code>0x1317940</code>, now we can overwrite <code>malloc@GOT</code> to <code>sub_6E64A5</code> by fastbin attack, in particular using <code>devmem</code>.</p>
<p>I stayed up all night for this. I was tired but it was fun. I used these past write-ups as a reference when solving this task:</p>
<ul>
<li><a href="https://kitctf.de/writeups/hitb2017/babyqemu" target="_blank" rel="external">HITB GSEC 2017: babyqemu</a></li>
<li><a href="https://blog.eadom.net/writeups/qemu-escape-vm-escape-from-0ctf-2017-finals-writeup/" target="_blank" rel="external">QEMU Escape — vm_escape from 0CTF 2017 Finals Writeup - Eadom’s Blog</a></li>
</ul>
<p>Thanks authors!</p>
<h1 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words"></a>Final Words</h1><p>Other tasks I had wanted to solve are:</p>
<ul>
<li>flagsifier</li>
<li>TechSupport</li>
<li>smcauth</li>
</ul>
<p>This year DEFCON’s organizer has changed from LegitBS to OOO (Order of the-Overflow). OOO seems to have the purpose of connecting academic research and CTF. I support this philosophy, but this competition was not perfect. My impressions are summarized as follows:</p>
<table>
<thead>
<tr>
<th>Pros</th>
<th>Cons</th>
</tr>
</thead>
<tbody>
<tr>
<td>Meritocratic rev/pwn. Brand-new topics i.e. blockchain, neural network, reversing of Rust binary.</td>
<td>Many guessing tasks. Some incredible, old-fashioned tasks. In particular, sbva and ghettohackers: Throwback are quite bad.</td>
</tr>
</tbody>
</table>
<p>Anyway, I’m looking forward to that next year.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is too brief to be called write-up. But I’m tired …&lt;/p&gt;
&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Intr
    
    </summary>
    
    
      <category term="reversing" scheme="http://ntddk.github.io/tags/reversing/"/>
    
      <category term="exploitation" scheme="http://ntddk.github.io/tags/exploitation/"/>
    
  </entry>
  
  <entry>
    <title>Paper Gestalt Revisited: A Case Study on Computer Security Conferences</title>
    <link href="http://ntddk.github.io/2017/12/24/paper-gestalt-revisited-a-case-study-on-computer-security-conferences/"/>
    <id>http://ntddk.github.io/2017/12/24/paper-gestalt-revisited-a-case-study-on-computer-security-conferences/</id>
    <published>2017-12-23T15:00:00.000Z</published>
    <updated>2017-12-23T15:12:33.787Z</updated>
    
    <content type="html"><![CDATA[<p>HAI DOMO. This post is for <a href="https://qiita.com/advent-calendar/2017/musashino" target="_blank" rel="external">武蔵野 Advent Calendar 2017</a>.</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In May this year, I just started my career as an apprentice security researcher at 武蔵野某所．One of my job responsibilities is to write a “good” paper that enough to be accepted to top-tier (non-crypto) security conferences like following:</p>
<ul>
<li>IEEE S&amp;P (Oakland)</li>
<li>ACM CCS</li>
<li>NDSS</li>
<li>USENIX Security</li>
</ul>
<p>However, I am profoundly ignorant of cardinal rules of “good” security research and technical writing. ぜんぜんわからない．俺たちは雰囲気で研究をやっている．I thought I got to do something.</p>
<p>The joke paper entitled <a href="https://vision.cornell.edu/se3/wp-content/uploads/2014/09/gestalt.pdf" target="_blank" rel="external">Paper Gestalt</a>, distributed in CVPR’10, gave me a suggestion.</p>
<p>The key idea of the paper is that “good” paper might be distinguished by image recognition. だるくなってきた．時間がないので日本語で書きます．このジョーク論文では，論文を画像に変換，局所特徴量を抽出し，論文がトップカンファレンスにacceptされるかどうか判定する分類器が提案されている．仔細は<a href="http://d.hatena.ne.jp/n_hidekey/20120101/1325388164" target="_blank" rel="external">Paper Gestalt - n_hidekeyの日記</a>を参照されたい．かっこいい数式や図がある論文はそれっぽく見えてしまうよね，という話．</p>
<p>　そういうわけで，本稿ではPaper Gestaltを参考に，論文がセキュリティ系トップカンファレンスにacceptされるか判定する分類器を作成する．元論文ではAdaBoostを用いていたが，ここでは畳み込みニューラルネットを試す．</p>
<h1 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h1><p>　上述のカンファレンスにacceptされた論文4年分を正例，併設ワークショップにacceptされた論文同じく4年分をトップカンファレンスにrejectされた論文とみなして負例とする．負例には諸先輩方の論文が含まれていて，すみません，でもわかってくれると思うんです．</p>
<p>　さて一通りスクレイピングしたのち，ポスターやショートペーパーなど，4ページに満たないものを削除．キーノートやスライドも取り除く．重要なのはフルペーパーだからだ．結果，それぞれの論文数は以下の通り：</p>
<table>
<thead>
<tr>
<th>accepted</th>
<th>rejected</th>
</tr>
</thead>
<tbody>
<tr>
<td>1,266</td>
<td>794</td>
</tr>
</tbody>
</table>
<p>　正例のワードクラウド：</p>
<p><img src="/image/paper-gestalt-revisited/wordcloud_accepted.png"></p>
<p>　負例：</p>
<p><img src="/image/paper-gestalt-revisited/wordcloud_rejected.png"></p>
<p>　なんもわからん．</p>
<h1 id="Pre-processing"><a href="#Pre-processing" class="headerlink" title="Pre-processing"></a>Pre-processing</h1><p>　論文PDFを画像化する．</p>
<p>　論文PDFの各ページを横に並べ，20ページに満たない場合は白紙で埋める処理を施した．例：</p>
<p><img src="/image/paper-gestalt-revisited/preprocessed_image_1.png"></p>
<p>　見ての通り，USENIX系の本会議に通った論文にはかっこいい表紙が付いてくる．他の論文と体裁を合わせるため削除：</p>
<p><img src="/image/paper-gestalt-revisited/preprocessed_image_2.png"></p>
<p>　3時間ほどかけて全PDFをImageMagickで画像化，訓練用・検証用に半々で分割．</p>
<h1 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h1><p>　今回はベンチマークということでLeNet-5をほぼそのまま使う．いつもいつも手書き文字を認識させられるなど過酷な拷問を受けているやつ．</p>
<p><img src="/image/paper-gestalt-revisited/model.png" width="50%" height="50%"></p>
<p>　フレームワークはkeras. データが少数かつclass imbalancedであることを考慮して，<a href="https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html" target="_blank" rel="external">Building powerful image classification models using very little data</a>に倣い，augmentationをかけながら訓練することにした．具体的にはズームと水平方向への反転．その他各種パラメータについてはありがちな構成を雰囲気で決めている：</p>
<table>
<thead>
<tr>
<th>活性化関数</th>
<th>損失関数</th>
<th>最適化手法</th>
<th>Dropout</th>
<th>バッチサイズ</th>
<th>エポック</th>
<th>Early stopping</th>
</tr>
</thead>
<tbody>
<tr>
<td>ReLU</td>
<td>クロスエントロピー</td>
<td>RMSProp</td>
<td>50%</td>
<td>64</td>
<td>100</td>
<td>validation accuracy</td>
</tr>
</tbody>
</table>
<p>　本来ならネットワーク構成含め細かくチューニングすべきだが，手元のショボい計算機では投稿日までに計算が終わらなさそうだったため，<a href="https://github.com/hyperopt/hyperopt" target="_blank" rel="external">hyperopt/hyperopt</a>やそのkeras連携機能である<a href="https://github.com/maxpumperla/hyperas" target="_blank" rel="external">maxpumperla/hyperas</a>とか，そういったかっこいいテクニックは使っていない．すみません2.</p>
<h1 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h1><p>　Early stoppingが効いて16エポックで学習打ち止め．学習曲線：</p>
<p><img src="/image/paper-gestalt-revisited/learning_curve_accuracy.png" width="50%" height="50%"><br><img src="/image/paper-gestalt-revisited/learning_curve_loss.png" width="50%" height="50%"></p>
<p>　微妙．しかし自分が学生時代に国内研究会に投げた論文を投入したところ，</p>
<table>
<thead>
<tr>
<th>accepted</th>
<th>rejected</th>
<th>predict</th>
</tr>
</thead>
<tbody>
<tr>
<td>7.3411%</td>
<td>92.6589%</td>
<td>rejected</td>
</tr>
</tbody>
</table>
<p>とまあ正しく判定できているっぽいのでよしとしましょう．なにが正しく判定だ．俺を，馬鹿にしているのか．いま，様々なものに対して害意を抱いています．Saliency mapの可視化とかは気が向いたら．</p>
<h1 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words"></a>Final Words</h1><p>　ACM CCS’17のWelcome Slidesにありがたいことばが載っている：</p>
<script async class="speakerdeck-embed" data-slide="35" data-id="a5ca2b52d1a046d59b1bcc6f7e4ab6b9" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<p>　つまりはそういうことです．小手先の浅知恵に逃げるものはなにをやってもだめ．やるぞ〜．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HAI DOMO. This post is for &lt;a href=&quot;https://qiita.com/advent-calendar/2017/musashino&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;武蔵野 Advent Calendar 
    
    </summary>
    
    
      <category term="machine learning" scheme="http://ntddk.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>DEF CON CTF Qualifier 2017 Pepperidge Farm Write-up</title>
    <link href="http://ntddk.github.io/2017/12/04/def-con-ctf-qualifier-2017-pepperidge-farm-write-up/"/>
    <id>http://ntddk.github.io/2017/12/04/def-con-ctf-qualifier-2017-pepperidge-farm-write-up/</id>
    <published>2017-12-03T15:00:00.000Z</published>
    <updated>2017-12-21T00:39:44.085Z</updated>
    
    <content type="html"><![CDATA[<p>HAI DOMO. This post is for <a href="https://qiita.com/advent-calendar/2017/musashino" target="_blank" rel="external">武蔵野 Advent Calendar 2017</a> and also for <a href="https://adventar.org/calendars/2431" target="_blank" rel="external">CTF Advent Calendar 2017</a>.</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In May this year, I participated in DEF CON CTF Qualifier 2017 as a member of a certain 武蔵野-related team. Actually, I’m not a top-tier CTF player, but I did my best and solved 4 challenges:</p>
<ul>
<li>crackme1</li>
<li>beatmeonthedl</li>
<li>enlightenment</li>
<li>Pepperidge Farm</li>
</ul>
<p><a href="https://ctftime.org/event/459/tasks/" target="_blank" rel="external">Write-ups</a> already exist except for Pepperidge Farm. So I decided to write about it. FYI: The binaries are available at <a href="https://github.com/legitbs/quals-2017/" target="_blank" rel="external">legitbs/quals-2017</a>.</p>
<h1 id="Pepperidge-Farm"><a href="#Pepperidge-Farm" class="headerlink" title="Pepperidge Farm"></a>Pepperidge Farm</h1><p>Pepperidge Farm is categorized into Reverse Engineering. The problem statement is below:</p>
<blockquote>
<p>Remember when the first CTF was run with a custom architecture? Pepperidge Farm remembers:<br><a href="https://github.com/JonathanSalwan/VMNDH-2k12" target="_blank" rel="external">https://github.com/JonathanSalwan/VMNDH-2k12</a></p>
<p>pepperidge-farm_edb4ad2f103a9efde038346d2cd86a1e.quals.shallweplayaga.me:2012</p>
<p>Files<br><a href="https://2017.notmalware.ru/8a45cf7171e89594cfd1d51671fef0bec3f24d9d/pepperidge_farm" target="_blank" rel="external">https://2017.notmalware.ru/8a45cf7171e89594cfd1d51671fef0bec3f24d9d/pepperidge_farm</a></p>
</blockquote>
<p>It seems like a keygenning challenge on the custom virtual machine–VMNDH-2k12.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./vmndh -file pepperidge_farm</div><div class="line">Enter your registration code: 31337</div><div class="line">Code does not match any known registered users</div></pre></td></tr></table></figure>
<h1 id="VMNDH-2k12"><a href="#VMNDH-2k12" class="headerlink" title="VMNDH-2k12"></a>VMNDH-2k12</h1><p>VMNDH-2k12 is the VM built for Nuit du Hack CTF Quals 2012 as its name suggests. The architecture is described in <a href="http://shell-storm.org/project/Useless-emulator-for-fun-VMNDH-2k12/" target="_blank" rel="external">shell-storm | Useless emulator for fun (VMNDH-2k12)</a>. This VM parses given serialized binary and repeats fetch, decode and execution.</p>
<p>Writing IDA loader/processor module is a common way to analyze VM-based obfuscated binary. The modules for VMNDH-2k12 and for modified version VMNDH-2k13 already exist:</p>
<ul>
<li><a href="https://bitbucket.org/jonbutler88/ida-ndh/overview" target="_blank" rel="external">jonbutler88 / ida-ndh – Bitbucket</a></li>
<li><a href="http://blog.w4kfu.com/post/ndh2k13_crackme500" target="_blank" rel="external">Another NDH quals another VM wait - w4kfu’s bl0g</a></li>
</ul>
<p>Note that when you try to solve this challenge with above-mentioned processor modules with IDA Pro 7.0, the backward-compatibility issue will occur. For example, you have to change <code>self.regFirstSreg</code> to<code>self.reg_first_sreg</code> in a module.</p>
<p>Also, the Binary Ninja plugin has been released after quals:</p>
<ul>
<li><a href="https://github.com/verylazyguy/binaryninja-vmndh" target="_blank" rel="external">verylazyguy/binaryninja-vmndh: vmndh-2k12 Architecture plugin for Binary Ninja</a></li>
</ul>
<p>But in this post, I describe a solution without both IDA Pro and Binary Ninja. Because VMNDH-2k12 is open-sourced and easy to modify.</p>
<h1 id="Surface-Analysis"><a href="#Surface-Analysis" class="headerlink" title="Surface Analysis"></a>Surface Analysis</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ ./vmndh -debug -file pepperidge_farm</div><div class="line">[Console]#&gt; help</div><div class="line">&lt;enter&gt;              Execute next instruction</div><div class="line">run                  Run program</div><div class="line">bp &lt;addr&gt;            Set breakpoint</div><div class="line">info bp              Display info breakpoint</div><div class="line">info reg             Display registers</div><div class="line">show sp              Display SP memory</div><div class="line">show pc              Display PC memory</div><div class="line">dis &lt;addr&gt;:&lt;size&gt;    Disassembly X bytes from ADDR</div><div class="line">x/x &lt;addr&gt;:&lt;size&gt;    Print X bytes from ADDR</div><div class="line">x/s &lt;addr&gt;           Print string addr</div><div class="line">set reg=value        Set value in register</div><div class="line">syscall              Execute &apos;syscall&apos; instruction</div><div class="line">help                 Display this help</div><div class="line">quit                 Quit console debugging</div><div class="line">[Console]#&gt; dis</div><div class="line">Error: Set addr between 0x8000 and 0x882a</div><div class="line">[Console]#&gt; dis 0x8000:82a</div><div class="line">0x8000: jmpl 0x0720</div><div class="line">0x8003: push r2</div><div class="line">0x8007: .byte 0x00</div><div class="line">0x8008: nop</div><div class="line">...</div></pre></td></tr></table></figure>
<p>Yes, the VM has own debugger and disassembler.</p>
<h1 id="Modifying-The-Disassembler"><a href="#Modifying-The-Disassembler" class="headerlink" title="Modifying The Disassembler"></a>Modifying The Disassembler</h1><p>However, there are pitfalls here. </p>
<p>Because it is a unique architecture, the destination of the control flow instructions are different from it shown on the disassembly dump. For example, take a look at <code>src_vm/op_call.c</code>:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">op_call_dir16</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">uint16_t</span> operande;</div><div class="line"></div><div class="line">  operande = *(<span class="keyword">uint16_t</span> *)(core.memory.vmem + core.memory.pc + <span class="number">2</span>);</div><div class="line">  <span class="keyword">if</span> (core.flagmode.noverbose == <span class="number">0</span>)</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"%s0x%4.x%s &gt; call 0x%.2x\n"</span>, RED, core.memory.pc, ENDC, operande);</div><div class="line"></div><div class="line">  core.memory.sp -= <span class="number">2</span>; <span class="comment">/* sub sp */</span></div><div class="line">  *(<span class="keyword">uint16_t</span> *)(core.memory.vmem + core.memory.sp) = core.memory.pc + <span class="number">4</span>;</div><div class="line">  core.memory.pc = core.memory.pc + operande + <span class="number">4</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Acording to this, I modified the dissassembler in <code>src_vm/disass.c</code>:</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@@ -532,6 +537,7 @@</span></div><div class="line">   uint16_t  operande;</div><div class="line">   uint8_t   reg;</div><div class="line">   char      flag;</div><div class="line"><span class="addition">+  uint16_t dst;</span></div><div class="line"> </div><div class="line">   flag = *(core.memory.vmem + addr + 1);</div><div class="line">   switch (flag)</div><div class="line"><span class="meta">@@ -543,7 +549,8 @@</span></div><div class="line"> </div><div class="line">       case OP_FLAG_DIRECT16:</div><div class="line">         operande = *(uint16_t *)(core.memory.vmem + addr + 2);</div><div class="line"><span class="deletion">-        fprintf(stdout, "%s0x%.4x%s: call 0x%.4x\n", RED, addr, ENDC, operande);</span></div><div class="line"><span class="addition">+        dst = addr + operande + 4;</span></div><div class="line"><span class="addition">+        fprintf(stdout, "%s0x%.4x%s: call 0x%.4x\n", RED, addr, ENDC, dst);</span></div><div class="line">         return (addr + 4);</div><div class="line"> </div><div class="line">       default:</div></pre></td></tr></table></figure>
<p>This makes it possible to correctly display the address of the call destination in the disassembly dump. In addition, jump instructions need to be modified. In the case of <code>jnz</code>:</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@@ -463,10 +470,11 @@</span></div><div class="line"> </div><div class="line"> static uint16_t dis_jnz(uint16_t addr)</div><div class="line"> &#123;</div><div class="line"><span class="deletion">-  uint16_t operande;</span></div><div class="line"><span class="addition">+  uint16_t operande, dst;</span></div><div class="line"> </div><div class="line">   operande = *(uint16_t *)(core.memory.vmem + addr + 1);</div><div class="line"><span class="deletion">-  fprintf(stdout, "%s0x%.4x%s: jnz 0x%.4x\n", RED, addr, ENDC, operande);</span></div><div class="line"><span class="addition">+  dst = addr + operande + 3;</span></div><div class="line"><span class="addition">+  fprintf(stdout, "%s0x%.4x%s: jnz 0x%.4x\n", RED, addr, ENDC, dst);</span></div><div class="line"> </div><div class="line">   return (addr + 3);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Herewith,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">0x86a1: jnz 0x0076</div><div class="line">0x86a4: mov r0, r2</div><div class="line">0x86a8: call 0xfdc5</div><div class="line">0x86ac: test r0, r0</div><div class="line">0x86af: jnz 0x0068</div><div class="line">0x86b2: mov r0, r2</div><div class="line">0x86b6: call 0xfddf</div><div class="line">0x86ba: test r0, r0</div><div class="line">0x86bd: jnz 0x005a</div><div class="line">0x86c0: mov r0, r2</div><div class="line">0x86c4: call 0xfe17</div><div class="line">0x86c8: test r0, r0</div><div class="line">0x86cb: jnz 0x004c</div><div class="line">0x86ce: mov r0, r2</div><div class="line">0x86d2: call 0xfe2c</div><div class="line">0x86d6: test r0, r0</div><div class="line">...</div></pre></td></tr></table></figure>
<p>becomes:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">0x86a1: jnz 0x871a</div><div class="line">0x86a4: mov r0, r2</div><div class="line">0x86a8: call 0x8471</div><div class="line">0x86ac: test r0, r0</div><div class="line">0x86af: jnz 0x871a</div><div class="line">0x86b2: mov r0, r2</div><div class="line">0x86b6: call 0x8499</div><div class="line">0x86ba: test r0, r0</div><div class="line">0x86bd: jnz 0x871a</div><div class="line">0x86c0: mov r0, r2</div><div class="line">0x86c4: call 0x84df</div><div class="line">0x86c8: test r0, r0</div><div class="line">0x86cb: jnz 0x871a</div><div class="line">0x86ce: mov r0, r2</div><div class="line">0x86d2: call 0x8502</div><div class="line">0x86d6: test r0, r0</div><div class="line">...</div></pre></td></tr></table></figure>
<p>Good.</p>
<p>Also, after <code>0x8759</code> it looks like a data section.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">0x8759: .byte 0x45 (E)</div><div class="line">0x875a: .byte 0x6e (n)</div><div class="line">0x875b: .byte 0x74 (t)</div><div class="line">0x875c: .byte 0x65 (e)</div><div class="line">0x875d: .byte 0x72 (r)</div><div class="line">...</div></pre></td></tr></table></figure>
<p>However, parts such as <code>0x87e8</code> are misinterpreted as codes.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x87e8: inc r82</div></pre></td></tr></table></figure>
<p>The data section was not obfuscated.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">00007e0: 6c61 6700 3ce3 5a9e 9113 8c05 e42e 0a52  lag.&lt;.Z........R</div><div class="line">00007f0: 3dd8 7cf5 9f4b 9f06 d7a8 e9a0 a636 a649  =.|..K.......6.I</div><div class="line">0000800: 3136 9308 eb70 ebbf df28 500d 7be8 96fa  16...p...(P.&#123;...</div><div class="line">0000810: e8b7 a5df c24d f0b8 3b78 6272 b748 1697  .....M..;xbr.H..</div><div class="line">0000820: f019 2d6b 085b 9f94 4987 e624 3752 efb8  ..-k.[..I..$7R..</div></pre></td></tr></table></figure>
<p>So I gave first aid to <code>src_vm/disass.c</code>:</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@@ -322,8 +322,15 @@</span></div><div class="line"> static uint16_t dis_inc(uint16_t addr)</div><div class="line"> &#123;</div><div class="line">   uint8_t operande;</div><div class="line"><span class="addition">+  char OP, OP2;</span></div><div class="line"> </div><div class="line"><span class="addition">+  OP = *(core.memory.vmem + addr);</span></div><div class="line"><span class="addition">+  OP2 = *(core.memory.vmem + addr + 1);</span></div><div class="line">   operande = *(core.memory.vmem + addr + 1);</div><div class="line"><span class="addition">+  if(addr &gt; 0x8759)</span></div><div class="line"><span class="addition">+    fprintf(stdout, "%s0x%.4x%s: [DEBUG] .byte 0x%.2x\n", RED, addr, ENDC, (unsigned char)OP);</span></div><div class="line"><span class="addition">+    fprintf(stdout, "%s0x%.4x%s: [DEBUG] .byte 0x%.2x\n", RED, addr + 1, ENDC, (unsigned char)OP2);</span></div><div class="line"><span class="addition">+</span></div><div class="line">   fprintf(stdout, "%s0x%.4x%s: inc r%d\n", RED, addr, ENDC, operande);</div><div class="line"> </div><div class="line">   return (addr + 2);</div></pre></td></tr></table></figure>
<p>Awful… who cares?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0x87e8: [DEBUG] .byte 0x0a</div><div class="line">0x87e9: [DEBUG] .byte 0x52</div><div class="line">0x87e8: inc r82</div><div class="line">0x87ea: .byte 0x3d (=)</div></pre></td></tr></table></figure>
<h1 id="First-Attempt-with-KLEE"><a href="#First-Attempt-with-KLEE" class="headerlink" title="First Attempt with KLEE"></a>First Attempt with KLEE</h1><p>This is a failure case.</p>
<p>As we have seen so far, VMNDH-2k12 is open-sourced. So I tried to solve the challenge with source code-based symbolic execution tool–<a href="http://klee.github.io/" target="_blank" rel="external">KLEE</a>.</p>
<p>I modified <code>src_vm/syscall_write.c</code> for assertion:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@@ -18,6 +18,8 @@</div><div class="line"> */</div><div class="line"> </div><div class="line"> #include &quot;vmndh.h&quot;</div><div class="line">+#include &lt;klee/klee.h&gt;</div><div class="line">+#include &lt;string.h&gt;</div><div class="line"> </div><div class="line"> void syscall_write(void)</div><div class="line"> &#123;</div><div class="line">@@ -32,7 +34,12 @@</div><div class="line"> </div><div class="line">   if (core.flagmode.noverbose == 0)</div><div class="line">     write(1, txt, strlen(txt));</div><div class="line">+</div><div class="line">+  if (strstr(arg2, &quot;Thank&quot;) != NULL)</div><div class="line">+    klee_assert(0);</div><div class="line">+</div><div class="line">   core.regs.r0 = write(arg1, arg2, arg3);</div><div class="line">+</div><div class="line">   if (core.flagmode.noverbose == 0)</div><div class="line">     write(1, &quot;\n&quot;, 1);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Here is a modified <code>Makefile</code>:</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@@ -17,14 +17,15 @@</span></div><div class="line"> ## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</div><div class="line"> ##</div><div class="line"> </div><div class="line"><span class="deletion">-DEBUG   = no</span></div><div class="line"><span class="addition">+DEBUG   = yes</span></div><div class="line"> RM      = rm -f</div><div class="line"> INCLUDE = ./includes</div><div class="line"> SRC_DIR = ./src_vm</div><div class="line"><span class="addition">+KLEE_PATH = ../klee_src/include</span></div><div class="line"> NAME    = vmndh</div><div class="line"> </div><div class="line"> ifeq ($(DEBUG),yes)</div><div class="line"><span class="deletion">-    CFLAGS   	= -c -ggdb3 -Wextra -Wall -D _BSD_SOURCE -I$(INCLUDE)</span></div><div class="line"><span class="addition">+    CFLAGS   	= -c -ggdb3 -Wextra -Wall -D _BSD_SOURCE -I$(INCLUDE) -I$(KLEE_PATH) -emit-llvm -g</span></div><div class="line">     LDFLAGS     =</div><div class="line">     CC 		= clang</div><div class="line"> else</div></pre></td></tr></table></figure>
<p>I’d left all of it to KLEE and get to bed…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">$ make</div><div class="line">$ llvm-link src_vm/*.o -o vmndh.bc</div><div class="line">$ klee --optimize --emit-all-errors --libc=uclibc --write-smt2s --posix-runtime vmndh.bc -file pepperidge_farm -sym-stdin 65</div><div class="line">KLEE: NOTE: Using klee-uclibc : /home/klee/klee_build/klee/Release+Debug+Asserts/lib/klee-uclibc.bca</div><div class="line">KLEE: NOTE: Using model: /home/klee/klee_build/klee/Release+Debug+Asserts/lib/libkleeRuntimePOSIX.bca</div><div class="line">KLEE: output directory is &quot;/home/klee/VMNDH-2k12/klee-out-1&quot;</div><div class="line">KLEE: Using STP solver backend</div><div class="line">KLEE: WARNING ONCE: function &quot;__user_main&quot; has inline asm</div><div class="line">KLEE: WARNING ONCE: function &quot;syscall_accept&quot; has inline asm</div><div class="line">KLEE: WARNING ONCE: function &quot;syscall_bind&quot; has inline asm</div><div class="line">KLEE: WARNING ONCE: function &quot;syscall_listen&quot; has inline asm</div><div class="line">KLEE: WARNING ONCE: function &quot;syscall_recv&quot; has inline asm</div><div class="line">KLEE: WARNING ONCE: function &quot;syscall_send&quot; has inline asm</div><div class="line">KLEE: WARNING ONCE: function &quot;syscall_socket&quot; has inline asm</div><div class="line">KLEE: WARNING ONCE: calling external: syscall(16, 0, 21505, 44258832) at /home/klee/klee_src/runtime/POSIX/fd.c:1044</div><div class="line">KLEE: WARNING ONCE: Alignment of memory from call &quot;malloc&quot; is not modelled. Using alignment of 8.</div><div class="line">Enter your registration code: KLEE: WARNING ONCE: calling external: vprintf(57126208, 46345808) at /home/klee/klee_build/klee-uclibc/libc/stdio/fprintf.c:36</div><div class="line">[SYSCALL output]: 64</div><div class="line">KLEE: WARNING ONCE: skipping fork (memory cap exceeded)</div><div class="line">...</div><div class="line">KLEE: WARNING: killing 175 states (over memory cap)</div><div class="line">Code does not match any known registered users</div><div class="line">Code does not match any known registered users</div><div class="line">Code does not match any known registered users</div><div class="line">Code does not match any known registered users</div><div class="line">Code does not match any known registered users</div><div class="line">Code does not match any known registered users</div><div class="line">Code does not match any known registered users</div><div class="line">Code does not match any known registered users</div><div class="line">Code does not match any known registered users</div><div class="line">Code does not match any known registered users</div><div class="line">Code does not match any known registered users</div><div class="line">...</div><div class="line">Code does not match any known registered users</div><div class="line"></div><div class="line">KLEE: done: total instructions = 5117896332</div><div class="line">KLEE: done: completed paths = 81092</div><div class="line">KLEE: done: generated tests = 81092</div></pre></td></tr></table></figure>
<p>… It’s not going to be easy.</p>
<p>I also wrote solver with <a href="http://angr.io/" target="_blank" rel="external">angr</a>. Which symbolizes stdin, but… let’s not talk about it.</p>
<p>An example of insufficient SMTLIB2 representations is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(set-logic QF_AUFBV )</div><div class="line">(declare-fun model_version () (Array (_ BitVec 32) (_ BitVec 8) ) )</div><div class="line">(declare-fun stdin () (Array (_ BitVec 32) (_ BitVec 8) ) )</div><div class="line">(declare-fun stdin-stat () (Array (_ BitVec 32) (_ BitVec 8) ) )</div><div class="line">(assert (let ( (?B1 (select  stdin (_ bv25 32) ) ) (?B2 (select  stdin (_ bv31 32) ) ) (?B3 (select  stdin (_ bv18 32) ) ) (?B4 (select  stdin (_ bv40 32) ) ) (?B5 (select  stdin (_ bv36 32) ) ) (?B6 (select  stdin (_ bv23 32) ) ) (?B7 (select  stdin (_ bv27 32) ) ) (?B8 (select  stdin (_ bv33 32) ) ) (?B9 (select  stdin (_ bv6 32) ) ) (?B10 (select  stdin (_ bv8 32) ) ) ) (let ( (?B13 ((_ zero_extend 16)  ((_ zero_extend 8)  ?B7 ) ) ) (?B14 ((_ zero_extend 16)  ((_ zero_extend 8)  ?B8 ) ) ) (?B12 ((_ zero_extend 16)  ((_ zero_extend 8)  ?B2 ) ) ) (?B11 ((_ zero_extend 16)  ((_ zero_extend 8)  ?B1 ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  false (=  (_ bv0 64) (bvand  (concat  (select  stdin-stat (_ bv15 32) ) (concat  (select  stdin-stat (_ bv14 32) ) (concat  (select  stdin-stat (_ bv13 32) ) (concat  (select  stdin-stat (_ bv12 32) ) (concat  (select  stdin-stat (_ bv11 32) ) (concat  (select  stdin-stat (_ bv10 32) ) (concat  (select  stdin-stat (_ bv9 32) ) (select  stdin-stat (_ bv8 32) ) ) ) ) ) ) ) ) (_ bv2147483647 64) ) ) ) (bvult  (concat  (select  stdin-stat (_ bv63 32) ) (concat  (select  stdin-stat (_ bv62 32) ) (concat  (select  stdin-stat (_ bv61 32) ) (concat  (select  stdin-stat (_ bv60 32) ) (concat  (select  stdin-stat (_ bv59 32) ) (concat  (select  stdin-stat (_ bv58 32) ) (concat  (select  stdin-stat (_ bv57 32) ) (select  stdin-stat (_ bv56 32) ) ) ) ) ) ) ) ) (_ bv65536 64) ) ) (=  (_ bv1 32) (concat  (select  model_version (_ bv3 32) ) (concat  (select  model_version (_ bv2 32) ) (concat  (select  model_version (_ bv1 32) ) (select  model_version (_ bv0 32) ) ) ) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv0 32) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv1 32) ) ) ) (=  (_ bv57 8) (select  stdin (_ bv2 32) ) ) ) (=  (_ bv70 8) (select  stdin (_ bv3 32) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv4 32) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv5 32) ) ) ) (=  false (=  (_ bv48 8) ?B9 ) ) ) (=  false (bvult  (_ bv48 32) ((_ zero_extend 16)  ((_ zero_extend 8)  ?B9 ) ) ) ) ) (=  false (=  (_ bv48 8) ?B10 ) ) ) (=  false (bvult  (_ bv48 32) ((_ zero_extend 16)  ((_ zero_extend 8)  ?B10 ) ) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv12 32) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv13 32) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv14 32) ) ) ) (=  (_ bv57 8) (select  stdin (_ bv15 32) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv16 32) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv17 32) ) ) ) (=  false (=  (_ bv48 8) ?B3 ) ) ) (=  false (bvult  (_ bv48 32) ((_ zero_extend 16)  ((_ zero_extend 8)  ?B3 ) ) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv20 32) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv21 32) ) ) ) (=  (_ bv57 8) (select  stdin (_ bv22 32) ) ) ) (=  false (=  (_ bv48 8) ?B6 ) ) ) (=  false (bvult  (_ bv48 32) ((_ zero_extend 16)  ((_ zero_extend 8)  ?B6 ) ) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv24 32) ) ) ) (=  false (=  (_ bv48 8) ?B1 ) ) ) (bvult  (_ bv48 32) ?B11 ) ) (=  false (=  (_ bv57 8) ?B1 ) ) ) (=  false (bvult  (_ bv57 32) ?B11 ) ) ) (=  (_ bv48 8) (select  stdin (_ bv26 32) ) ) ) (=  false (=  (_ bv48 8) ?B7 ) ) ) (bvult  (_ bv48 32) ?B13 ) ) (=  false (=  (_ bv57 8) ?B7 ) ) ) (=  false (bvult  (_ bv57 32) ?B13 ) ) ) (=  (_ bv48 8) (select  stdin (_ bv28 32) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv29 32) ) ) ) (=  (_ bv48 8) (select  stdin (_ bv30 32) ) ) ) (=  false (=  (_ bv48 8) ?B2 ) ) ) (bvult  (_ bv48 32) ?B12 ) ) (=  false (=  (_ bv57 8) ?B2 ) ) ) (=  false (bvult  (_ bv57 32) ?B12 ) ) ) (=  (_ bv48 8) (select  stdin (_ bv32 32) ) ) ) (=  false (=  (_ bv48 8) ?B8 ) ) ) (bvult  (_ bv48 32) ?B14 ) ) (=  false (=  (_ bv57 8) ?B8 ) ) ) (bvult  (_ bv57 32) ?B14 ) ) (=  false (=  (_ bv70 8) ?B8 ) ) ) (bvult  (_ bv70 32) ?B14 ) ) (=  false (=  (_ bv48 8) ?B5 ) ) ) (=  false (bvult  (_ bv48 32) ((_ zero_extend 16)  ((_ zero_extend 8)  ?B5 ) ) ) ) ) (=  false (=  (_ bv48 8) ?B4 ) ) ) (=  false (bvult  (_ bv48 32) ((_ zero_extend 16)  ((_ zero_extend 8)  ?B4 ) ) ) ) ) ) ) )</div><div class="line">(check-sat)</div><div class="line">(exit)</div></pre></td></tr></table></figure>
<h1 id="Solution-with-Z3"><a href="#Solution-with-Z3" class="headerlink" title="Solution with Z3"></a>Solution with Z3</h1><p>Since there is no choice, I read all the disassembly. After some twists and turn, I realized that:</p>
<ul>
<li>Pepperidge Farm checks character codes against transformed <code>0x20</code> bytes values.</li>
<li><code>0x8247(x, y)</code> returns <code>x * 100 + y</code>.</li>
</ul>
<p>Now <a href="https://github.com/Z3Prover/z3" target="_blank" rel="external">Z3</a> time. For example, subroutine <code>0x8269</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">0x8269: push r1</div><div class="line">0x826d: pop r2</div><div class="line">0x826f: mov r7, r0</div><div class="line">0x8273: addb r0, #00</div><div class="line">0x8277: call 0x8247</div><div class="line">0x827b: mov r1, r0</div><div class="line">0x827f: mov r0, r7</div><div class="line">0x8283: addb r0, #14</div><div class="line">0x8287: call 0x8247</div><div class="line">0x828b: mov r2, r0</div><div class="line">0x828f: movl r0, #0x87ec</div><div class="line">0x8294: call 0x8247</div><div class="line">0x8298: xorl r1, #4936</div><div class="line">0x829d: add r1, r2</div><div class="line">0x82a1: xor r0, r1</div><div class="line">0x82a5: pop r2</div><div class="line">0x82a7: pop r1</div><div class="line">0x82a9: ret</div><div class="line">...</div><div class="line">0x87ec: .byte 0x7c (|)</div><div class="line">0x87ed: .byte 0xf5</div></pre></td></tr></table></figure>
<p>becomes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.add(((sub_8247(<span class="number">0</span>) ^ <span class="number">0x4936</span>) + sub_8247(<span class="number">0x14</span>)) ^ <span class="number">0x7cf5</span> == <span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>This is satisfiable. But not enough. We need to add rest of constraints.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> telnetlib, sys</div><div class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</div><div class="line"></div><div class="line">REMOTE = len(sys.argv) &gt;= <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">'r'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> REMOTE:</div><div class="line">    host = <span class="string">'pepperidge-farm_edb4ad2f103a9efde038346d2cd86a1e.quals.shallweplayaga.me'</span></div><div class="line">    port = <span class="number">2012</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    host = <span class="string">'127.0.0.1'</span></div><div class="line">    port = <span class="number">4000</span></div><div class="line"></div><div class="line">values = [BitVec(<span class="string">'x%d'</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x20</span>)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_8247</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> ZeroExt(<span class="number">8</span>, values[x]) &lt;&lt; <span class="number">8</span> | ZeroExt(<span class="number">8</span>, values[x + <span class="number">1</span>])</div><div class="line"></div><div class="line">s = Solver()</div><div class="line"></div><div class="line"><span class="comment"># sub_8269</span></div><div class="line">s.add(((sub_8247(<span class="number">0</span>) ^ <span class="number">0x4936</span>) + sub_8247(<span class="number">0x14</span>)) ^ <span class="number">0x7cf5</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_82aa</span></div><div class="line">s.add(sub_8247(<span class="number">6</span>) * sub_8247(<span class="number">8</span>) * (sub_8247(<span class="number">2</span>) ^ <span class="number">0xfdf</span>) ^ <span class="number">0x3dd8</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_8304</span></div><div class="line">s.add(((sub_8247(<span class="number">4</span>) ^ <span class="number">0xc7df</span>) + sub_8247(<span class="number">0xe</span>) * sub_8247(<span class="number">0xc</span>)) ^ <span class="number">0xeb70</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_835e</span></div><div class="line">s.add(((sub_8247(<span class="number">6</span>) ^ <span class="number">0xc5db</span>) + <span class="number">0x14aa</span>) ^ <span class="number">0x500d</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_838b</span></div><div class="line">s.add(sub_8247(<span class="number">8</span>) * sub_8247(<span class="number">0x1e</span>) ^ <span class="number">0x7be8</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_83c7</span></div><div class="line">s.add((sub_8247(<span class="number">0xa</span>) + sub_8247(<span class="number">6</span>) + sub_8247(<span class="number">0xC</span>)) ^ <span class="number">0xdf28</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_841c</span></div><div class="line">s.add(((sub_8247(<span class="number">0xC</span>) + <span class="number">0x5432</span>) | <span class="number">0x3008</span>) ^ <span class="number">0x3b78</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_8449</span></div><div class="line">s.add((sub_8247(<span class="number">0xE</span>) + <span class="number">0x1212</span>) ^ <span class="number">0x1697</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_8471</span></div><div class="line">s.add((sub_8247(<span class="number">0x10</span>) ^ <span class="number">0x8703</span>) ^  <span class="number">0x3136</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_8499</span></div><div class="line">s.add(((sub_8247(<span class="number">0x12</span>) + <span class="number">0x4004</span>) + (sub_8247(<span class="number">0x14</span>) ^ <span class="number">0xA52</span>)) ^  <span class="number">0x6272</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_84df</span></div><div class="line">s.add()</div><div class="line"><span class="comment"># sub_8502</span></div><div class="line">s.add((sub_8247(<span class="number">0x16</span>) + sub_8247(<span class="number">0x10</span>)) ^ <span class="number">0x9308</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_853e</span></div><div class="line">s.add(sub_8247(<span class="number">0x18</span>) ^ <span class="number">0x085b</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_8561</span></div><div class="line">s.add(((sub_8247(<span class="number">0x1a</span>) ^ <span class="number">0x863c</span>) + <span class="number">0x1234</span>) ^ <span class="number">0x9113</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_858e</span></div><div class="line">s.add((sub_8247(<span class="number">0x1c</span>) + sub_8247(<span class="number">8</span>) + sub_8247(<span class="number">0x12</span>)) ^ <span class="number">0xf0b8</span> == <span class="number">0</span>)</div><div class="line"><span class="comment"># sub_85e3</span></div><div class="line">s.add(((sub_8247(<span class="number">0x1e</span>) &amp; <span class="number">0x0f00</span>) + sub_8247(<span class="number">0</span>)) ^ <span class="number">0x9f94</span> == <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> s.check()</div><div class="line"><span class="keyword">print</span> s.model()</div><div class="line"></div><div class="line">input = <span class="string">''</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x20</span>):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        input += <span class="string">'%02x'</span> % s.model()[values[i]].as_long()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        input += <span class="string">'??'</span></div><div class="line"></div><div class="line">input = input.upper()</div><div class="line"><span class="keyword">print</span> input</div><div class="line"></div><div class="line">t = telnetlib.Telnet(host, port)</div><div class="line">t.write(input + <span class="string">'\n'</span>)</div><div class="line">t.interact()</div></pre></td></tr></table></figure>
<p>Even with halfway constraints, the process proceeds. So inscount with <a href="https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool" target="_blank" rel="external">Pin</a> or other dynamic binary instrumentation tools might be helpful.</p>
<p>Finally I got:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Enter your registration code: 90940C6017E5FEB82083F932E73E0485B635796DA353DCD3085BF8E356C87FF8</div><div class="line">Thank you for your patronage!</div><div class="line">Your username is: pepperidge</div><div class="line">This is the flag: th0s3_wh0_l0ok_0nly_to_th3_p4stur3_ar3_cert4in_t0_miss_th3_futur3</div></pre></td></tr></table></figure>
<p>The conclusive SMTLIB2 representation is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">; benchmark</div><div class="line">(set-info :status unknown)</div><div class="line">(set-logic QF_AUFBV)</div><div class="line">(declare-fun x1 () (_ BitVec 8))</div><div class="line">(declare-fun x0 () (_ BitVec 8))</div><div class="line">(declare-fun x31 () (_ BitVec 8))</div><div class="line">(declare-fun x30 () (_ BitVec 8))</div><div class="line">(declare-fun x19 () (_ BitVec 8))</div><div class="line">(declare-fun x18 () (_ BitVec 8))</div><div class="line">(declare-fun x9 () (_ BitVec 8))</div><div class="line">(declare-fun x8 () (_ BitVec 8))</div><div class="line">(declare-fun x29 () (_ BitVec 8))</div><div class="line">(declare-fun x28 () (_ BitVec 8))</div><div class="line">(declare-fun x27 () (_ BitVec 8))</div><div class="line">(declare-fun x26 () (_ BitVec 8))</div><div class="line">(declare-fun x25 () (_ BitVec 8))</div><div class="line">(declare-fun x24 () (_ BitVec 8))</div><div class="line">(declare-fun x17 () (_ BitVec 8))</div><div class="line">(declare-fun x16 () (_ BitVec 8))</div><div class="line">(declare-fun x23 () (_ BitVec 8))</div><div class="line">(declare-fun x22 () (_ BitVec 8))</div><div class="line">(declare-fun x21 () (_ BitVec 8))</div><div class="line">(declare-fun x20 () (_ BitVec 8))</div><div class="line">(declare-fun x15 () (_ BitVec 8))</div><div class="line">(declare-fun x14 () (_ BitVec 8))</div><div class="line">(declare-fun x13 () (_ BitVec 8))</div><div class="line">(declare-fun x12 () (_ BitVec 8))</div><div class="line">(declare-fun x7 () (_ BitVec 8))</div><div class="line">(declare-fun x6 () (_ BitVec 8))</div><div class="line">(declare-fun x11 () (_ BitVec 8))</div><div class="line">(declare-fun x10 () (_ BitVec 8))</div><div class="line">(declare-fun x5 () (_ BitVec 8))</div><div class="line">(declare-fun x4 () (_ BitVec 8))</div><div class="line">(declare-fun x3 () (_ BitVec 8))</div><div class="line">(declare-fun x2 () (_ BitVec 8))</div><div class="line">(assert</div><div class="line"> (let ((?x206 (bvand (bvor (bvshl ((_ zero_extend 8) x30) (_ bv8 16)) ((_ zero_extend 8) x31)) (_ bv3840 16))))</div><div class="line">(let ((?x209 (bvxor (bvadd ?x206 (bvor (bvshl ((_ zero_extend 8) x0) (_ bv8 16)) ((_ zero_extend 8) x1))) (_ bv40852 16))))</div><div class="line">(let (($x210 (= ?x209 (_ bv0 16))))</div><div class="line">(let ((?x82 (bvor (bvshl ((_ zero_extend 8) x8) (_ bv8 16)) ((_ zero_extend 8) x9))))</div><div class="line">(let ((?x200 (bvadd (bvor (bvshl ((_ zero_extend 8) x28) (_ bv8 16)) ((_ zero_extend 8) x29)) ?x82)))</div><div class="line">(let ((?x201 (bvadd ?x200 (bvor (bvshl ((_ zero_extend 8) x18) (_ bv8 16)) ((_ zero_extend 8) x19)))))</div><div class="line">(let (($x204 (= (bvxor ?x201 (_ bv61624 16)) (_ bv0 16))))</div><div class="line">(let ((?x190 (bvxor (bvor (bvshl ((_ zero_extend 8) x26) (_ bv8 16)) ((_ zero_extend 8) x27)) (_ bv34364 16))))</div><div class="line">(let (($x195 (= (bvxor (bvadd ?x190 (_ bv4660 16)) (_ bv37139 16)) (_ bv0 16))))</div><div class="line">(let ((?x183 (bvxor (bvor (bvshl ((_ zero_extend 8) x24) (_ bv8 16)) ((_ zero_extend 8) x25)) (_ bv2139 16))))</div><div class="line">(let (($x184 (= ?x183 (_ bv0 16))))</div><div class="line">(let ((?x174 (bvadd (bvor (bvshl ((_ zero_extend 8) x22) (_ bv8 16)) ((_ zero_extend 8) x23)) (bvor (bvshl ((_ zero_extend 8) x16) (_ bv8 16)) ((_ zero_extend 8) x17)))))</div><div class="line">(let (($x177 (= (bvxor ?x174 (_ bv37640 16)) (_ bv0 16))))</div><div class="line">(let ((?x165 (bvxor (bvor (bvshl ((_ zero_extend 8) x20) (_ bv8 16)) ((_ zero_extend 8) x21)) (_ bv2642 16))))</div><div class="line">(let ((?x163 (bvadd (bvor (bvshl ((_ zero_extend 8) x18) (_ bv8 16)) ((_ zero_extend 8) x19)) (_ bv16388 16))))</div><div class="line">(let (($x169 (= (bvxor (bvadd ?x163 ?x165) (_ bv25202 16)) (_ bv0 16))))</div><div class="line">(let ((?x154 (bvxor (bvor (bvshl ((_ zero_extend 8) x16) (_ bv8 16)) ((_ zero_extend 8) x17)) (_ bv34563 16))))</div><div class="line">(let (($x157 (= (bvxor ?x154 (_ bv12598 16)) (_ bv0 16))))</div><div class="line">(let ((?x145 (bvadd (bvor (bvshl ((_ zero_extend 8) x14) (_ bv8 16)) ((_ zero_extend 8) x15)) (_ bv4626 16))))</div><div class="line">(let (($x148 (= (bvxor ?x145 (_ bv5783 16)) (_ bv0 16))))</div><div class="line">(let ((?x107 (bvor (bvshl ((_ zero_extend 8) x12) (_ bv8 16)) ((_ zero_extend 8) x13))))</div><div class="line">(let (($x143 (= (bvxor (bvor (bvadd ?x107 (_ bv21554 16)) (_ bv12296 16)) (_ bv15224 16)) (_ bv0 16))))</div><div class="line">(let ((?x78 (bvor (bvshl ((_ zero_extend 8) x6) (_ bv8 16)) ((_ zero_extend 8) x7))))</div><div class="line">(let ((?x132 (bvadd (bvor (bvshl ((_ zero_extend 8) x10) (_ bv8 16)) ((_ zero_extend 8) x11)) ?x78)))</div><div class="line">(let (($x136 (= (bvxor (bvadd ?x132 ?x107) (_ bv57128 16)) (_ bv0 16))))</div><div class="line">(let ((?x124 (bvmul ?x82 (bvor (bvshl ((_ zero_extend 8) x30) (_ bv8 16)) ((_ zero_extend 8) x31)))))</div><div class="line">(let (($x127 (= (bvxor ?x124 (_ bv31720 16)) (_ bv0 16))))</div><div class="line">(let (($x119 (= (bvxor (bvadd (bvxor ?x78 (_ bv50651 16)) (_ bv5290 16)) (_ bv20493 16)) (_ bv0 16))))</div><div class="line">(let ((?x108 (bvmul (bvor (bvshl ((_ zero_extend 8) x14) (_ bv8 16)) ((_ zero_extend 8) x15)) ?x107)))</div><div class="line">(let ((?x109 (bvadd (bvxor (bvor (bvshl ((_ zero_extend 8) x4) (_ bv8 16)) ((_ zero_extend 8) x5)) (_ bv51167 16)) ?x108)))</div><div class="line">(let (($x112 (= (bvxor ?x109 (_ bv60272 16)) (_ bv0 16))))</div><div class="line">(let ((?x90 (bvmul (bvmul ?x78 ?x82) (bvxor (bvor (bvshl ((_ zero_extend 8) x2) (_ bv8 16)) ((_ zero_extend 8) x3)) (_ bv4063 16)))))</div><div class="line">(let (($x93 (= (bvxor ?x90 (_ bv15832 16)) (_ bv0 16))))</div><div class="line">(let ((?x50 (bvadd (bvxor (bvor (bvshl ((_ zero_extend 8) x0) (_ bv8 16)) ((_ zero_extend 8) x1)) (_ bv18742 16)) (bvor (bvshl ((_ zero_extend 8) x20) (_ bv8 16)) ((_ zero_extend 8) x21)))))</div><div class="line">(let (($x54 (= (bvxor ?x50 (_ bv31989 16)) (_ bv0 16))))</div><div class="line">(and $x54 $x93 $x112 $x119 $x127 $x136 $x143 $x148 $x157 $x169 $x177 $x184 $x195 $x204 $x210)))))))))))))))))))))))))))))))))))))</div><div class="line">(check-sat)</div></pre></td></tr></table></figure>
<h1 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words"></a>Final Words</h1><p>I enjoyed this challenge. It seems to be easy or medium-easy difficulty rating. If only I could have solved more difficult Reverse Engineering challenges during quals–liberty, godzilla, and so on.</p>
<p>Recently I read <a href="https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/blazytko" target="_blank" rel="external">T. Blazytko et al. USENIX Security’17</a>. The paper says the system named Syntia automatically deobfuscate binaries with program synthesis. Program synthesis is a method to synthesize some pieces of program from given I/O samples and possible operators–like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</div><div class="line"></div><div class="line">x, y, h = BitVecs([<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'h'</span>], <span class="number">8</span>)</div><div class="line"></div><div class="line"><span class="comment"># I/O samples</span></div><div class="line">t1 = And(x == <span class="number">1</span>, y == <span class="number">2</span>)</div><div class="line">t2 = And(x == <span class="number">2</span>, y == <span class="number">4</span>)</div><div class="line">t3 = And(x == <span class="number">3</span>, y == <span class="number">6</span>)</div><div class="line">phi_1 = Or(t1, t2, t3)</div><div class="line"></div><div class="line"><span class="comment"># h is subject to synthesize</span></div><div class="line">phi_2 = y == x &lt;&lt; h</div><div class="line"></div><div class="line">s = Solver()</div><div class="line">s.add(ForAll([x, y], Implies(phi_1, phi_2)))</div><div class="line"></div><div class="line"><span class="keyword">print</span> s.check() <span class="comment"># sat</span></div><div class="line"><span class="keyword">print</span> s.model() <span class="comment"># [h = 2]</span></div></pre></td></tr></table></figure>
<p>This is just a simple example. In practical, program slicing and path pruning will be needed. Both symbolic execution and program synthesis depend on SMT solver, but according to the paper, program synthesis is more suitable for deobfuscation tasks… really? I’ll investigate further.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HAI DOMO. This post is for &lt;a href=&quot;https://qiita.com/advent-calendar/2017/musashino&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;武蔵野 Advent Calendar 
    
    </summary>
    
    
      <category term="reversing" scheme="http://ntddk.github.io/tags/reversing/"/>
    
      <category term="symbolic execution" scheme="http://ntddk.github.io/tags/symbolic-execution/"/>
    
      <category term="program synthesis" scheme="http://ntddk.github.io/tags/program-synthesis/"/>
    
  </entry>
  
  <entry>
    <title>How I Found the Honeypot: Dark Web OSINT and Image Processing</title>
    <link href="http://ntddk.github.io/2017/12/02/how-i-found-the-honeypot-dark-web-osint-and-image-processing/"/>
    <id>http://ntddk.github.io/2017/12/02/how-i-found-the-honeypot-dark-web-osint-and-image-processing/</id>
    <published>2017-12-01T15:00:00.000Z</published>
    <updated>2017-12-03T06:36:12.924Z</updated>
    
    <content type="html"><![CDATA[<p>This post is for <a href="https://adventar.org/calendars/2263" target="_blank" rel="external">Honeypot Advent Calendar 2017</a>.</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In May this year, Trend Micro researchers have announced interesting research results in the article titled <a href="http://blog.trendmicro.com/trendlabs-security-intelligence/red-on-red-the-attack-landscape-of-the-dark-web/" target="_blank" rel="external">Red on Red: The Attack Landscape of the Dark Web - TrendLabs Security Intelligence Blog</a>. They had deployed a honeypot on the dark web and monitored attack activities. They’ve done great work, indeed.</p>
<p>Well then, with the aid of the screenshot in that article, probably I found the honeypot. May I introduce the how and why?</p>
<h1 id="Dark-Web-OSINT"><a href="#Dark-Web-OSINT" class="headerlink" title="Dark Web OSINT"></a>Dark Web OSINT</h1><p>In March this year, when they would have created an presentation slide, I have been running the crawler for the dark web. My purpose was to create a pictorial book of Tor hidden services below:</p>
<p><img src="/image/onionstack/onionstack.png" width="100%" height="100%"></p>
<p>The crawler is simple, just like saying “Hello, world!” to PhantomJS. It has only capability of taking a screenshot.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">service_args = [ </div><div class="line">            <span class="comment"># Do not insert blank to each of args.</span></div><div class="line">            <span class="string">'--proxy=127.0.0.1:9050'</span>,</div><div class="line">            <span class="string">'--proxy-type=socks5'</span></div><div class="line">        ]</div><div class="line">dcap = &#123;</div><div class="line">        <span class="string">'phantomjs.page.settings.userAgent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; rv:31.0) Gecko/20100101 Firefox/31.0'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_title_with_screenshot</span><span class="params">(url)</span>:</span></div><div class="line">    driver = webdriver.PhantomJS(service_args = service_args, desired_capabilities = dcap)</div><div class="line">    driver.set_window_size(<span class="number">1024</span>, <span class="number">512</span>)</div><div class="line">    driver.get(<span class="string">'http://'</span> + url + <span class="string">'.onion'</span>) <span class="comment"># 'http://' is required.</span></div><div class="line">    driver.save_screenshot(url + <span class="string">'.png'</span>)</div><div class="line">    title = driver.title</div><div class="line">    driver.close()</div><div class="line">    <span class="keyword">return</span> title</div></pre></td></tr></table></figure>
<p>I have discovered 40,208 onion domains and confirmed 1,797 domains were active.</p>
<h1 id="Image-Processing"><a href="#Image-Processing" class="headerlink" title="Image Processing"></a>Image Processing</h1><p>Thanks to collecting screenshots by chance, I was able to find a site similar to the screenshot in their article–with histgram calculation:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">list = glob.glob(<span class="string">'./images/*.png'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cbir</span><span class="params">()</span>:</span></div><div class="line">    target_im = cv2.imread(sys.argv[<span class="number">1</span>])</div><div class="line">    target_hist = cv2.calcHist([target_im], [<span class="number">0</span>], <span class="keyword">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list:</div><div class="line">        comparing_im = cv2.imread(i)</div><div class="line">        comparing_hist = cv2.calcHist([comparing_im], [<span class="number">0</span>], <span class="keyword">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</div><div class="line">        diff = cv2.compareHist(target_hist, comparing_hist, <span class="number">0</span>)</div><div class="line">        <span class="keyword">if</span> diff &gt; float(sys.argv[<span class="number">2</span>]): <span class="comment"># Threshold</span></div><div class="line">            <span class="keyword">print</span> i, diff</div></pre></td></tr></table></figure>
<p>Yet domain names are not posted in their articles, I believe this is it.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget http://blog.trendmicro.com/trendlabs-security-intelligence/files/2017/05/red-on-red-1.jpg</div><div class="line">$ cbir.py red-on-red-1.jpg</div><div class="line">$ python cbir.py red-on-red-1.jpg 0.9</div><div class="line">./images/s5**********jlp2.png 0.979927357262</div></pre></td></tr></table></figure>
<p>The screenshot:</p>
<p><img src="/image/onionstack/s5__________jlp2.png" width="100%" height="100%"></p>
<p>There are many clone sites in the dark web–for backup, or even for spying? <code>s5**********jlp2.onion</code> might be cloned and have maintained by others. Even in that case, the site is likely to be a honeypot.</p>
<p>Interestingly, I also found some posts like to induce to the site at <a href="https://www.reddit.com/r/onions/" target="_blank" rel="external">r/onions</a>. I believe these are done by researcher.</p>
<h1 id="Last-Words"><a href="#Last-Words" class="headerlink" title="Last Words"></a>Last Words</h1><p>We got a glimpse of deep in abyss. This is just an accidental case study. Needless to say, no insult intended.</p>
<p>My crawler and image processing scripts are available at <a href="https://github.com/ntddk/onionstack" target="_blank" rel="external">ntddk/onionstack</a>. Crawling of the dark web is accompanied by risk. After all, with ethical considerations, I’ve deleted screenshots I’d captured except for the honeypot.</p>
<p>If you interested in the dark web OSINT, <a href="http://www.automatingosint.com/blog/category/dark-web/" target="_blank" rel="external">Dark Web | Automating OSINT Blog</a> will be a good starting point.</p>
<p>Anyway, keep safety.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post is for &lt;a href=&quot;https://adventar.org/calendars/2263&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Honeypot Advent Calendar 2017&lt;/a&gt;.&lt;/p&gt;
&lt;h1 
    
    </summary>
    
    
      <category term="honeypot" scheme="http://ntddk.github.io/tags/honeypot/"/>
    
      <category term="dark web" scheme="http://ntddk.github.io/tags/dark-web/"/>
    
  </entry>
  
  <entry>
    <title>Backward Program Slicing with IDAPython and Triton</title>
    <link href="http://ntddk.github.io/2017/11/23/backward-program-slicing-with-idapython-and-triton/"/>
    <id>http://ntddk.github.io/2017/11/23/backward-program-slicing-with-idapython-and-triton/</id>
    <published>2017-11-22T16:30:00.000Z</published>
    <updated>2018-05-17T07:56:17.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>As you know, IDAPython is quite useful. And <a href="https://github.com/JonathanSalwan/Triton" target="_blank" rel="external">Triton</a> concolic execution engine has python binding. Then… why not integrate them? I tried to stand on the shoulders of giants.</p>
<h1 id="Backward-Program-Slicing"><a href="#Backward-Program-Slicing" class="headerlink" title="Backward Program Slicing"></a>Backward Program Slicing</h1><p>Roughly speaking, program slicing is a method to extract subset of program which is relevant to given statement. Here is an excerpt from <a href="https://dl.acm.org/citation.cfm?id=802557" target="_blank" rel="external">M. Weiser. ICSE’81</a>:</p>
<blockquote>
<p>Starting from a subset of a program’s behavior, slicing reduces that program to a minimal form which still produces that behavior. The reduced program, called a “slice”, is an independent program guaranteed to faithfully represent the original program within the domain of the specified subset of behavior.</p>
</blockquote>
<p>Kudos to Jonathan Salwan, we can easily apply backward program slicing to binary analysis process with minor modification of <a href="https://github.com/JonathanSalwan/Triton/blob/master/src/examples/python/backward_slicing.py" target="_blank" rel="external"><code>backward_slicing.py</code></a> and <a href="https://github.com/JonathanSalwan/Triton/blob/master/src/examples/python/proving_opaque_predicates.py" target="_blank" rel="external"><code>proving_opaque_predicates.py</code></a>. I wrote a simple, tiny glue between Triton and IDA Pro:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> idc <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> triton <span class="keyword">import</span> *</div><div class="line"></div><div class="line">ctx = TritonContext()</div><div class="line">regs = &#123;</div><div class="line">        <span class="string">'eax'</span>: REG.X86.EAX,</div><div class="line">        <span class="string">'ebx'</span>: REG.X86.EBX,</div><div class="line">        <span class="string">'ecx'</span>: REG.X86.ECX,</div><div class="line">        <span class="string">'edx'</span>: REG.X86.EDX,</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">symbolization_init</span><span class="params">()</span>:</span></div><div class="line">    ctx.convertRegisterToSymbolicVariable(ctx.registers.eax)</div><div class="line">    ctx.convertRegisterToSymbolicVariable(ctx.registers.ebx)</div><div class="line">    ctx.convertRegisterToSymbolicVariable(ctx.registers.ecx)</div><div class="line">    ctx.convertRegisterToSymbolicVariable(ctx.registers.edx)</div><div class="line">    <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">opaque_predicate_detection</span><span class="params">(pc)</span>:</span></div><div class="line">    ctx.setArchitecture(ARCH.X86)</div><div class="line">    ctx.setAstRepresentationMode(AST_REPRESENTATION.PYTHON)</div><div class="line">    symbolization_init()</div><div class="line">    ast_ctx = ctx.getAstContext()</div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        instruction = Instruction()</div><div class="line">        instruction.setAddress(pc)</div><div class="line">        opcode = GetManyBytes(pc, ItemSize(pc)) <span class="comment"># Disassemble with IDA Pro</span></div><div class="line">        instruction.setOpcode(opcode)</div><div class="line"></div><div class="line">        ctx.processing(instruction) <span class="comment"># Emulate instruction without Pintool</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> se <span class="keyword">in</span> instruction.getSymbolicExpressions():</div><div class="line">            se.setComment(str(instruction))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> str(instruction.getDisassembly()).split()[<span class="number">0</span>] == <span class="string">'cmp'</span>: <span class="comment"># if instruction.isCompare():</span></div><div class="line">            reg = str(instruction.getOperands()[<span class="number">0</span>]).split(<span class="string">':'</span>)[<span class="number">0</span>] <span class="comment"># Get first operand</span></div><div class="line">            <span class="keyword">if</span> reg <span class="keyword">in</span> regs:</div><div class="line">                Expr = ctx.getSymbolicRegisters()[regs[reg]]</div><div class="line">                slicing = ctx.sliceExpressions(Expr)</div><div class="line">                <span class="keyword">for</span> k, v <span class="keyword">in</span> sorted(slicing.items()):</div><div class="line">                    <span class="keyword">print</span> v.getComment()</div><div class="line">                <span class="keyword">print</span> instruction</div><div class="line">        <span class="keyword">elif</span> instruction.isBranch():</div><div class="line">            <span class="keyword">print</span> instruction</div><div class="line">            <span class="keyword">if</span> instruction.isConditionTaken():</div><div class="line">                <span class="keyword">print</span> <span class="string">'branch will taken'</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">print</span> <span class="string">'branch will not taken'</span></div><div class="line"></div><div class="line">            <span class="keyword">break</span></div><div class="line"></div><div class="line">        pc = NextHead(pc)</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">'-'</span> * <span class="number">50</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    ea = ScreenEA() <span class="comment"># Get address corresponding to cursor</span></div><div class="line">    opaque_predicate_detection(ea) </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    view = main()</div></pre></td></tr></table></figure>
<h1 id="Showcase"><a href="#Showcase" class="headerlink" title="Showcase"></a>Showcase</h1><p>The snippet extracts subset of program which is relevant to branch condition. We can run this from <code>File -&gt; Script file</code> in IDA Pro menu.</p>
<h2 id="Conditional-Branch"><a href="#Conditional-Branch" class="headerlink" title="Conditional Branch"></a>Conditional Branch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">.text:004074DD     loc_4074DD:</div><div class="line">.text:004074DD 040 mov     dword ptr [edi+18h], 0Ah</div><div class="line">.text:004074E4 040 mov     dword ptr [edi+14h], 0</div><div class="line">.text:004074EB 040 mov     word ptr [edi+8], 8235h</div><div class="line">.text:004074F1 040 mov     dword ptr [edi+0Ch], 3E8h</div><div class="line">.text:004074F8 040 mov     dword ptr [edi+10h], 0BB8h</div><div class="line">.text:004074FF 040 sub     esp, 4</div><div class="line">.text:00407502 044 mov     [esp+40h+Memory], 0B8h ; Size        ; cursor</div><div class="line">.text:00407509 044 call    ??2@YAPAXI@Z    ; operator new(uint)</div><div class="line">.text:0040750E 044 add     esp, 4</div><div class="line">.text:00407511 040 mov     [esi+18h], eax</div><div class="line">.text:00407514 040 mov     eax, dword_591EE4</div><div class="line">.text:00407519 040 mov     ecx, dword_591EE0</div><div class="line">.text:0040751F 040 imul    eax, eax</div><div class="line">.text:00407522 040 imul    edx, eax, 7</div><div class="line">.text:00407525 040 dec     edx</div><div class="line">.text:00407526 040 mov     eax, ecx</div><div class="line">.text:00407528 040 imul    eax, eax</div><div class="line">.text:0040752B 040 cmp     edx, eax</div><div class="line">.text:0040752D 040 jz      short loc_407538</div></pre></td></tr></table></figure>
<p>becomes:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0x407514: mov eax, dword ptr [0x591ee4]</div><div class="line">0x40751f: imul eax, eax</div><div class="line">0x407522: imul edx, eax, 7</div><div class="line">0x407525: dec edx</div><div class="line">0x40752b: cmp edx, eax</div><div class="line">0x40752d: je 0x407538</div><div class="line">branch will not taken</div></pre></td></tr></table></figure>
<h2 id="Unconditional-Branch"><a href="#Unconditional-Branch" class="headerlink" title="Unconditional Branch"></a>Unconditional Branch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.text:004078C3     loc_4078C3:</div><div class="line">.text:004078C3 000 mov     esp, edi           ; cursor</div><div class="line">.text:004078C5 000 mov     eax, dword_591EAC</div><div class="line">.text:004078CA 000 lea     ecx, [eax+4]</div><div class="line">.text:004078CD 000 mov     edx, eax</div><div class="line">.text:004078CF 000 sar     edx, cl</div><div class="line">.text:004078D1 000 lea     eax, [eax+edx*2]</div><div class="line">.text:004078D4 000 mov     dword_591EAC, eax</div><div class="line">.text:004078D9 000 jmp     short loc_4</div></pre></td></tr></table></figure>
<p>becomes:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0x4078d9: jmp 0x40789a</div><div class="line">branch will taken</div></pre></td></tr></table></figure>
<p>Looks nice.</p>
<h1 id="Last-Words"><a href="#Last-Words" class="headerlink" title="Last Words"></a>Last Words</h1><p>Triton’s emulation iteration is compatible to IDAPython manner. Therefore, The combination of IDA Pro and Triton is pretty good. </p>
<p>Cheers,</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;As you know, IDAPython is quit
    
    </summary>
    
    
      <category term="reversing" scheme="http://ntddk.github.io/tags/reversing/"/>
    
      <category term="symbolic execution" scheme="http://ntddk.github.io/tags/symbolic-execution/"/>
    
  </entry>
  
  <entry>
    <title>A Supplemental Guide to Migrate PySide Code to PyQt5 Within Your IDAPython Script</title>
    <link href="http://ntddk.github.io/2017/11/08/a-supplemental-guide-to-migrate-pySide-code-to-pyqt5-within-your-idapython-script/"/>
    <id>http://ntddk.github.io/2017/11/08/a-supplemental-guide-to-migrate-pySide-code-to-pyqt5-within-your-idapython-script/</id>
    <published>2017-11-08T12:00:00.000Z</published>
    <updated>2017-11-17T03:24:58.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>IDAPython is a powerful feature of IDA Pro, and there are many open-sourced IDAPython projects. However, we cannot use every GUI-based IDAPython script due to some Qt-related breaking changes between IDA Pro 6.8 and 6.9 or later. The main problem is about migrating no longer supported PySide code to PyQt5.</p>
<p>Recently I ported PySide code within <a href="https://github.com/RobinDavid/idasec" target="_blank" rel="external">idasec</a>–one of the most sophisticated deobfuscation frameworks, which tackles opaque predicates and call stack tampering in terms of infeasibility questions, by utilizing Backward-Bounded Dynamic Symbolic Execution proposed in the remarkably well written paper <a href="https://www.ieee-security.org/TC/SP2017/papers/220.pdf" target="_blank" rel="external">S. Bardin et al. IEEE S&amp;P’17</a>–to PyQt5.</p>
<p>That’s why I decided to write this blog post for a note to self and for someone trying to do similar thing.</p>
<h1 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h1><p>There are 2 guidances to migrate PySide code to PyQt5:</p>
<ul>
<li><a href="http://www.hexblog.com/?p=975" target="_blank" rel="external">IDAPython: migrating PySide code to PyQt5 – Hex Blog</a></li>
<li><a href="https://github.com/tmr232/Cute" target="_blank" rel="external">idacute</a></li>
</ul>
<p>Please read them before. I only give supplemental information in addition to predecessors.</p>
<h1 id="How-to-Migrate"><a href="#How-to-Migrate" class="headerlink" title="How to Migrate"></a>How to Migrate</h1><p>Now let’s get started.</p>
<h2 id="Change-QtGui-methods-to-QtWidgets"><a href="#Change-QtGui-methods-to-QtWidgets" class="headerlink" title="Change QtGui methods to QtWidgets"></a>Change <code>QtGui</code> methods to <code>QtWidgets</code></h2><p>Most methods in <code>QtGui</code> migrated to <code>QtWidgets</code>. Therefore,</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PySide <span class="keyword">import</span> QtGui, QtCore</div></pre></td></tr></table></figure>
<p>becomes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</div></pre></td></tr></table></figure>
<p>As an example, <code>QTextEdit</code> described in Hex Blog. In additions, the methods to be rewritten are as follows:</p>
<ul>
<li><code>QtWidgets.QLayout</code></li>
<li><code>QtWidgets.QVBoxLayout</code></li>
<li><code>QtWidgets.QHBoxLayout</code></li>
<li><code>QtWidgets.QWidget</code></li>
<li><code>QtWidgets.QTableWidget</code></li>
<li><code>QtWidgets.QListWidget</code></li>
<li><code>QtWidgets.QTabWidget</code></li>
<li><code>QtWidgets.QDockWidget</code></li>
<li><code>QtWidgets.QTreeWidget</code></li>
<li><code>QtWidgets.QTreeWidgetItem</code></li>
<li><code>QtWidgets.QPushButton</code></li>
<li><code>QtWidgets.QRadioButton</code></li>
<li><code>QtWidgets.QToolButton</code></li>
<li><code>QtWidgets.QButtonGroup</code></li>
<li><code>QtWidgets.QGroupBox</code></li>
<li><code>QtWidgets.QSpinBox</code></li>
<li><code>QtWidgets.QCheckBox</code></li>
<li><code>QtWidgets.QComboBox</code></li>
<li><code>QtWidgets.QTextEdit</code></li>
<li><code>QtWidgets.QLineEdit</code></li>
<li><code>QtWidgets.QApplication</code></li>
<li><code>QtWidgets.QLabel</code></li>
<li><code>QtWidgets.QSizePolicy</code></li>
<li><code>QtWidgets.QMenu</code></li>
<li><code>QtWidgets.QFrame</code></li>
<li><code>QtWidgets.QProgressBar</code></li>
<li><code>QtWidgets.QStyle</code></li>
<li><code>QtWidgets.QSpacerItem</code></li>
<li><code>QtWidgets.QScrollArea</code></li>
<li><code>QtWidgets.QSplitter</code></li>
<li>There might be more…</li>
</ul>
<p>My experience says that other than the following 3 methods may be rewritten:</p>
<ul>
<li><code>QtGui.QPixmap</code></li>
<li><code>QtGui.QIcon</code></li>
<li><code>QtGui.QFont</code></li>
</ul>
<p>idacute may overwrite all of <code>QtGui</code> methods, so I think there still needs to be manual works.</p>
<h2 id="Overwrite-fromUtf8"><a href="#Overwrite-fromUtf8" class="headerlink" title="Overwrite _fromUtf8"></a>Overwrite <code>_fromUtf8</code></h2><p>We also need to overwrite <code>_fromUtf8</code>.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    _fromUtf8 = QtCore.QString.fromUtf8</div><div class="line"><span class="keyword">except</span> AttributeError:</div><div class="line">　　　　_fromUtf8 = <span class="keyword">lambda</span> s: s</div></pre></td></tr></table></figure>
<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>These issues are described by predecessors:</p>
<ul>
<li>Handling SIGNAL</li>
<li>Change <code>FormToPySideWidget</code> to <code>FormToPyQtWidget</code></li>
<li>Change <code>setResizeMode</code> to <code>setSectionResizeMode</code></li>
</ul>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>This time, I was able to run idasec on IDA Pro 7.0 with <a href="https://github.com/RobinDavid/idasec/pull/2" target="_blank" rel="external">some bug fixes and dirty patches</a> – like this cool video:</p>
<center><iframe width="560" height="315" src="https://www.youtube.com/embed/Z14ab_rzjfA" frameborder="0" allowfullscreen></iframe></center>

<p>If you are an IDA Pro 7.0 user, note that other backward-compatibility issue described in <a href="https://www.hex-rays.com/products/ida/7.0/docs/idapython_backward_compat_695.shtml" target="_blank" rel="external">IDA: IDAPython backward-compatibility with 6.95 APIs</a> will occur.</p>
<p>Enjoy!</p>
<p>HAI DOMO VIRTUAL YOUTUBER KIZUNA AI DESU. I’m still working on my English.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;IDAPython is a powerful featur
    
    </summary>
    
    
      <category term="reversing" scheme="http://ntddk.github.io/tags/reversing/"/>
    
      <category term="symbolic execution" scheme="http://ntddk.github.io/tags/symbolic-execution/"/>
    
  </entry>
  
  <entry>
    <title>死にゆくアンチウイルスへの祈り</title>
    <link href="http://ntddk.github.io/2017/09/10/a-prayer-for-the-dying-antivirus/"/>
    <id>http://ntddk.github.io/2017/09/10/a-prayer-for-the-dying-antivirus/</id>
    <published>2017-09-10T08:15:00.000Z</published>
    <updated>2017-11-08T03:13:34.079Z</updated>
    
    <content type="html"><![CDATA[<p>　<a href="https://connpass.com/event/62844/" target="_blank" rel="external">Security meets Machine Learning</a>という勉強会にて，上記のタイトルで発表した．資料はこちら：</p>
<script async class="speakerdeck-embed" data-id="5c63dce1d2494dfc9f068fe1c58eab41" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>　謎の力が働いて会社からの発表になっておりますが，機械学習の研究をしているわけではありません．既存研究の再現実装を試みているとこれ中国語の部屋じゃんという気持ちになる．<br>　ともあれ，これまで各種資料はただSpeakerDeckに載せるだけだったのを今後はブログから一元的に参照できるようにします．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　&lt;a href=&quot;https://connpass.com/event/62844/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Security meets Machine Learning&lt;/a&gt;という勉強会にて，上記のタイトルで発表した．資料はこ
    
    </summary>
    
    
      <category term="machine learning" scheme="http://ntddk.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>z3pyリンク集</title>
    <link href="http://ntddk.github.io/2017/08/24/z3py-link-collection/"/>
    <id>http://ntddk.github.io/2017/08/24/z3py-link-collection/</id>
    <published>2017-08-24T14:59:59.000Z</published>
    <updated>2017-12-14T07:41:43.645Z</updated>
    
    <content type="html"><![CDATA[<p>　なにもかも忘れかけている．</p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>　z3pyはSMTソルバ<a href="https://github.com/Z3Prover/z3" target="_blank" rel="external">Z3</a>のPythonバインディング．たとえば</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    <span class="keyword">if</span>(x * <span class="number">2</span> + <span class="number">3</span> * y == <span class="number">4</span></div><div class="line">        &amp;&amp; x * <span class="number">3</span> + y == <span class="number">-1</span>)&#123;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"congrats!"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>のようなプログラムに対して</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</div><div class="line"></div><div class="line">x = Int(<span class="string">'x'</span>)</div><div class="line">y = Int(<span class="string">'y'</span>)</div><div class="line"></div><div class="line">s = Solver()</div><div class="line">s.add(x * <span class="number">2</span> + <span class="number">3</span> * y == <span class="number">4</span>)</div><div class="line">s.add(x * <span class="number">3</span> + y == <span class="number">-1</span>)</div><div class="line"></div><div class="line">print(s.check())</div><div class="line">print(s.model())</div></pre></td></tr></table></figure>
<p>としてやれば期待される入力値<code>[x = -1, y = 2]</code>を算出できる．これだけではだからなに？ という感じだが．シンボリック実行は各命令とメモリの状態からこの割当を自動生成するものだと思えばよい．これが<a href="https://github.com/angr/angr" target="_blank" rel="external">angr</a>やら<a href="https://github.com/JonathanSalwan/Triton" target="_blank" rel="external">Triton</a>やら<a href="https://github.com/cea-sec/miasm" target="_blank" rel="external">miasm</a>やら<a href="https://github.com/trailofbits/manticore" target="_blank" rel="external">manticore</a>やら，その他いまどきのバイナリ解析ツール群の基盤となっているというわけです．</p>
<h1 id="参考になったサイト"><a href="#参考になったサイト" class="headerlink" title="参考になったサイト"></a>参考になったサイト</h1><p>　で，メモっとかないと忘れるので．SAT/SMTソルバのしくみやシンボリック実行全般まで広げると膨大になるということで，z3pyに限っています．前者については<a href="http://www-erato.ist.hokudai.ac.jp/docs/seminar/nabeshima.pdf" target="_blank" rel="external">高速SATソルバーの原理 - 基盤(S)離散構造処理系プロジェクト[PDF]</a>や<a href="https://www.slideshare.net/sakai/satsmt" target="_blank" rel="external">SAT/SMTソルバの仕組み - SlideShare</a>を読むとよいでしょう．いまどきのSAT/SMTソルバにはVSIDSやらLubyリスタートやらいろいろな工夫が盛り込まれているが，とりあえずユーザとしてはDPLLとCDCLさえ抑えておけば問題ないはず．後者，シンボリック実行全般に関するおすすめの文献は秘密．Pythonバインディング以外の記事，angrやTritonなどサードパーティのツール群に関する記事も省いてある．</p>
<table>
<thead>
<tr>
<th>ウェブサイト</th>
<th>概要</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://wiki.mma.club.uec.ac.jp/CTF/Toolkit/z3py" target="_blank" rel="external">CTF/Toolkit/z3py - 電気通信大学MMA</a></td>
<td>日本語で書かれた入門資料．これには書かれてないが<code>BitVecSort</code>も便利．</td>
</tr>
<tr>
<td><a href="https://doar-e.github.io/presentations/securityday2015/SecDay-Lille-2015-Axel-0vercl0k-Souchet.html#/" target="_blank" rel="external">Theorem prover, symbolic execution and practical reverse-engineering</a></td>
<td>z3pyのチュートリアル．まずはこの通りに手を動かす．</td>
</tr>
<tr>
<td><a href="http://doar-e.github.io/blog/2013/09/16/breaking-kryptonites-obfuscation-with-symbolic-execution/" target="_blank" rel="external">Breaking Kryptonite’s Obfuscation: A Static Analysis Approach Relying on Symbolic Execution</a></td>
<td>シンボリック実行の最小構成の実装．</td>
</tr>
<tr>
<td><a href="https://github.com/0vercl0k/z3-playground/" target="_blank" rel="external">0vercl0k/z3-playground</a></td>
<td>上2つの資料で参照されているソースコード群．</td>
</tr>
<tr>
<td><a href="https://anee.me/solving-a-simple-crackme-using-z3-68c55af7f7b1" target="_blank" rel="external">Solving a simple crackme using Z3 – Aneesh Dogra’s Blog</a></td>
<td>簡単なcrackmeのwriteup.</td>
</tr>
<tr>
<td><a href="https://rolandsako.wordpress.com/2016/02/17/playing-with-z3-hacking-the-serial-check/" target="_blank" rel="external">Playing with Z3, hacking the serial check. – rosako’s blog</a></td>
<td>簡単なcrackmeのwriteup.</td>
</tr>
<tr>
<td><a href="https://blog.lse.epita.fr/articles/24-using-sat-and-smt-to-defeat-simple-hashing-algorit.html" target="_blank" rel="external">Using SAT and SMT to defeat simple hashing algorithms - LSE Blog</a></td>
<td>オレオレハッシュ関数の解析．</td>
</tr>
<tr>
<td><a href="https://0xec.blogspot.jp/2016/04/reversing-petya-ransomware-with.html" target="_blank" rel="external">Reversing the petya ransomware with constraint solvers</a></td>
<td>ランサムウェアPetyaのSalsa実装の不備を突くdecryptor.</td>
</tr>
<tr>
<td><a href="https://github.com/thomasjball/PyExZ3" target="_blank" rel="external">thomasjball/PyExZ3</a></td>
<td>シンボリック実行の実装例．z3公式からリンクが貼られている．<code>symbolic/</code>以下，<code>z3_wrap.py</code>, <code>loader.py</code>が参考になる．</td>
</tr>
<tr>
<td><a href="https://yurichev.com/writings/SAT_SMT_draft-EN.pdf" target="_blank" rel="external">Quick introduction into SAT/SMT solvers and symbolic execution (DRAFT) [PDF]</a></td>
<td>いろいろリンク貼ったけどこれだけ読めばいい．SMTソルバの紹介．数独の解き方．マインスイーパの自動化．デコンパイラ．難読化解除．シンボリック実行．ハッシュ関数の解析．全部載っている．Dennis Yurichev氏，<a href="https://beginners.re/" target="_blank" rel="external">Reverse Engineering for Beginners</a>も書いていて，慈善事業家か？</td>
</tr>
</tbody>
</table>
<p>　はてなブックマークを使っていればよかったのではという気がしてきた．</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　z3py便利最高ですね．みなさんは便利最高ですか？<br>　これで次のようなCTFの問題を解くことができます：</p>
<table>
<thead>
<tr>
<th>問題</th>
<th>大会</th>
</tr>
</thead>
<tbody>
<tr>
<td>Unbreakable Enterprise Product Activation</td>
<td>Google CTF 2016</td>
</tr>
<tr>
<td>Ropsynth</td>
<td>SECCON 2016 Online CTF</td>
</tr>
<tr>
<td>baby-re</td>
<td>DEF CON CTF Qualifier 2016</td>
</tr>
<tr>
<td>amandhj</td>
<td>DEF CON CTF Qualifier 2016</td>
</tr>
<tr>
<td>Pepperidge Farm</td>
<td>DEF CON CTF Qualifier 2017</td>
</tr>
</tbody>
</table>
<p>　まあ明らかにangr使ったほうが楽．とりあえずいくつかやってみただけで，ほかにもたくさんあると思う．<br>　Bareflank Hypervisorを読むのはいつになるかわかりません．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　なにもかも忘れかけている．&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;　z3pyはSMTソルバ&lt;a href=&quot;https://github.com/
    
    </summary>
    
    
      <category term="symbolic execution" scheme="http://ntddk.github.io/tags/symbolic-execution/"/>
    
      <category term="optimization" scheme="http://ntddk.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>シン・ハイパーバイザ2017 (前編)</title>
    <link href="http://ntddk.github.io/2017/03/04/thin-hypervisor-2017/"/>
    <id>http://ntddk.github.io/2017/03/04/thin-hypervisor-2017/</id>
    <published>2017-03-04T09:45:00.000Z</published>
    <updated>2017-03-17T04:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>　いまさらながら，<a href="http://www.adventar.org/calendars/1401" target="_blank" rel="external">情報セキュリティ系論文紹介 Advent Calendar 2016</a>あるいは<a href="http://qiita.com/advent-calendar/2016/bitvisor" target="_blank" rel="external">BitVisor Advent Calendar 2016</a>に投稿されるはずだった文章を供養する．</p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>　本稿では，シン，すなわち薄いハイパーバイザ (thin hypervisor) の動向を紹介する．<br>　薄いハイパーバイザとは，小規模であることを志向したハイパーバイザだ——ということにしておこう．小規模というのは，一部のイベントのみトラップするということだ．メリットとしては，実装・学習コストやオーバーヘッド，TCB (trusted computing base) を削減できる点が挙げられる．<br>　用語の初出はBitVisorの論文<a href="https://www.os.ecc.u-tokyo.ac.jp/papers/vee2009-shina.pdf" target="_blank" rel="external">[T. Shinagawa, et al. VEE’09]</a>だが，多くはWindows向けルートキットとして開発されたBlue Pillという手法<a href="http://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Rutkowska.pdf" target="_blank" rel="external">[J. Rutkowska. Black Hat USA’06]</a>の流れを汲んでいる．そのため，ブート時からゲストを掌握するのではなく，のちほど——あえてchain of trustの構築を放棄して——カーネルドライバとしてロードされるものが一般的である．そのほか，単一のゲストのみ対象とする，セキュリティを意識しているといった傾向が見られる．<br>　前編となる今回は，3種類の薄いハイパーバイザを見ていく．</p>
<h1 id="ksm"><a href="#ksm" class="headerlink" title="ksm"></a>ksm</h1><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>リポジトリ</td>
<td><a href="https://github.com/asamy/ksm" target="_blank" rel="external">https://github.com/asamy/ksm</a></td>
</tr>
<tr>
<td>形態</td>
<td>カーネルドライバ</td>
</tr>
<tr>
<td>仮想化支援機能</td>
<td>Intel VT-x with EPT</td>
</tr>
<tr>
<td>サポートしている環境</td>
<td>Windows 7/8/8.1/10, Linux</td>
</tr>
<tr>
<td>言語</td>
<td>C, アセンブリ言語</td>
</tr>
<tr>
<td>ライセンス</td>
<td>GNU GPL v2</td>
</tr>
</tbody>
</table>
<p>　ksmは高速，拡張可能かつ小規模であることを旨としているハイパーバイザで，アンチウイルスソフトウェアやサンドボックスへの利用を意識して開発されている．機能は以下の通り：</p>
<ul>
<li>IDT Shadowing</li>
<li>EPT violation #VE (Broadwell以降)</li>
<li>EPTP switching VMFUNC (Haswell以降，もしサポートされていなければVMCALLで代替)</li>
<li>Builtin Userspace physical memory sandboxer (ビルドオプション)</li>
<li>Builtin Introspection engine (ビルドオプション)</li>
<li>APIC virtualization (実験的機能)</li>
<li>VMX Nesting (実験的機能)</li>
</ul>
<p>　主なソースコードは以下の通り：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/main_nt.c" target="_blank" rel="external"><code>main_nt.c</code></a>, <a href="https://github.com/asamy/ksm/blob/master/main_linux.c" target="_blank" rel="external"><code>main_linux.c</code></a></td>
<td>カーネルドライバのエントリポイント，<code>ioctl</code>ディスパッチ</td>
</tr>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/ksm.c" target="_blank" rel="external"><code>ksm.c</code></a></td>
<td>ハイパーバイザ全体の初期化</td>
</tr>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/vmx.S" target="_blank" rel="external"><code>vmx.S</code></a>, <a href="https://github.com/asamy/ksm/blob/master/vmx.asm" target="_blank" rel="external"><code>vmx.asm</code></a></td>
<td>IDTやEPT violationのトラップ，ゲストのレジスタ退避</td>
</tr>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/vcpu.c" target="_blank" rel="external"><code>vcpu.c</code></a></td>
<td>VMCSの読み書き</td>
</tr>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/exit.c" target="_blank" rel="external"><code>exit.c</code></a></td>
<td>VMExitのハンドラ</td>
</tr>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/um/um.c" target="_blank" rel="external"><code>um/um.c</code></a></td>
<td>ユーザーランドのエージェント</td>
</tr>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/sandbox.c" target="_blank" rel="external"><code>sandbox.c</code></a></td>
<td>サンドボックス機能</td>
</tr>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/introspect.c" target="_blank" rel="external"><code>introspect.c</code></a></td>
<td>イントロスペクション機能</td>
</tr>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/epage.c" target="_blank" rel="external"><code>epage.c</code></a></td>
<td>EPTフック機能</td>
</tr>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/mm.c" target="_blank" rel="external"><code>mm.c</code></a></td>
<td>メモリ管理</td>
</tr>
<tr>
<td><a href="https://github.com/asamy/ksm/blob/master/hotplug.c" target="_blank" rel="external"><code>hotplug.c</code></a></td>
<td>CPUホットプラグに関する処理</td>
</tr>
</tbody>
</table>
<p>　カーネルドライバをロードし，ユーザーランドのエージェントから<code>ioctl</code>を発行，サンドボックス機能またはイントロスペクション機能，EPT機能を呼び出すという流れになっている．詳細は<a href="https://github.com/asamy/ksm/blob/master/Documentation/SPEC.rst" target="_blank" rel="external"><code>Documentation/SPEC.rst</code></a>を参照のこと．</p>
<h1 id="SimpleVisor"><a href="#SimpleVisor" class="headerlink" title="SimpleVisor"></a>SimpleVisor</h1><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>リポジトリ</td>
<td><a href="https://github.com/ionescu007/SimpleVisor" target="_blank" rel="external">https://github.com/ionescu007/SimpleVisor</a></td>
</tr>
<tr>
<td>形態</td>
<td>カーネルドライバ</td>
</tr>
<tr>
<td>仮想化支援機能</td>
<td>Intel VT-x with EPT, AMD-V</td>
</tr>
<tr>
<td>サポートしている環境</td>
<td>Windows 8/8.1/10, UEFI</td>
</tr>
<tr>
<td>言語</td>
<td>C, アセンブリ言語</td>
</tr>
<tr>
<td>ライセンス</td>
<td>2 clause BSD</td>
</tr>
</tbody>
</table>
<p>　SimpleVisorは，名前の通り極力シンプルであることをめざしたハイパーバイザだ．全体で1700行程度．開発者はWindows Internalsの著者のひとりで，<a href="https://github.com/ionescu007/SimpleVisor/blob/master/README.md" target="_blank" rel="external"><code>README.md</code></a>にはこう書かれている：</p>
<blockquote>
<p>Have you always been curious on how to build a hypervisor? Has Intel’s documentation (the many hundreds of pages) gotten you down? Have the samples you’ve found online just made things more confusing, or required weeks of reading through dozens of thousands of lines and code? If so, SimpleVisor might be the project for you.</p>
</blockquote>
<p>　そういうわけで，SimpleVisorはIntel SDM (とくに，ハイパーバイザまわりは<a href="http://www.intel.co.jp/content/www/jp/ja/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3c-part-3-manual.html" target="_blank" rel="external">Vol. 3C</a>) の解読にうんざりした人向けだ．学習にはもってこい．<code>CPUID</code>, <code>INVD</code>, <code>VMX</code>, <code>XSETBV</code>のみトラップするようになっており，ネストには対応していない．しかし，XenやBochsでさえ追いついていない最新の仮想化支援機能にいちはやく追随しようとしている．<br>　主なソースコードは以下の通り：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/ionescu007/SimpleVisor/blob/master/nt/shvos.c" target="_blank" rel="external"><code>nt/shvos.c</code></a></td>
<td>カーネルドライバのエントリポイント</td>
</tr>
<tr>
<td><a href="https://github.com/ionescu007/SimpleVisor/blob/master/shv.c" target="_blank" rel="external"><code>shv.c</code></a></td>
<td>VMExit/VMEntryのコールバック関数の登録</td>
</tr>
<tr>
<td><a href="https://github.com/ionescu007/SimpleVisor/blob/master/shvvp.c" target="_blank" rel="external"><code>shvvp.c</code></a></td>
<td>コールバック関数の実体，仮想CPUの初期化</td>
</tr>
<tr>
<td><a href="https://github.com/ionescu007/SimpleVisor/blob/master/shvvmx.c" target="_blank" rel="external"><code>shvvmx.c</code></a></td>
<td>VMCSの初期化</td>
</tr>
<tr>
<td><a href="https://github.com/ionescu007/SimpleVisor/blob/master/shvvmxhv.c" target="_blank" rel="external"><code>shvvmxhv.c</code></a></td>
<td>VMExitのハンドラ</td>
</tr>
<tr>
<td><a href="https://github.com/ionescu007/SimpleVisor/blob/master/shvutil.c" target="_blank" rel="external"><code>shvutil.c</code></a></td>
<td>GDTの変換</td>
</tr>
</tbody>
</table>
<p>　シンプル．</p>
<h1 id="HyperPlatform"><a href="#HyperPlatform" class="headerlink" title="HyperPlatform"></a>HyperPlatform</h1><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>リポジトリ</td>
<td><a href="https://github.com/tandasat/HyperPlatform" target="_blank" rel="external">https://github.com/tandasat/HyperPlatform</a></td>
</tr>
<tr>
<td>形態</td>
<td>カーネルドライバ</td>
</tr>
<tr>
<td>仮想化支援機能</td>
<td>Intel VT-x with EPT</td>
</tr>
<tr>
<td>サポートしている環境</td>
<td>Windows 7/8.1/10</td>
</tr>
<tr>
<td>言語</td>
<td>C++, アセンブリ言語</td>
</tr>
<tr>
<td>ライセンス</td>
<td>MIT</td>
</tr>
</tbody>
</table>
<p>　HyperPlatformは，カーネルランドで動くコード，すなわちWindows向けルートキットやWindowsカーネル自体の解析を目的として開発されているハイパーバイザ．物理メモリと仮想メモリへのアクセス，関数呼び出し，命令単位のコード実行を監視できるようになっている<a href="https://recon.cx/2016/resources/slides/RECON-0xA-HyperPlatform-Satoshi.pdf" target="_blank" rel="external">[S. Tanda. REcon’16]</a>．<br>　主なソースコードは以下の通り：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/driver.cpp" target="_blank" rel="external"><code>driver.cpp</code></a></td>
<td>カーネルドライバのエントリポイント，各種コールバック関数の登録</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/log.cpp" target="_blank" rel="external"><code>log.cpp</code></a></td>
<td>ログ出力</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/global_object.cpp" target="_blank" rel="external"><code>global_object.cpp</code></a></td>
<td>グローバル変数の初期化</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/performance.cpp" target="_blank" rel="external"><code>performance.cpp</code></a></td>
<td>パフォーマンス計測</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/util.cpp" target="_blank" rel="external"><code>util.cpp</code></a></td>
<td><code>PTE_BASE</code>の取得，メモリアドレス変換，VMCALLのラッパなど</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/power_callback.cpp" target="_blank" rel="external"><code>power_callback.cpp</code></a></td>
<td>電源状態のコールバック関数</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/hotplug_callback.cpp" target="_blank" rel="external"><code>hotplug_callback.cpp</code></a></td>
<td>CPUホットプラグのコールバック関数</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/vm.cpp" target="_blank" rel="external"><code>vm.cpp</code></a></td>
<td>仮想CPUの初期化，VMCSの読み書き</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/ept.cpp" target="_blank" rel="external"><code>ept.cpp</code></a></td>
<td>EPTの構成</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/vmm.cpp" target="_blank" rel="external"><code>vmm.cpp</code></a></td>
<td>命令のトラップ，VMExitのハンドラ</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/Arch/x64/x64.asm" target="_blank" rel="external"><code>Arch/x64/x64.asm</code></a>, <a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/Arch/x86/x86.asm" target="_blank" rel="external"><code>Arch/x86/x86.asm</code></a></td>
<td>VMX命令呼び出しにともなう命令列</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/kernel_stl.cpp" target="_blank" rel="external"><code>kernel_stl.cpp</code></a></td>
<td>ntoskrnl経由でカーネルドライバからSTLを利用する</td>
</tr>
</tbody>
</table>
<p>　エントリポイントから手続き的に書き下されていて，わかりやすい．ハイパーバイザとしての機能もさることながら，STLを強引に呼び出すハックがかっこいい．<br>　この拡張例には以下がある：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/tandasat/MemoryMon" target="_blank" rel="external">MemoryMon</a></td>
<td>カーネルランドへのコード挿入を検知する</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/EopMon" target="_blank" rel="external">EopMon</a></td>
<td>マルウェアによる特権昇格攻撃を検知する</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/DdiMon" target="_blank" rel="external">DdiMon</a></td>
<td>EPTを用いたAPIフック</td>
</tr>
<tr>
<td><a href="https://github.com/tandasat/GuardMon" target="_blank" rel="external">GuardMon</a></td>
<td>PatchGuardの挙動解析</td>
</tr>
</tbody>
</table>
<p>　いずれもカーネルドライバのエントリポイントで追加機能を初期化するしくみ．<br>　やや温め納豆は遠くなりにけり．</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　いずれもSandy Bridge以降のいまどきの環境であれば動作する．<br>　卒業研究ではQEMUをベースとしたマルウェア解析環境を開発していたのだけど，やはり速度面に難があるし，このあたりの技術を再検討しないとなー．<br>　なお，今回取り上げなかったハイパーバイザには以下のようなものがある：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/ainfosec/MoRE" target="_blank" rel="external">MoRE</a></td>
<td>ルートキット文脈のハイパーバイザ．やや古い</td>
</tr>
<tr>
<td><a href="https://github.com/DarthTon/HyperBone" target="_blank" rel="external">HyperBone</a></td>
<td>HyperPlatformと似た機能をもつ．やや古い</td>
</tr>
<tr>
<td><a href="https://github.com/linux-noah/noah" target="_blank" rel="external">Noah</a></td>
<td>未踏のアレ．OS X上でLinuxバイナリを動かす．MacBook持ってないので試せないのだわ</td>
</tr>
<tr>
<td><a href="https://github.com/Bareflank/hypervisor" target="_blank" rel="external">Bareflank</a></td>
<td>type 1, 2, ドライバいずれの形態のVMMもサポートしたライブラリ．しかもC++で書ける</td>
</tr>
</tbody>
</table>
<p>　なかでもBareflankがヤバいので後編ではこれを読んでいきます．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　いまさらながら，&lt;a href=&quot;http://www.adventar.org/calendars/1401&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;情報セキュリティ系論文紹介 Advent Calendar 2016&lt;/a&gt;あるいは&lt;a hre
    
    </summary>
    
    
      <category term="virtual machine introspection" scheme="http://ntddk.github.io/tags/virtual-machine-introspection/"/>
    
  </entry>
  
  <entry>
    <title>焼肉最適化問題</title>
    <link href="http://ntddk.github.io/2016/12/04/yakiniku-optimization/"/>
    <id>http://ntddk.github.io/2016/12/04/yakiniku-optimization/</id>
    <published>2016-12-04T14:59:59.000Z</published>
    <updated>2017-12-14T07:41:34.313Z</updated>
    
    <content type="html"><![CDATA[<p>　本稿は<a href="http://www.adventar.org/calendars/1413" target="_blank" rel="external">SFC-RG Advent Calendar 2016</a>の4日目である．</p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>　あなたは研究の中間発表を終えて，今晩何を食べようか考えている．たしかに準備不足ではあったけれど，研究の前提をいまいち解さないファカルティの高飛車な質問にはうんざりしたし，今日くらいはパーッと気分転換したいものだ．そういうわけで，あなたは⊿館を飛び出して焼肉 ざんまい 湘南台店に行くことにした．</p>
<h1 id="組合せ最適化"><a href="#組合せ最適化" class="headerlink" title="組合せ最適化"></a>組合せ最適化</h1><p>　さて，着席し，メニューを開いたあなたはしばし考える．限られた予算，限られた時間，限られた胃袋の容量——いったい何を頼めば最も<strong>満足</strong>できるだろうか？<br>　そんなとき，組合せ最適化が役に立つんです．騙されたと思って，メニューを必死に転記してみよう：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np, pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">menu = [<span class="string">'カルビ'</span>, <span class="string">'和牛カルビ'</span>, <span class="string">'和牛中落ちカルビ'</span>, <span class="string">'ハラミ'</span>, <span class="string">'厚切りロース'</span>, <span class="string">'ネギ牛タン塩'</span>, <span class="string">'牛タン塩'</span>, </div><div class="line">        <span class="string">'イベリコ豚'</span>, <span class="string">'カシラ'</span>, <span class="string">'豚トロ'</span>, <span class="string">'ネギ豚タン塩'</span>, <span class="string">'豚タン塩'</span>, <span class="string">'厚切りベーコン'</span>, <span class="string">'ウインナー'</span>, <span class="string">'チョリソ'</span>, </div><div class="line">        <span class="string">'ホルモン'</span>, <span class="string">'シロコロホルモン'</span>, <span class="string">'レバー'</span>, <span class="string">'白レバー'</span>, <span class="string">'ハツ'</span>, <span class="string">'ミノ'</span>, </div><div class="line">        <span class="string">'お得!! 三種盛り'</span>, <span class="string">'本日の塩三種盛り'</span>, <span class="string">'本日の味噌三種盛り'</span>]</div><div class="line">price = [<span class="number">720</span>, <span class="number">950</span>, <span class="number">850</span>, <span class="number">720</span>, <span class="number">690</span>, <span class="number">950</span>, <span class="number">850</span>, </div><div class="line">        <span class="number">600</span>, <span class="number">550</span>, <span class="number">580</span>, <span class="number">680</span>, <span class="number">580</span>, <span class="number">500</span>, <span class="number">380</span>, <span class="number">400</span>, </div><div class="line">        <span class="number">550</span>, <span class="number">600</span>, <span class="number">550</span>, <span class="number">450</span>, <span class="number">550</span>, <span class="number">650</span>, </div><div class="line">        <span class="number">1280</span>, <span class="number">780</span>, <span class="number">780</span>]</div><div class="line"></div><div class="line">n = len(menu)</div><div class="line">np.random.seed(<span class="number">0</span>)</div><div class="line">df = pd.DataFrame(&#123;</div><div class="line">    <span class="string">'品目'</span>: menu,</div><div class="line">    <span class="string">'値段'</span>: price,</div><div class="line">    <span class="string">'満足度'</span>: np.random.randint(<span class="number">10</span>, <span class="number">20</span>, n),</div><div class="line">    <span class="string">'焼き時間'</span>: np.random.randint(<span class="number">5</span>, <span class="number">10</span>, n),</div><div class="line">    <span class="string">'量'</span>: np.random.randint(<span class="number">10</span>, <span class="number">20</span>, n),</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">print(df)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th>値段</th>
<th>品目</th>
<th>満足度</th>
<th>焼き時間</th>
<th>量</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>720</td>
<td>カルビ</td>
<td>15</td>
<td>9</td>
<td>10</td>
</tr>
<tr>
<td>1</td>
<td>950</td>
<td>和牛カルビ</td>
<td>10</td>
<td>8</td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td>850</td>
<td>和牛中落ちカルビ</td>
<td>13</td>
<td>5</td>
<td>14</td>
</tr>
<tr>
<td>3</td>
<td>720</td>
<td>ハラミ</td>
<td>13</td>
<td>8</td>
<td>15</td>
</tr>
<tr>
<td>4</td>
<td>690</td>
<td>厚切りロース</td>
<td>17</td>
<td>5</td>
<td>15</td>
</tr>
<tr>
<td>5</td>
<td>950</td>
<td>ネギ牛タン塩</td>
<td>19</td>
<td>7</td>
<td>16</td>
</tr>
<tr>
<td>6</td>
<td>850</td>
<td>牛タン塩</td>
<td>13</td>
<td>8</td>
<td>18</td>
</tr>
<tr>
<td>7</td>
<td>600</td>
<td>イベリコ豚</td>
<td>15</td>
<td>5</td>
<td>14</td>
</tr>
<tr>
<td>8</td>
<td>550</td>
<td>カシラ</td>
<td>12</td>
<td>6</td>
<td>11</td>
</tr>
<tr>
<td>9</td>
<td>580</td>
<td>豚トロ</td>
<td>14</td>
<td>8</td>
<td>14</td>
</tr>
<tr>
<td>10</td>
<td>680</td>
<td>ネギ豚タン塩</td>
<td>17</td>
<td>8</td>
<td>19</td>
</tr>
<tr>
<td>11</td>
<td>580</td>
<td>豚タン塩</td>
<td>16</td>
<td>8</td>
<td>18</td>
</tr>
<tr>
<td>12</td>
<td>500</td>
<td>厚切りベーコン</td>
<td>18</td>
<td>5</td>
<td>11</td>
</tr>
<tr>
<td>13</td>
<td>380</td>
<td>ウインナー</td>
<td>18</td>
<td>6</td>
<td>11</td>
</tr>
<tr>
<td>14</td>
<td>400</td>
<td>チョリソ</td>
<td>11</td>
<td>6</td>
<td>17</td>
</tr>
<tr>
<td>15</td>
<td>550</td>
<td>ホルモン</td>
<td>16</td>
<td>6</td>
<td>19</td>
</tr>
<tr>
<td>16</td>
<td>600</td>
<td>シロコロホルモン</td>
<td>17</td>
<td>5</td>
<td>19</td>
</tr>
<tr>
<td>17</td>
<td>550</td>
<td>レバー</td>
<td>17</td>
<td>7</td>
<td>13</td>
</tr>
<tr>
<td>18</td>
<td>450</td>
<td>白レバー</td>
<td>18</td>
<td>9</td>
<td>16</td>
</tr>
<tr>
<td>19</td>
<td>550</td>
<td>ハツ</td>
<td>11</td>
<td>8</td>
<td>17</td>
</tr>
<tr>
<td>20</td>
<td>650</td>
<td>ミノ</td>
<td>15</td>
<td>8</td>
<td>12</td>
</tr>
<tr>
<td>21</td>
<td>1280</td>
<td>お得!! 三種盛り</td>
<td>19</td>
<td>7</td>
<td>10</td>
</tr>
<tr>
<td>22</td>
<td>780</td>
<td>本日の塩三種盛り</td>
<td>18</td>
<td>9</td>
<td>13</td>
</tr>
<tr>
<td>23</td>
<td>780</td>
<td>本日の味噌三種盛り</td>
<td>19</td>
<td>7</td>
<td>15</td>
</tr>
</tbody>
</table>
<p>　メニューがpandasのデータフレームになった．取り急ぎ（？）満足度・焼き時間・量は乱数で埋めている．<br>　あなたはこのメニューの中から，最も満足度の高い組合せを見つけたい．それも，限られた予算，限られた時間，限られた胃袋の容量という条件を満たすような．ここではそのわがままを割当問題として解くことにする．</p>
<table>
<thead>
<tr>
<th>変数</th>
<th><span>$x_i \in \{0, 1\}$</span><!-- Has MathJax --></th>
<th>i番目の料理を選ぶかどうか</th>
</tr>
</thead>
<tbody>
<tr>
<td>目的関数</td>
<td><span>$\sum_i{満足度_i x_i}$</span><!-- Has MathJax --></td>
<td><span>$\rightarrow$</span><!-- Has MathJax --> 最大</td>
</tr>
<tr>
<td>制約条件</td>
<td><span>$\sum_i{予算_i x_i} \le 12000$</span><!-- Has MathJax --></td>
<td>予算制限</td>
</tr>
<tr>
<td></td>
<td><span>$\sum_i{焼き時間_i x_i} \le 120$</span><!-- Has MathJax --></td>
<td>時間制限</td>
</tr>
<tr>
<td></td>
<td><span>$150 \le \sum_i{量_i x_i} \le 200$</span><!-- Has MathJax --></td>
<td>分量制限</td>
</tr>
</tbody>
</table>
<p>　こういった問題はpulpという整数計画法ライブラリを使って解くことができる：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pulp <span class="keyword">import</span> *</div><div class="line"></div><div class="line">m = LpProblem(sense = LpMaximize)	<span class="comment"># 最大化問題</span></div><div class="line">df[<span class="string">'x'</span>] = [LpVariable(<span class="string">'x%d'</span> % i, cat = LpBinary) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]	<span class="comment"># i番目の品目を選択するかしないか</span></div><div class="line"></div><div class="line">m += lpDot(df.満足度, df.x)	<span class="comment"># 目的関数：満足度の最大化</span></div><div class="line">m += lpDot(df.値段, df.x) &lt;= <span class="number">12000</span>	<span class="comment"># 制約条件：予算</span></div><div class="line">m += lpDot(df.焼き時間, df.x) &lt;= <span class="number">120</span>	<span class="comment"># 制約条件：焼き時間</span></div><div class="line">m += lpDot(df.量, df.x) &gt;= <span class="number">150</span>	<span class="comment"># 制約条件：量</span></div><div class="line">m += lpDot(df.量, df.x) &lt;= <span class="number">200</span>	<span class="comment"># 制約条件：量</span></div><div class="line"></div><div class="line">m.solve()</div><div class="line"><span class="keyword">if</span> m.status == <span class="number">1</span>:</div><div class="line">    df[<span class="string">'val'</span>] = df.x.apply(<span class="keyword">lambda</span> v: value(v))	<span class="comment"># 結果</span></div><div class="line">    print(df[df.val == <span class="number">1</span>].品目)</div><div class="line">    print(<span class="string">'満足度 &#123;&#125;'</span>.format(sum(df[df.val == <span class="number">1</span>].満足度)))</div><div class="line">    print(<span class="string">'値段 &#123;&#125;'</span>.format(sum(df[df.val == <span class="number">1</span>].値段)))</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="number">0</span>           カルビ</div><div class="line"><span class="number">4</span>        厚切りロース</div><div class="line"><span class="number">5</span>        ネギ牛タン塩</div><div class="line"><span class="number">7</span>         イベリコ豚</div><div class="line"><span class="number">8</span>           カシラ</div><div class="line"><span class="number">9</span>           豚トロ</div><div class="line"><span class="number">12</span>      厚切りベーコン</div><div class="line"><span class="number">13</span>        ウインナー</div><div class="line"><span class="number">16</span>     シロコロホルモン</div><div class="line"><span class="number">17</span>          レバー</div><div class="line"><span class="number">18</span>         白レバー</div><div class="line"><span class="number">20</span>           ミノ</div><div class="line"><span class="number">21</span>    お得!! 三種盛り</div><div class="line"><span class="number">22</span>     本日の塩三種盛り</div><div class="line"><span class="number">23</span>    本日の味噌三種盛り</div><div class="line">Name: 品目, dtype: object</div><div class="line">満足度 <span class="number">251</span></div><div class="line">値段 <span class="number">10060</span></div></pre></td></tr></table></figure>
<p>　はい．順番はともかくとして，これらを食べれば満足できそうだ．<br>　ここまで考えたところで，あなたは今月の懐具合がよろしくないことを思い出す．なるべく出費を抑えて，それでいてある程度満足できるような品目の組合せはあるだろうか？<br>　これも同様に割当問題として考えられる．</p>
<table>
<thead>
<tr>
<th>変数</th>
<th><span>$x_i \in \{0, 1\}$</span><!-- Has MathJax --></th>
<th>i番目の料理を選ぶかどうか</th>
</tr>
</thead>
<tbody>
<tr>
<td>目的関数</td>
<td><span>$\sum_i{予算_i x_i}$</span><!-- Has MathJax --></td>
<td><span>$\rightarrow$</span><!-- Has MathJax --> 最小</td>
</tr>
<tr>
<td>制約条件</td>
<td><span>$\sum_i{満足度_i x_i} \le 200$</span><!-- Has MathJax --></td>
<td>満足度制限</td>
</tr>
<tr>
<td></td>
<td><span>$\sum_i{焼き時間_i x_i} \le 120$</span><!-- Has MathJax --></td>
<td>時間制限</td>
</tr>
<tr>
<td></td>
<td><span>$150 \le \sum_i{量_i x_i} \le 200$</span><!-- Has MathJax --></td>
<td>分量制限</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">m = LpProblem(sense = LpMinimize)	<span class="comment"># 最小化問題</span></div><div class="line">a[<span class="string">'v'</span>] = [LpVariable(<span class="string">'v%d'</span> % i, cat = LpBinary) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]	<span class="comment"># i番目の品目を選択するかしないか</span></div><div class="line"></div><div class="line">m += lpDot(df.値段, df.x)	<span class="comment"># 目的関数：予算の最小化</span></div><div class="line">m += lpDot(df.満足度, df.x) &gt;= <span class="number">200</span>	<span class="comment"># 制約条件：満足度</span></div><div class="line">m += lpDot(df.焼き時間, df.x) &lt;= <span class="number">120</span>	<span class="comment"># 制約条件：焼き時間</span></div><div class="line">m += lpDot(df.量, df.x) &gt;= <span class="number">150</span>	<span class="comment"># 制約条件：量</span></div><div class="line">m += lpDot(df.量, df.x) &lt;= <span class="number">200</span>	<span class="comment"># 制約条件：量</span></div><div class="line">m.solve()</div><div class="line"><span class="keyword">if</span> m.status == <span class="number">1</span>:</div><div class="line">    df[<span class="string">'val'</span>] = df.x.apply(<span class="keyword">lambda</span> v: value(v))	<span class="comment"># 結果</span></div><div class="line">    print(df[df.val == <span class="number">1</span>].品目)</div><div class="line">    print(<span class="string">'満足度 &#123;&#125;'</span>.format(sum(df[df.val == <span class="number">1</span>].満足度)))</div><div class="line">    print(<span class="string">'値段 &#123;&#125;'</span>.format(sum(df[df.val == <span class="number">1</span>].値段)))</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="number">7</span>         イベリコ豚</div><div class="line"><span class="number">10</span>       ネギ豚タン塩</div><div class="line"><span class="number">11</span>         豚タン塩</div><div class="line"><span class="number">12</span>      厚切りベーコン</div><div class="line"><span class="number">13</span>        ウインナー</div><div class="line"><span class="number">14</span>         チョリソ</div><div class="line"><span class="number">15</span>         ホルモン</div><div class="line"><span class="number">16</span>     シロコロホルモン</div><div class="line"><span class="number">17</span>          レバー</div><div class="line"><span class="number">18</span>         白レバー</div><div class="line"><span class="number">22</span>     本日の塩三種盛り</div><div class="line"><span class="number">23</span>    本日の味噌三種盛り</div><div class="line">Name: 品目, dtype: object</div><div class="line">満足度 <span class="number">200</span></div><div class="line">値段 <span class="number">6850</span></div></pre></td></tr></table></figure>
<p>　200の満足度でいいなら豚ばっか食ってろということらしい．</p>
<h1 id="多腕バンディット問題"><a href="#多腕バンディット問題" class="headerlink" title="多腕バンディット問題"></a>多腕バンディット問題</h1><p>　いやいやちょっと待った．乱数でお茶を濁しているけど，あらゆる品目の満足度なんて知らないじゃないか．全品目を食べたことがあるならいざ知らず．それに，毎日同じ店で同じ食事をとるわけでもない．焼肉屋にしたって，湘南台には寅屋にえのもとにとあるわけだ．<br>　そういうわけで，あなたはいろいろな店に行き，いろいろな注文をして，なるべくどれを頼んでも満足度の高い食事のとれる店を見つけたいと考えた．しかしここで疑念が生まれる——いまの店でそこそこ満足できるなら，別の店を探さなくてもよいのではないか？ しかしいまの店に行き続ける限り，別の店の食事を食べることはできないぞ．しかしそこがハズレだとしたら．さてどうしよう——業界用語でこれを<strong>探索</strong>と<strong>利用</strong>のトレードオフ (exploration-exploitation tradeoff) という．</p>
<blockquote>
<p>これまでの学習結果を利用 (exploitation) しようとすると，探索 (exploration) が減ってしまい，機会損失が増えてしまう．一方，探索を増やせば，学習した最良の行動とは異なる行動をとることが増えるため，得られる報酬が減ってしまう．学習した最良の行動との差が，探索のコストということになる．– 牧野，et al. 『<a href="https://www.amazon.co.jp/dp/4627880316" target="_blank" rel="external">これからの強化学習</a>』</p>
</blockquote>
<p>　このトレードオフを解消する試みを多腕バンディット問題という．多腕バンディット問題は，複数のスロットマシンのレバー（腕）を次々と引いていき，最終的に得られる報酬を最大化するというもので，強化学習の一種といえる．各スロットマシンの報酬はそれぞれ一定の確率分布に従っている．言い換えれば，いろいろな店のメニューにある品目を試していき，最終的に得られる満足度を最大化していく，ということになる．もちろん，品目によって得られる満足度に違いはあるが，なるべく何を食べても満足度の高い店を絞り込んでいきたい．<br>　そのためのアルゴリズムのうち，ここでは<span>$\epsilon$</span><!-- Has MathJax -->-GreedyとUCB1を紹介したい．</p>
<h2 id="Greedy"><a href="#Greedy" class="headerlink" title="-Greedy"></a><span>$\epsilon$</span><!-- Has MathJax -->-Greedy</h2><p>　デフォルトで現在最良な選択肢を選ぶが，一定の確率でいま最良と思っていないような選択肢を選びにいく手法．</p>
<ul>
<li><span>$\epsilon - 1$</span><!-- Has MathJax -->の確率で最適だと思われる選択肢を利用する</li>
<li><span>$\epsilon / 2$</span><!-- Has MathJax -->の確率で最適だと思われる選択肢を探索する</li>
<li><span>$\epsilon / 2$</span><!-- Has MathJax -->の確率で最悪だと思われる選択肢を探索する</li>
</ul>
<p>　<span>$\epsilon$</span><!-- Has MathJax --> Greedyはつまり行きつけの店に入り浸るタイプのアルゴリズムだ．</p>
<h2 id="UCB1"><a href="#UCB1" class="headerlink" title="UCB1"></a>UCB1</h2><p>　それもいいが，実はいまの行きつけよりもっといい店なのに，一度行って微妙だったからといって行かないままになっている店がないだろうか？ UCB1は，それぞれの店についてどれくらい知っているかを考慮に入れ，なるべく多くの店のことを知ろうとするアルゴリズムだ．具体的には，各店（腕）についてUCB (Upper Confidence Bound) という値を計算する．</p>
<p>　<span>$\overline {x}_{j}+c\sqrt {\dfrac {2\log n} {x_{j}}}$</span><!-- Has MathJax --></p>
<p>　ただし<span>$\overline {x}_{j}$</span><!-- Has MathJax -->は<span>$_{j}$</span><!-- Has MathJax -->番目の店の満足度（報酬）の期待値，<span>$n$</span><!-- Has MathJax -->はそれまでに店を回った回数の合計，<span>$n_{j}$</span><!-- Has MathJax -->は<span>$_{j}$</span><!-- Has MathJax -->番目の店に行った回数，<span>$c$</span><!-- Has MathJax -->は定数．UCB1は，この値が最大になる店に飛び込んでいく．あなたが好奇心旺盛なら，こちらのアルゴリズムを使って考えたほうがいいだろう．<br>　この手法のメリットとして，ベストでない店に行く回数を確率<span>$1$</span><!-- Has MathJax -->で<span>$O(\log n)$</span><!-- Has MathJax -->以内に抑えられる．長々とした証明は<a href="http://homes.di.unimi.it/~cesabian/Pubblicazioni/ml-02.pdf" target="_blank" rel="external">論文</a>を参照していただくとして，これは店に行く回数が十分大きい場合の理論限界に到達している．デメリットとしては，探索のためによくない店にあたってしまうことが多いという点が挙げられる．</p>
<h2 id="実験"><a href="#実験" class="headerlink" title="実験"></a>実験</h2><p>　では，<span>$\epsilon$</span><!-- Has MathJax -->-GreedyとUCB1が<strong>最良の店を選ぶ過程</strong>はどうなっているだろうか？ 『<a href="http://www.oreilly.co.jp/books/9784873116273/" target="_blank" rel="external">バンディットアルゴリズムによる最適化手法</a>』の<a href="https://github.com/johnmyleswhite/BanditsBook" target="_blank" rel="external">サンプルコード</a>をPython3 + numpy向けに改変して実験．</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BernoulliArm</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p)</span>:</span></div><div class="line">        self.p = p</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> random.random() &gt; self.p:</div><div class="line">            <span class="keyword">return</span> <span class="number">0.0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">1.0</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EpsilonGreedy</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, epsilon, counts, values)</span>:</span></div><div class="line">        self.epsilon = epsilon</div><div class="line">        self.counts = counts</div><div class="line">        self.values = values</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(self, n_arms)</span>:</span></div><div class="line">        self.counts = np.zeros(n_arms)</div><div class="line">        self.values = np.zeros(n_arms)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_arm</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> random.random() &gt; self.epsilon:</div><div class="line">            <span class="keyword">return</span> np.argmax(self.values)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> np.random.randint(<span class="number">0</span>, len(self.values))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, chosen_arm, reward)</span>:</span></div><div class="line">        self.counts[chosen_arm] += <span class="number">1</span></div><div class="line">        n = self.counts[chosen_arm]</div><div class="line"></div><div class="line">        value = self.values[chosen_arm]</div><div class="line">        new_value = ((n<span class="number">-1</span>) / float(n)) * value + (<span class="number">1</span> / float(n)) * reward</div><div class="line">        self.values[chosen_arm] = new_value</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UCB1</span><span class="params">()</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, counts, values)</span>:</span></div><div class="line">    self.counts = counts</div><div class="line">    self.values = values</div><div class="line">    <span class="keyword">return</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(self, n_arms)</span>:</span></div><div class="line">    self.counts = np.zeros(n_arms)</div><div class="line">    self.values = np.zeros(n_arms)</div><div class="line">    <span class="keyword">return</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">select_arm</span><span class="params">(self)</span>:</span></div><div class="line">    n_arms = len(self.counts)</div><div class="line">    <span class="keyword">for</span> arm <span class="keyword">in</span> range(n_arms):</div><div class="line">      <span class="keyword">if</span> self.counts[arm] == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> arm</div><div class="line"></div><div class="line">    ucb_values = [<span class="number">0.0</span> <span class="keyword">for</span> arm <span class="keyword">in</span> range(n_arms)]</div><div class="line">    total_counts = sum(self.counts)</div><div class="line">    <span class="keyword">for</span> arm <span class="keyword">in</span> range(n_arms):</div><div class="line">      bonus = math.sqrt((<span class="number">2</span> * math.log(total_counts)) / float(self.counts[arm]))</div><div class="line">      ucb_values[arm] = self.values[arm] + bonus</div><div class="line">    <span class="keyword">return</span> np.argmax(ucb_values)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, chosen_arm, reward)</span>:</span></div><div class="line">    self.counts[chosen_arm] = self.counts[chosen_arm] + <span class="number">1</span></div><div class="line">    n = self.counts[chosen_arm]</div><div class="line"></div><div class="line">    value = self.values[chosen_arm]</div><div class="line">    new_value = ((n - <span class="number">1</span>) / float(n)) * value + (<span class="number">1</span> / float(n)) * reward</div><div class="line">    self.values[chosen_arm] = new_value</div><div class="line">    <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_algorithm</span><span class="params">(algo, arms, num_sims, horizon)</span>:</span></div><div class="line">    chosen_arms = np.zeros(num_sims * horizon)</div><div class="line">    rewards = np.zeros(num_sims * horizon)</div><div class="line">    cumulative_rewards = np.zeros(num_sims * horizon)</div><div class="line">    sim_nums = np.zeros(num_sims * horizon)</div><div class="line">    times = np.zeros(num_sims * horizon)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> sim <span class="keyword">in</span> range(num_sims):</div><div class="line">        sim += <span class="number">1</span></div><div class="line">        algo.initialize(len(arms))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(horizon):</div><div class="line">            t += <span class="number">1</span></div><div class="line">            index = (sim - <span class="number">1</span>) * horizon + t - <span class="number">1</span></div><div class="line">            sim_nums[index] = sim</div><div class="line">            times[index] = t</div><div class="line"></div><div class="line">            chosen_arm = algo.select_arm()</div><div class="line">            chosen_arms[index] = chosen_arm</div><div class="line"></div><div class="line">            reward = arms[chosen_arm].draw()</div><div class="line">            rewards[index] = reward</div><div class="line"></div><div class="line">            <span class="keyword">if</span> t == <span class="number">1</span>:</div><div class="line">                cumulative_rewards[index] = reward</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                cumulative_rewards[index] = cumulative_rewards[index - <span class="number">1</span>] + reward</div><div class="line"></div><div class="line">            algo.update(chosen_arm, reward)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [sim_nums, times, chosen_arms, rewards, cumulative_rewards]</div><div class="line"></div><div class="line">means = np.array([<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.9</span>])</div><div class="line">n_arms = len(means) <span class="comment"># 腕は5本</span></div><div class="line">random.shuffle(means)</div><div class="line"></div><div class="line">arms = [BernoulliArm(x) <span class="keyword">for</span> x <span class="keyword">in</span> means]</div><div class="line"></div><div class="line"><span class="keyword">for</span> epsilon <span class="keyword">in</span> [<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.4</span>, <span class="number">0.5</span>]: <span class="comment"># epsilonを変えたらどうなるか？</span></div><div class="line">    algo = EpsilonGreedy(epsilon, [], [])</div><div class="line">    algo.initialize(n_arms)</div><div class="line">    results = test_algorithm(algo, arms, <span class="number">5000</span>, <span class="number">500</span>)</div><div class="line"></div><div class="line">    df = pd.DataFrame(&#123;<span class="string">"times"</span>: results[<span class="number">1</span>], <span class="string">"rewards"</span>: results[<span class="number">3</span>]&#125;)</div><div class="line">    grouped = df[<span class="string">"rewards"</span>].groupby(df[<span class="string">"times"</span>])</div><div class="line"></div><div class="line">    plt.plot(grouped.mean(), label=<span class="string">"epsilon="</span>+str(epsilon))</div><div class="line"></div><div class="line">algo = UCB1([], [])</div><div class="line">algo.initialize(n_arms)</div><div class="line">results = test_algorithm(algo, arms, <span class="number">5000</span>, <span class="number">500</span>)</div><div class="line"></div><div class="line">df = pd.DataFrame(&#123;<span class="string">"times"</span>: results[<span class="number">1</span>], <span class="string">"rewards"</span>: results[<span class="number">3</span>]&#125;)</div><div class="line">grouped = df[<span class="string">"rewards"</span>].groupby(df[<span class="string">"times"</span>])</div><div class="line"></div><div class="line">plt.plot(grouped.mean(), label=<span class="string">"UCB1"</span>)</div><div class="line"></div><div class="line">plt.legend(loc=<span class="string">"best"</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/image/bandits/bandits.png"></p>
<p>　好奇心旺盛な人は序盤それなりに苦労することがわかる．</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　こうしたナイーブな実装で焼肉の頼み方を最適化したり，店の巡り方を最適化できるかどうかというとまあ実際微妙（たとえば焼肉の各品目から得られる満足度は，限界効用逓減の法則に従ってすり減っていく）だが，日々の意思決定をアルゴリズム的に考えてみる遊びはそれなりにおもしろい．ソーシャルゲームにどう課金するか，というのもこの俎上に載せられる．<br>　『<a href="https://www.amazon.co.jp/dp/B015CKNWJI/" target="_blank" rel="external">Algorithms to Live By: The Computer Science of Human Decisions</a>』という本はそういう，情報系の人間がよくやる与太話をまじめに考察したものだ——書類はどのキャッシュアルゴリズムに従って並べるべきかとか．先に挙げた探索と利用のトレードオフについても述べられている．YouTubeで著者らの講演を観てほしい．</p>
<center><iframe width="560" height="315" src="https://www.youtube.com/embed/OwKj-wgXteo" frameborder="0" allowfullscreen></iframe></center>

<p>　はい．</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="http://qiita.com/Tsutomu-KKE@github/items/f8be15f56cbacdbb7bd9" target="_blank" rel="external">献立を組合せ最適化で考える - Qiita</a></li>
<li><a href="http://qiita.com/makora9143/items/9e90a533c95c24b85a94" target="_blank" rel="external">備忘録＠Python ORセミナー: Pulp - Qiita</a></li>
<li><a href="http://qiita.com/yuku_t/items/6844aac6008911401b19" target="_blank" rel="external">A/Bテストよりすごい？バンディットアルゴリズムとは一体何者か - Qiita</a></li>
<li><a href="http://minerva.cs.uec.ac.jp/~ito/entcog/contents/lecture/date/5-yoshizoe.pdf" target="_blank" rel="external">コンピュータ囲碁における モンテカルロ法 ~理論編~[PDF]</a></li>
</ul>
<h1 id="追記-2016-12-06"><a href="#追記-2016-12-06" class="headerlink" title="追記 (2016.12.06)"></a>追記 (2016.12.06)</h1><p>　今回のような設定では多腕バンディット問題というより最適腕識別として考えたほうがよさそう．多腕バンディット問題は累積報酬の最大化が目的だけれど，最適腕識別はどの腕が最良か発見するのが目的．将来の報酬が最大の腕を見つける，ということ．『<a href="https://www.amazon.co.jp/dp/406152917X/" target="_blank" rel="external">バンディット問題の理論とアルゴリズム</a>』を読めばいいんだとか．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　本稿は&lt;a href=&quot;http://www.adventar.org/calendars/1413&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SFC-RG Advent Calendar 2016&lt;/a&gt;の4日目である．&lt;/p&gt;
&lt;h1 id=&quot;は
    
    </summary>
    
    
      <category term="machine learning" scheme="http://ntddk.github.io/tags/machine-learning/"/>
    
      <category term="optimization" scheme="http://ntddk.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>KDD Cup 99 Dataおぼえがき</title>
    <link href="http://ntddk.github.io/2016/11/23/kdd-cup-99-data/"/>
    <id>http://ntddk.github.io/2016/11/23/kdd-cup-99-data/</id>
    <published>2016-11-22T21:50:00.000Z</published>
    <updated>2016-11-22T21:45:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>　サイバーセキュリティに携わる者なら一度くらいはKDD Cup 99 Dataなるデータセットの名を耳にしたことがあるのではないだろうか．KDD Cupは国際会議SIGKDDによるデータマイニングのコンペで，KDD Cup 99 Dataはそのためのネットワーク侵入検知にまつわるデータ．正常通信と攻撃を分類するタスクが与えられた．<br>　見てみよう．</p>
<h1 id="データセットの構成"><a href="#データセットの構成" class="headerlink" title="データセットの構成"></a>データセットの構成</h1><p>　データは現在，カリフォルニア大学アーバイン校によって<a href="http://archive.ics.uci.edu/ml/databases/kddcup99/kddcup99.html" target="_blank" rel="external">配布</a>されている．<br>　それぞれのファイル内容は下記の通り：</p>
<table>
<thead>
<tr>
<th>ファイル名</th>
<th>ファイル内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>kddcup.data</td>
<td>フルデータ</td>
</tr>
<tr>
<td>kddcup.data_10_percent</td>
<td>フルデータの10%を抽出した学習用データ</td>
</tr>
<tr>
<td>corrected</td>
<td>正常・攻撃のラベル付けがなされた評価用データ</td>
</tr>
<tr>
<td>kddcup.testdata.unlabeled</td>
<td>正常・攻撃のラベル付けがなされていないデータ</td>
</tr>
<tr>
<td>kddcup.testdata.unlabeled_10_percent</td>
<td>正常・攻撃のラベル付けがなされていないデータの10%サブセット</td>
</tr>
<tr>
<td>kddcup.newtestdata_10_percent_unlabeled</td>
<td>正常・攻撃のラベル付けがなされていないデータの10%サブセット</td>
</tr>
</tbody>
</table>
<p>　ファイルの中身はこんな調子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ wget -r -l 1 http://kdd.ics.uci.edu/databases/kddcup99/</div><div class="line">$ gunzip -r kdd.ics.uci.edu/kddcup99</div><div class="line">$ ln -s kdd.ics.uci.edu/databases/kddcup99 kddcup99</div><div class="line">$ head -5 kddcup99/kddcup.data</div><div class="line">0,tcp,http,SF,215,45076,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0,0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,normal.</div><div class="line">0,tcp,http,SF,162,4528,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,1,1,1.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,normal.</div><div class="line">0,tcp,http,SF,236,1228,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,2,2,1.00,0.00,0.50,0.00,0.00,0.00,0.00,0.00,normal.</div><div class="line">0,tcp,http,SF,233,2032,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,3,3,1.00,0.00,0.33,0.00,0.00,0.00,0.00,0.00,normal.</div><div class="line">0,tcp,http,SF,239,486,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3,3,0.00,0.00,0.00,0.00,1.00,0.00,0.00,4,4,1.00,0.00,0.25,0.00,0.00,0.00,0.00,0.00,normal.</div></pre></td></tr></table></figure>
<p>　これは，ファイルの特徴をカンマ区切りで列挙したもの．列に特徴名を振れば，pandas（や，scikit-learn）での扱いも楽．</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>col_names = [<span class="string">"duration"</span>,<span class="string">"protocol_type"</span>,<span class="string">"service"</span>,<span class="string">"flag"</span>,<span class="string">"src_bytes"</span>,</div><div class="line"><span class="meta">... </span>   <span class="string">"dst_bytes"</span>,<span class="string">"land"</span>,<span class="string">"wrong_fragment"</span>,<span class="string">"urgent"</span>,<span class="string">"hot"</span>,<span class="string">"num_failed_logins"</span>,</div><div class="line"><span class="meta">... </span>   <span class="string">"logged_in"</span>,<span class="string">"num_compromised"</span>,<span class="string">"root_shell"</span>,<span class="string">"su_attempted"</span>,<span class="string">"num_root"</span>,</div><div class="line"><span class="meta">... </span>   <span class="string">"num_file_creations"</span>,<span class="string">"num_shells"</span>,<span class="string">"num_access_files"</span>,<span class="string">"num_outbound_cmds"</span>,</div><div class="line"><span class="meta">... </span>   <span class="string">"is_host_login"</span>,<span class="string">"is_guest_login"</span>,<span class="string">"count"</span>,<span class="string">"srv_count"</span>,<span class="string">"serror_rate"</span>,</div><div class="line"><span class="meta">... </span>   <span class="string">"srv_serror_rate"</span>,<span class="string">"rerror_rate"</span>,<span class="string">"srv_rerror_rate"</span>,<span class="string">"same_srv_rate"</span>,</div><div class="line"><span class="meta">... </span>   <span class="string">"diff_srv_rate"</span>,<span class="string">"srv_diff_host_rate"</span>,<span class="string">"dst_host_count"</span>,<span class="string">"dst_host_srv_count"</span>,</div><div class="line"><span class="meta">... </span>   <span class="string">"dst_host_same_srv_rate"</span>,<span class="string">"dst_host_diff_srv_rate"</span>,<span class="string">"dst_host_same_src_port_rate"</span>,</div><div class="line"><span class="meta">... </span>   <span class="string">"dst_host_srv_diff_host_rate"</span>,<span class="string">"dst_host_serror_rate"</span>,<span class="string">"dst_host_srv_serror_rate"</span>,</div><div class="line"><span class="meta">... </span>   <span class="string">"dst_host_rerror_rate"</span>,<span class="string">"dst_host_srv_rerror_rate"</span>,<span class="string">"label"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>kdd_data_10percent = pandas.read_csv(<span class="string">"kddcup99/kddcup.data_10_percent"</span>, header=<span class="keyword">None</span>, names = col_names)</div></pre></td></tr></table></figure>
<p>　学習用データは通常データ，22種類の攻撃データの計23種類のデータからなる．評価用データは，学習用データに加えて17種類の攻撃データを含んでいる．これらの攻撃は4つのクラスに大別される：</p>
<table>
<thead>
<tr>
<th>クラス</th>
<th>説明</th>
<th>サブクラス</th>
</tr>
</thead>
<tbody>
<tr>
<td>Normal</td>
<td>通常のコネクション</td>
<td>normal</td>
</tr>
<tr>
<td>Probe</td>
<td>攻撃対象の探索・調査</td>
<td>ipsweep, nmap, postsweep, satan, mscan, saint</td>
</tr>
<tr>
<td>DoS</td>
<td>DoS攻撃</td>
<td>back, land, neptune, pod, smurf, teardrop, mailbomb, apache2, processtable, udpstorm</td>
</tr>
<tr>
<td>U2R</td>
<td>ローカルマシンからrootへの許可されていないアクセス</td>
<td>buffer.overflow, localmodule, perl, rootkit, httptunnel, xterm, ps, worm</td>
</tr>
<tr>
<td>R2L</td>
<td>リモートマシンからの許可されていないアクセス</td>
<td>ftp_write, guess_passwd, imap, multihop, phf, spy, warezclient, warezmaster, snmpgetattack, snmpguess, xsnoop, named, sendmail, sqlattack, xlock</td>
</tr>
</tbody>
</table>
<p>　サブクラス名から古臭さがにじんでいるが，データセットは近年の研究でも広く用いられているものだ．まあ単純に同規模の新しいデータセットがないからだろう．<br>　だいたいの論文は<code>kddcup.data_10_percent</code>を用いて学習し，<code>corrected</code>を用いて評価するという流れになっている．<br>　ところで，このデータセットに付随したタスクは正常通信と攻撃の二値（まあ多値分類になりはするが）分類だが，これは異常検知とどう違うのだろうか．<a href="https://www.amazon.co.jp/dp/B018K6C99U/" target="_blank" rel="external">ものの本</a>によると，二値分類はベイズ決定則（条件付き分布<span>$p(x|y=1)p(y=1)$</span><!-- Has MathJax -->と<span>$p(x|y=0)p(y=0)$</span><!-- Has MathJax -->の比が1を超えたら異常と判定），異常検知はネイマン・ピアソン決定則（<span>$p(x|y=1)$</span><!-- Has MathJax -->と<span>$p(x|y=0)$</span><!-- Has MathJax -->の比がある閾値を超えたら異常と判定）にもとづいている．ここで，異常検知問題ではほとんどつねに<span>$p(y=1)&lt;&lt;p(y=0)$</span><!-- Has MathJax -->であるため，ベイズ決定則は異常判定を強く抑制する．そういうわけで，標本の割合を吟味して二値分類器の閾値をスライドさせていくことが重要となってくるらしい．</p>
<h1 id="データセット形式への変換"><a href="#データセット形式への変換" class="headerlink" title="データセット形式への変換"></a>データセット形式への変換</h1><p>　<a href="https://github.com/inigoperona/tcpdump2gureKDDCup99" target="_blank" rel="external">tcpdump2gureKDDCup99</a>は，<a href="https://github.com/bro/bro" target="_blank" rel="external">Bro IDS</a>のプラグインとして，おなじみのpcapファイルをKDD Cup 99 Dataのフォーマットに変換してくれる．Bro IDSはSnortには及ばずともそこそこ由緒あるIDSで，GitHubリポジトリは<a href="https://code.gov/#/explore-code/agencies/DOE" target="_blank" rel="external">米国政府公式のリポジトリリスト</a>にも掲載されている．<br>　まずBro IDSをインストールする．</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install cmake make gcc g++ flex bison libpcap-dev libssl-dev python-dev swig zlib1g-dev</div><div class="line">$ git clone --recursive git://git.bro.org/bro</div><div class="line">$ cd bro</div><div class="line">$ ./configure</div><div class="line">$ make -j4</div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
<p>　私はpyenvからインストールしたPython 2.7.11を常用しているのだが，Bro IDSをmakeするには<code>CFLAGS=&quot;-fPIC&quot; pyenv install 2.7.11</code>のように共有ライブラリ用のオプションをつけてPythonを再インストールする必要があった．<br>　さてWireshark公式が公開している<a href="https://wiki.wireshark.org/SampleCaptures" target="_blank" rel="external">サンプルデータ</a>をKDD Cup 99 Dataの形式に変換してみる．</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ cd</div><div class="line">$ git clone git@github.com:inigoperona/tcpdump2gureKDDCup99</div><div class="line">$ gcc tcpdump2gureKDDCup99/trafAld.c -o tcpdump2gureKDDCup99/trafAld.out</div><div class="line">$ wget &quot;https://wiki.wireshark.org/SampleCaptures?action=AttachFile&amp;do=get&amp;target=zlip-1.pcap&quot; -O zlip-1.pcap</div><div class="line">$ bro -r zlip-1.pcap tcpdump2gureKDDCup99/darpa2gurekddcup.bro &gt; conn.list</div><div class="line">$ cat conn.list</div><div class="line">1 955453631.643199 1024 53 10.0.0.1 146.84.28.88 0.000000 udp 53 S0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</div><div class="line">$ sort -n conn.list &gt; conn_sort.list</div><div class="line">$ tcpdump2gureKDDCup99/trafAld.out conn_sort.list</div><div class="line">$ cat trafAld.list</div><div class="line">1 955453631.643199 1024 53 10.0.0.1 146.84.28.88 0.000000 udp 53 S0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0 0 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000</div></pre></td></tr></table></figure>
<p>　pcapファイルをPythonで分析したければそのまま（scapyや）pandasに突っ込むだろうけど，KDD Cup 99 Dataと比較したい場合には使えるかも．</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　名前は聞くけど触ったことないなということで．やらなければならない作業が進まないとこういう現実逃避が捗る捗る．</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li>H. G. Kayacık, et al. <a href="https://web.cs.dal.ca/~zincir/bildiri/pst05-gnm.pdf" target="_blank" rel="external">Selecting Features for Intrusion Detection: A Feature Relevance Analysis on KDD 99 Intrusion Detection Datasets[PDF]</a>. PST. 2005.<ul>
<li>この特徴に注意しようねという論文</li>
</ul>
</li>
<li>高橋，et al. <a href="https://ipsj.ixsq.nii.ac.jp/ej/index.php?active_action=repository_view_main_item_detail&amp;page_id=13&amp;block_id=8&amp;item_id=146854&amp;item_no=1" target="_blank" rel="external">KDD CUP 99 Data Set を用いた異なる学習データによる機械学習アルゴリズムの評価</a>．CSS. pp. 457-464. 2015.<ul>
<li>WekaでランダムフォレストとSVMを試した論文．日本語で読めて便利</li>
</ul>
</li>
<li><a href="https://github.com/jadianes/kdd-cup-99-spark" target="_blank" rel="external">jadianes/kdd-cup-99-spark: PySpark solution to the KDDCup9</a><ul>
<li>iPython Notebookからscikit-learnとPySparkを用いてKDD Cup 99 Dataを分析するデモが試せて便利</li>
</ul>
</li>
</ul>
<p>　はい．</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;　サイバーセキュリティに携わる者なら一度くらいはKDD Cup 99 Dataなるデータセットの名を耳にしたことがあるのでは
    
    </summary>
    
    
      <category term="machine learning" scheme="http://ntddk.github.io/tags/machine-learning/"/>
    
      <category term="network" scheme="http://ntddk.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Xmingによる入力言語の切り替えを防ぐ</title>
    <link href="http://ntddk.github.io/2016/11/06/suppress-switching-ime-on-xming/"/>
    <id>http://ntddk.github.io/2016/11/06/suppress-switching-ime-on-xming/</id>
    <published>2016-11-06T09:40:00.000Z</published>
    <updated>2016-11-07T09:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xming"><a href="#Xming" class="headerlink" title="Xming"></a>Xming</h1><p>　<a href="http://www.straightrunning.com/XmingNotes/" target="_blank" rel="external">Xming</a>はWindows向けX Window System実装で，WindowsでX11 Forwardingをする場合のデファクトスタンダード．さて，日本語版のWindowsでXmingを利用していると，時折勝手に入力言語が英語に変わってしまうことがある．でまあOSSなのでソースコードを書き換えればいいんだけど，バイナリを読んだほうが早そう，ということでそのようにした．</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>　IDA Proでキーボード関連のAPIの呼び出し元を眺めると，LoadKeyboardLayoutのロケールID引数を英語 (0x0409) に設定していることがわかる．これを日本語 (0x0411) にすればよい．</p>
<p><img src="/image/xming/1.png" width="100%" height="100%"></p>
<p>　素直に.rdataセクションに載っているので，そのまま書き換えられる．</p>
<p><img src="/image/xming/2.png" width="100%" height="100%"></p>
<p>　紀元前のバイナリパッチ方式で書くと下記の通り：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">19AFAA: 30 31</div><div class="line">19AFAB: 39 31</div><div class="line">19AFB5: 55 4A</div><div class="line">19AFB6: 53 50</div></pre></td></tr></table></figure>
<p>　はい．</p>
<h1 id="追記-2016-11-07"><a href="#追記-2016-11-07" class="headerlink" title="追記 (2016.11.07)"></a>追記 (2016.11.07)</h1><p>　XmingのバージョンはPublic Domain Releases 6.9.0.31で，より新しい有償版で修正されているのかどうかは知らない．で，6.9.0.31の当該ソースコード (<code>xc/programs/Xserver/hw/xwin/winconfig.c</code>) にはなにやら不吉なコメントが記されているが，見なかったことにする．うちの環境では，レジストリ設定でCaps LockをCtrlに入れ替えてるし．</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (keyboardType == <span class="number">7</span>)</div><div class="line">  &#123;</div><div class="line">    <span class="comment">/* Japanese layouts have problems with key event messages</span></div><div class="line">       such as the lack of WM_KEYUP for Caps Lock key.</div><div class="line">       Loading US layout fixes this problem. */</div><div class="line">    <span class="keyword">if</span> (LoadKeyboardLayout(<span class="string">"00000409"</span>, KLF_ACTIVATE) != <span class="literal">NULL</span>)</div><div class="line">      winMsg (X_INFO, <span class="string">"Loading US keyboard layout.\n"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">      winMsg (X_ERROR, <span class="string">"LoadKeyboardLaout failed.\n"</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>　ご自身の責任でやっていってください．</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Xming&quot;&gt;&lt;a href=&quot;#Xming&quot; class=&quot;headerlink&quot; title=&quot;Xming&quot;&gt;&lt;/a&gt;Xming&lt;/h1&gt;&lt;p&gt;　&lt;a href=&quot;http://www.straightrunning.com/XmingNotes/&quot; targ
    
    </summary>
    
    
      <category term="reversing" scheme="http://ntddk.github.io/tags/reversing/"/>
    
  </entry>
  
  <entry>
    <title>angr, AFL, Driller</title>
    <link href="http://ntddk.github.io/2016/08/27/angr-afl-driller/"/>
    <id>http://ntddk.github.io/2016/08/27/angr-afl-driller/</id>
    <published>2016-08-26T18:00:00.000Z</published>
    <updated>2017-11-08T06:27:30.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>　今年のセキュリティ・キャンプでは，うっかり「なぜマルウェア解析は自動化できないのか」という題の講義を行ってしまったが，それだけセキュリティの世界には自動化の波が来ている．本稿では，脆弱性分析の自動化をめざして開発されているangr, AFL, Drillerをざっくり紹介する．</p>
<h1 id="angr"><a href="#angr" class="headerlink" title="angr"></a>angr</h1><p>　<a href="http://angr.io/" target="_blank" rel="external">angr</a>はUCSBの研究チームにしてCTFチーム<a href="https://twitter.com/shellphish" target="_blank" rel="external">Shellphish</a>を中心に開発されているバイナリ解析フレームワーク．<a href="https://www.cs.ucsb.edu/~vigna/publications/2016_SP_angrSoK.pdf" target="_blank" rel="external">論文[PDF]</a>はIEEE S&amp;P 2016に採択されている．手法の新規性というよりは実装力でゴリ押しするタイプ．評価には，アメリカ国防高等研究計画局が5,500万ドル（約56億円）の資金を投じてまで開催した脆弱性分析・修正の自動化コンペ，<a href="https://www.cybergrandchallenge.com/" target="_blank" rel="external">DARPA Cyber Grand Challenge</a> (CGC) のデータセットが用いられている．CGCの決勝戦に進出したチームには75万ドル（約7,600万円），優勝したチームは200万ドル（約2億円）が与えられる．angr開発の目的のひとつが，CGCでの勝利にあることは疑いようもない——最終的な戦績は，CMUのツールMAYHEMに優勝を譲って3位だったが．<br>　さて，angrはシンボリック実行やプログラムスライシングを通して，<strong>プログラムの特定位置に到達するための入力値を抽出することができる</strong>．次のコードで雰囲気をつかめるだろうか：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> angr</div><div class="line"><span class="keyword">import</span> simuvex</div><div class="line"></div><div class="line"><span class="comment"># 解析対象を指定</span></div><div class="line">p = angr.Project(sys.argv[<span class="number">1</span>]) </div><div class="line"></div><div class="line"><span class="comment"># 制御フローグラフの生成</span></div><div class="line">cfg = p.analyses.CFG()</div><div class="line"><span class="keyword">print</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> cfg.functions.iteritems()]</div><div class="line"></div><div class="line"><span class="comment"># シンボルを取得</span></div><div class="line">target_addr = p.loader.main_bin.get_symbol(<span class="string">"main"</span>).addr</div><div class="line"></div><div class="line"><span class="comment"># パス分析クラスのインスタンス</span></div><div class="line">pg = p.factory.path_group()</div><div class="line"></div><div class="line"><span class="comment"># シンボルへのパスを分析</span></div><div class="line">pg.explore(find = target_addr)</div><div class="line"></div><div class="line"><span class="comment"># avoidを避け，findに到達する入力値を探索してくれる</span></div><div class="line">a = p.surveyors.Explorer(find = FIND_ADDR, avoid = AVOID_ADDR).run()</div><div class="line"></div><div class="line"><span class="comment"># フック</span></div><div class="line">p.hook_symbol(<span class="string">'strlen'</span>, simuvex.SimProcedures[<span class="string">'stubs'</span>][<span class="string">'ReturnUnconstrained'</span>])</div><div class="line"></div><div class="line"><span class="comment"># 実行結果のダンプ</span></div><div class="line">a.found[<span class="number">0</span>].state.posix.dumps(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>　解析対象の規模が大きい場合，エントリポイントを起点とした解析に時間を要するあるいは失敗することがあるが，プログラムの途中から解析を始めることも可能だ．</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">p = angr.Project(sys.argv[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment"># 解析の起点となるアドレス</span></div><div class="line">state = p.factory.blank_state(addr = START_ADDR)</div><div class="line"><span class="comment"># その地点までプログラムを実行したときのスタックの状態</span></div><div class="line">state.regs.ebp = BASE_ADDR</div><div class="line">state.regs.esp = STACK_ADDR</div><div class="line"></div><div class="line"><span class="comment"># 入力値の設定</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(INPUT_LENGTH):</div><div class="line">    s = state.se.BVS(<span class="string">'Var[&#123;&#125;]'</span>.format(i), <span class="number">32</span>, explicit_name = <span class="keyword">True</span>)</div><div class="line">    state.memory.store(INPUT_ADDR + i * <span class="number">4</span>, s)</div><div class="line"></div><div class="line">path = p.factory.path(state)</div><div class="line">a = p.surveyors.Explorer(start = path, find= FIND_ADDR, avoid= AVOID_ADDR)</div><div class="line">a.found[<span class="number">0</span>].state.posix.dumps(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>　シンボリック実行はSSA形式の中間表現を前提とするが，angrはValgrindのVEX IRを用いている．バックエンドのSMTソルバはZ3だが，claripyという自前のラッパが噛ませてある．<br>　これ以上の説明は<a href="http://docs.angr.io/" target="_blank" rel="external">公式ドキュメント</a>に譲ろう．</p>
<h1 id="AFL"><a href="#AFL" class="headerlink" title="AFL"></a>AFL</h1><p>　<a href="http://lcamtuf.coredump.cx/afl/" target="_blank" rel="external">AFL</a> (American Fuzzy Lop) はGoogleのエンジニア<a href="https://twitter.com/lcamtuf" target="_blank" rel="external">lcamtuf</a>を中心に開発されているファジングツール．遺伝的アルゴリズムによって正常な入力を次々と変異させていき，<strong>自動的にプログラムのバグを検出する</strong>．AFLにはbashやtcpdump, OpenSSHといったさまざまなソフトウェアのバグを検出した実績があり，いまや脆弱性分析の研究になくてはならない存在だ．一般的なファジングはプログラムの浅い箇所にしか到達できない．AFLは，大量の正常な入力をトリミングしてシードとするコーパス蒸留 (corpus distillation) と，遺伝的アルゴリズムを用いてシードを変異させる<a href="http://ieeexplore.ieee.org/document/4682289/" target="_blank" rel="external">GAFuzzing</a>のいいとこ取りを図ったものだ．その実行フローは次のようになる：</p>
<ol>
<li>ユーザーから与えられた初期テストケースをキューに入れる</li>
<li>キューから次の入力テストケースをひとつ取り出し，</li>
<li>プログラムの振る舞いに影響を与えない最小サイズにトリミングする</li>
<li>バランスのよい探索となるよう，さまざまな変異戦略を用いて入力を繰り返し変異させる</li>
<li>新たな状態遷移が計測されたら，出力をキューに入れる</li>
<li>2に戻る</li>
</ol>
<p>　ここでAFLはカバレッジ計測のため，解析対象のプログラムに計測用のコードを埋め込む．これには，解析対象のソースコードが手元にある場合gccやclangの独自フロントエンドが，解析対象のソースコードが手元にない場合QEMUが用いられる．<br>　ファジング機能の中核は，<code>afl-fuzz.c</code>の<code>main()</code>から呼び出される<code>fuzz_one()</code>にある．実装されている変異戦略は次の通り：</p>
<ul>
<li>SIMPLE BITFLIP</li>
<li>ARITHMETIC INC/DEC</li>
<li>INTERESTING VALUES</li>
<li>DICTIONARY STUFF</li>
<li>RANDOM HAVOC</li>
<li>SPLICING</li>
</ul>
<p>　CGCで優勝したCMUのMAYHEMは，<a href="https://twitter.com/thedavidbrumley/status/762107471771021313" target="_blank" rel="external">このAFLにシンボリック実行機能を追加していたようだ</a>．MAYHEMといえば同名のシンボリック実行エンジンの<a href="https://users.ece.cmu.edu/~arebert/papers/mayhem-oakland-12.pdf" target="_blank" rel="external">論文[PDF]</a>がIEEE S&amp;P 2012で発表されているが，当時からの変更点がどれほどなのかはわからない．<br>　また，AFLの拡張に，解析対象のパスを枝刈りすることで高速化を図った<a href="https://github.com/mboehme/aflfast" target="_blank" rel="external">AFLFast</a>がある．これもCGC決勝進出チームによるもので，<a href="https://comp.nus.edu.sg/~mboehme/paper/CCS16.pdf" target="_blank" rel="external">論文[PDF]</a>はACM CCS 2016に採択されている．600行程度のパッチでトップカンファレンス．ちょっと妬ましい．</p>
<h1 id="Driller"><a href="#Driller" class="headerlink" title="Driller"></a>Driller</h1><p>　<a href="https://github.com/shellphish/driller" target="_blank" rel="external">Driller</a>はangrの開発陣によるAFLの拡張．<a href="https://www.internetsociety.org/sites/default/files/blogs-media/driller-augmenting-fuzzing-through-selective-symbolic-execution.pdf" target="_blank" rel="external">論文[PDF]</a>はNDSS 2016に採択されている．AFLのREADMEには次のようにある：</p>
<blockquote>
<p>Other, more sophisticated research has focused on techniques such as program flow analysis (“concolic execution”), symbolic execution, or static analysis. All these methods are extremely promising in experimental settings, but tend to suffer from reliability and performance problems in practical uses - and currently do not offer a viable alternative to “dumb” fuzzing techniques.</p>
</blockquote>
<p>　シンボリック（コンコリック）実行は実用的ではないと切って捨てている．DrillerはangrとAFLを組み合わせることで，この批判を克服し，ファジングとシンボリック実行のいいとこ取りを図ったものだ：</p>
<p><img src="/image/driller/driller.png" width="100%" height="100%"></p>
<p>　たとえば，次のコードの解析には，ファジングよりシンボリック実行が適している：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    read(<span class="number">0</span>, &amp;x, <span class="keyword">sizeof</span>(x));</div><div class="line">    <span class="keyword">if</span>(x == <span class="number">0x123ABCD</span>)</div><div class="line">        vulnerable();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　なぜなら，ファジングによって<code>0x123ABCD</code>という値を生成するには大量の試行を必要とするからだ．一方で，次のコードの解析には，シンボリック実行よりファジングが適している：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> *x, <span class="keyword">int</span> depth)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(depth &gt;= <span class="number">100</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">int</span> count = (*x == <span class="string">'B'</span>) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        count += check(x+<span class="number">1</span>, depth+<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> x[<span class="number">100</span>];</div><div class="line">    read(<span class="number">0</span>, x, <span class="number">100</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(check(x, <span class="number">0</span>) == <span class="number">25</span>)</div><div class="line">        vulnerable();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　なぜなら，単純なシンボリック実行ではパス爆発を解決できないからだ．<br>　Drillerは両手法の長所と短所を踏まえた上で，それらを堅実に組み合わせている．やはりハッシュ関数の充足はDrillerをもってしても難しいようだが，現行MAYHEMもAFLとシンボリック実行を併用しているようだし，このアプローチが現在の着地点なのだろう．</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　CGCとそれにともなう研究によって，脆弱性分析の自動化手法は大きな進歩を遂げつつあることが伝わっただろうか．学会のOSS重視傾向も相まって，さまざまなツールを手元で試せるようになってきている．大変ありがたいことだ．</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;　今年のセキュリティ・キャンプでは，うっかり「なぜマルウェア解析は自動化できないのか」という題の講義を行ってしまったが，それ
    
    </summary>
    
    
      <category term="symbolic execution" scheme="http://ntddk.github.io/tags/symbolic-execution/"/>
    
      <category term="exploitation" scheme="http://ntddk.github.io/tags/exploitation/"/>
    
  </entry>
  
  <entry>
    <title>Unicornのソースコードを読む (Python編)</title>
    <link href="http://ntddk.github.io/2016/07/09/unicorn-internals-python/"/>
    <id>http://ntddk.github.io/2016/07/09/unicorn-internals-python/</id>
    <published>2016-07-09T06:20:00.000Z</published>
    <updated>2017-03-04T07:39:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>　※Rackサーバの方のUnicornではない．</p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>　<a href="http://www.unicorn-engine.org/" target="_blank" rel="external">Unicorn</a>は<a href="http://www.qemu.org/" target="_blank" rel="external">QEMU</a>ベースの軽量，マルチプラットフォーム・マルチアーキテクチャ・JIT対応のCPUエミュレータ．周辺機器をエミュレーションしないため用途は限られるが，GoやPythonなど<a href="https://github.com/unicorn-engine/unicorn/tree/master/bindings" target="_blank" rel="external">複数言語のバインディング</a>を備えている．現在システムセキュリティ分野で最も注目されているOSSのひとつと言っても過言ではなく，<a href="https://github.com/vrtadmin/ROPMEMU" target="_blank" rel="external">AsiaCCS 2016で発表されたROPチェーン解析ツールROPMEMU</a>や，<a href="https://github.com/oblivia-simplex/roper" target="_blank" rel="external">遺伝的アルゴリズムによってROPチェーンを自動生成するツールroper</a>のバックエンドとして用いられたり，Unicornと同じように注目を集めているバイナリ解析ツール<a href="https://github.com/angr/simuvex/issues/29" target="_blank" rel="external">angrとの連携</a>が進められたりと，一大コミュニティを形成しつつある．<br>　コンセプトの説明は<a href="http://www.unicorn-engine.org/BHUSA2015-unicorn.pdf" target="_blank" rel="external">Black Hat USA 2015の発表スライド</a>に譲るとして，ここではその利用方法と内部実装にふれる．</p>
<h1 id="Pythonバインディング"><a href="#Pythonバインディング" class="headerlink" title="Pythonバインディング"></a>Pythonバインディング</h1><blockquote>
<p>　情報セキュリティに興味があり，セキュリティ関係の仕事に携わりたいという人には，Pythonはうってつけの言語だ．その理由は，リバースエンジニアリングと攻撃コード作成のためのライブラリが充実しているためだ．<br>　　　　　　　– Justin Seitz『<a href="https://www.oreilly.co.jp/books/9784873117317/" target="_blank" rel="external">サイバーセキュリティプログラミング———Pythonで学ぶハッカーの思考</a>』序文</p>
</blockquote>
<p>　リバースエンジニアリングというタスクにUnicornを用いることを考える．他言語を選ぶ積極的な理由やPythonへのアレルギーがなければ，他のライブラリとの連携も考慮して，Pythonバインディングを活用すべきだろう．</p>
<h1 id="エミュレーション"><a href="#エミュレーション" class="headerlink" title="エミュレーション"></a>エミュレーション</h1><p>　最もシンプルな用例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># unicorn/bindings/python/sample_x86.pyを抜粋・改変</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function <span class="comment"># Python 2.7を利用</span></div><div class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment"># エミュレーション対象の機械語</span></div><div class="line">X86_CODE32 = <span class="string">b"\x41\x4a"</span> <span class="comment"># INC ecx; DEC edx</span></div><div class="line"></div><div class="line"><span class="comment"># 各基本ブロックに対するコールバック</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_block</span><span class="params">(uc, address, size, user_data)</span>:</span></div><div class="line">    print(<span class="string">"&gt;&gt;&gt; Tracing basic block at 0x%x, block size = 0x%x"</span> %(address, size))</div><div class="line"></div><div class="line"><span class="comment"># 各命令に対するコールバック</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span><span class="params">(uc, address, size, user_data)</span>:</span></div><div class="line">    print(<span class="string">"&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = %u"</span> %(address, size))</div><div class="line"></div><div class="line"><span class="comment"># x86 32bitのコードをエミュレーション</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_i386</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Emulate i386 code"</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># x86-32bitモードでエミュレータを初期化</span></div><div class="line">        mu = Uc(UC_ARCH_X86, UC_MODE_32)</div><div class="line"></div><div class="line">        <span class="comment"># エミュレーション用に2MBのメモリを割り当て</span></div><div class="line">        mu.mem_map(ADDRESS, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>)</div><div class="line"></div><div class="line">        <span class="comment"># 割り当てられたメモリに機械語を書き込み</span></div><div class="line">        mu.mem_write(ADDRESS, X86_CODE32)</div><div class="line"></div><div class="line">        <span class="comment"># レジスタ初期化</span></div><div class="line">        mu.reg_write(UC_X86_REG_ECX, <span class="number">0x1234</span>) <span class="comment"># エミュレーション中に加算される</span></div><div class="line">        mu.reg_write(UC_X86_REG_EDX, <span class="number">0x7890</span>) <span class="comment"># エミュレーション中に減算される</span></div><div class="line"></div><div class="line">        <span class="comment"># 各基本ブロックに対するコールバックを設定</span></div><div class="line">        mu.hook_add(UC_HOOK_BLOCK, hook_block)</div><div class="line"></div><div class="line">        <span class="comment"># 各命令に対するコールバックを設定</span></div><div class="line">        mu.hook_add(UC_HOOK_CODE, hook_code)</div><div class="line"></div><div class="line">        <span class="comment"># エミュレーション開始</span></div><div class="line">        mu.emu_start(ADDRESS, ADDRESS + len(X86_CODE32))</div><div class="line"></div><div class="line">        <span class="comment"># レジスタの表示</span></div><div class="line">        print(<span class="string">"&gt;&gt;&gt; Emulation done. Below is the CPU context"</span>)</div><div class="line"></div><div class="line">        r_ecx = mu.reg_read(UC_X86_REG_ECX)</div><div class="line">        r_edx = mu.reg_read(UC_X86_REG_EDX)</div><div class="line">        print(<span class="string">"&gt;&gt;&gt; ECX = 0x%x"</span> %r_ecx)</div><div class="line">        print(<span class="string">"&gt;&gt;&gt; EDX = 0x%x"</span> %r_edx)</div><div class="line"></div><div class="line">        <span class="comment"># メモリから命令列を読む</span></div><div class="line">        tmp = mu.mem_read(ADDRESS, <span class="number">2</span>)</div><div class="line">        print(<span class="string">"&gt;&gt;&gt; Read 2 bytes from [0x%x] ="</span> %(ADDRESS), end=<span class="string">""</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</div><div class="line">            print(<span class="string">" 0x%x"</span> %i, end=<span class="string">""</span>)</div><div class="line">        print(<span class="string">""</span>)</div><div class="line"></div><div class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">"ERROR: %s"</span> % e)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    test_i386()</div></pre></td></tr></table></figure>
<p>　これを実行すると次のような出力が得られる．</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Emulate i386 code</div><div class="line">&gt;&gt;&gt; Tracing basic block at 0x1000000, block size = 0x2</div><div class="line">&gt;&gt;&gt; Tracing instruction at 0x1000000, instruction size = 1</div><div class="line">&gt;&gt;&gt; Tracing instruction at 0x1000001, instruction size = 1</div><div class="line">&gt;&gt;&gt; Emulation done. Below is the CPU context</div><div class="line">&gt;&gt;&gt; ECX = 0x1235</div><div class="line">&gt;&gt;&gt; EDX = 0x788f</div><div class="line">&gt;&gt;&gt; Read 2 bytes from [0x1000000] = 0x41 0x4a</div></pre></td></tr></table></figure>
<p>　はい．<br>　なおエミュレーション時に各命令のトレースを得たければ，同じ開発陣による逆アセンブラ<a href="http://www.capstone-engine.org/" target="_blank" rel="external">Capstone</a>のPythonバインディングを併用して (詳細は割愛) 次のようなフックを用意すればよい：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</div><div class="line">...</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleEngine</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.capmd = Cs(CS_ARCH_X86, CS_MODE_32) <span class="comment"># アーキテクチャ指定</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disas_single</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.capmd.disasm(data, <span class="number">16</span>): <span class="comment"># 逆アセンブル</span></div><div class="line">            print(<span class="string">"\t%s\t%s"</span> % (i.mnemonic, i.op_str))</div><div class="line">            <span class="keyword">break</span></div><div class="line"></div><div class="line">disasm = SimpleEngine()</div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span><span class="params">(uc, address, size, user_data)</span>:</span></div><div class="line">    print(<span class="string">"&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = %u, "</span> %(address, size), end=<span class="string">""</span>)</div><div class="line">    <span class="comment"># メモリから実行される命令を読む</span></div><div class="line">    ins = uc.mem_read(address, size)</div><div class="line">    disasm.disas_single(str(ins))</div></pre></td></tr></table></figure>
<p>　実行すると命令のトレースが得られる．</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&gt;&gt;&gt; Tracing instruction at 0x1000000, instruction size = 1,     inc     ecx</div><div class="line">&gt;&gt;&gt; Tracing instruction at 0x1000001, instruction size = 1,     dec     edx</div><div class="line">...</div></pre></td></tr></table></figure>
<p>　このように，Unicornではプラグイン側のエントリポイントからQEMUの機能を呼び出していくことになる．</p>
<h1 id="Pythonバインディングの内部"><a href="#Pythonバインディングの内部" class="headerlink" title="Pythonバインディングの内部"></a>Pythonバインディングの内部</h1><p>　この内部では，ctypesによる共有ライブラリのロードが行われている．<code>unicorn/bindings/python/unicorn/unicorn.py</code>を見よう：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> _lib <span class="keyword">in</span> _all_libs:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> _lib == <span class="string">"unicorn.dll"</span>:</div><div class="line">            <span class="keyword">for</span> dll <span class="keyword">in</span> _all_windows_dlls:    <span class="comment"># load all the rest DLLs first</span></div><div class="line">                _lib_file = os.path.join(_lib_path, dll)</div><div class="line">                <span class="keyword">if</span> os.path.exists(_lib_file):</div><div class="line">                    ctypes.cdll.LoadLibrary(_lib_file)</div><div class="line">        _lib_file = os.path.join(_lib_path, _lib)</div><div class="line">        _uc = ctypes.cdll.LoadLibrary(_lib_file)</div><div class="line">        _found = <span class="keyword">True</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">except</span> OSError:</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>　ここで<code>_uc</code>に<code>unicorn.dll</code> (環境によって異なるがいずれにせよ共有ライブラリ) がロードされている．<br>　さて，これまで利用してきた関数のプロトタイプ宣言は<code>unicorn/bindings/python/unicorn/unicorn.py</code>にある：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setup all the function prototype</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_setup_prototype</span><span class="params">(lib, fname, restype, *argtypes)</span>:</span></div><div class="line">    getattr(lib, fname).restype = restype</div><div class="line">    getattr(lib, fname).argtypes = argtypes</div><div class="line"></div><div class="line">ucerr = ctypes.c_int</div><div class="line">uc_engine = ctypes.c_void_p</div><div class="line">uc_hook_h = ctypes.c_size_t</div><div class="line"></div><div class="line">_setup_prototype(_uc, <span class="string">"uc_version"</span>, ctypes.c_uint, ctypes.POINTER(ctypes.c_int), ctypes.POINTER(ctypes.c_int))</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_arch_supported"</span>, ctypes.c_bool, ctypes.c_int)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_open"</span>, ucerr, ctypes.c_uint, ctypes.c_uint, ctypes.POINTER(uc_engine))</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_close"</span>, ucerr, uc_engine)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_strerror"</span>, ctypes.c_char_p, ucerr)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_errno"</span>, ucerr, uc_engine)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_reg_read"</span>, ucerr, uc_engine, ctypes.c_int, ctypes.c_void_p)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_reg_write"</span>, ucerr, uc_engine, ctypes.c_int, ctypes.c_void_p)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_mem_read"</span>, ucerr, uc_engine, ctypes.c_uint64, ctypes.POINTER(ctypes.c_char), ctypes.c_size_t)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_mem_write"</span>, ucerr, uc_engine, ctypes.c_uint64, ctypes.POINTER(ctypes.c_char), ctypes.c_size_t)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_emu_start"</span>, ucerr, uc_engine, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_size_t)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_emu_stop"</span>, ucerr, uc_engine)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_hook_del"</span>, ucerr, uc_engine, uc_hook_h)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_mem_map"</span>, ucerr, uc_engine, ctypes.c_uint64, ctypes.c_size_t, ctypes.c_uint32)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_mem_map_ptr"</span>, ucerr, uc_engine, ctypes.c_uint64, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_mem_unmap"</span>, ucerr, uc_engine, ctypes.c_uint64, ctypes.c_size_t)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_mem_protect"</span>, ucerr, uc_engine, ctypes.c_uint64, ctypes.c_size_t, ctypes.c_uint32)</div><div class="line">_setup_prototype(_uc, <span class="string">"uc_query"</span>, ucerr, uc_engine, ctypes.c_uint32, ctypes.POINTER(ctypes.c_size_t))</div><div class="line"></div><div class="line"><span class="comment"># uc_hook_add is special due to variable number of arguments</span></div><div class="line">_uc.uc_hook_add = _uc.uc_hook_add</div><div class="line">_uc.uc_hook_add.restype = ucerr</div><div class="line"></div><div class="line">UC_HOOK_CODE_CB = ctypes.CFUNCTYPE(<span class="keyword">None</span>, uc_engine, ctypes.c_uint64, ctypes.c_size_t, ctypes.c_void_p)</div><div class="line">UC_HOOK_MEM_INVALID_CB = ctypes.CFUNCTYPE(</div><div class="line">    ctypes.c_bool, uc_engine, ctypes.c_int,</div><div class="line">    ctypes.c_uint64, ctypes.c_int, ctypes.c_int64, ctypes.c_void_p</div><div class="line">)</div><div class="line">UC_HOOK_MEM_ACCESS_CB = ctypes.CFUNCTYPE(</div><div class="line">    <span class="keyword">None</span>, uc_engine, ctypes.c_int,</div><div class="line">    ctypes.c_uint64, ctypes.c_int, ctypes.c_int64, ctypes.c_void_p</div><div class="line">)</div><div class="line">UC_HOOK_INTR_CB = ctypes.CFUNCTYPE(</div><div class="line">    <span class="keyword">None</span>, uc_engine, ctypes.c_uint32, ctypes.c_void_p</div><div class="line">)</div><div class="line">UC_HOOK_INSN_IN_CB = ctypes.CFUNCTYPE(</div><div class="line">    ctypes.c_uint32, uc_engine, ctypes.c_uint32, ctypes.c_int, ctypes.c_void_p</div><div class="line">)</div><div class="line">UC_HOOK_INSN_OUT_CB = ctypes.CFUNCTYPE(</div><div class="line">    <span class="keyword">None</span>, uc_engine, ctypes.c_uint32,</div><div class="line">    ctypes.c_int, ctypes.c_uint32, ctypes.c_void_p</div><div class="line">)</div><div class="line">UC_HOOK_INSN_SYSCALL_CB = ctypes.CFUNCTYPE(<span class="keyword">None</span>, uc_engine, ctypes.c_void_p)</div></pre></td></tr></table></figure>
<p>　メモリ・レジスタを読み書きできることがわかる．<br>　さきほどは基本ブロック・命令単位のコールバック関数——フック——を設置した．その他のフックも次のように書ける：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mu.hook_add(UC_HOOK_BLOCK, hook_block) <span class="comment"># 基本ブロック単位</span></div><div class="line">mu.hook_add(UC_HOOK_CODE, hook_code)   <span class="comment"># 命令単位</span></div><div class="line">mu.hook_add(UC_HOOK_CODE, hook_code, <span class="keyword">None</span>, ADDRESS, ADDRESS+<span class="number">20</span>) <span class="comment"># 指定範囲[ADDRESS, ADDRESS+20]の全命令</span></div><div class="line">mu.hook_add(UC_HOOK_INSN, hook_in, <span class="keyword">None</span>, <span class="number">1</span>, <span class="number">0</span>, UC_X86_INS_IN)   <span class="comment"># IN命令</span></div><div class="line">mu.hook_add(UC_HOOK_INSN, hook_out, <span class="keyword">None</span>, <span class="number">1</span>, <span class="number">0</span>, UC_X86_INS_OUT) <span class="comment"># OUT命令</span></div><div class="line">mu.hook_add(UC_HOOK_MEM_WRITE, hook_mem_access) <span class="comment"># メモリ書き込み</span></div><div class="line">mu.hook_add(UC_HOOK_MEM_READ, hook_mem_access)  <span class="comment"># メモリ読み込み</span></div><div class="line">mu.hook_add(UC_HOOK_MEM_READ | UC_HOOK_MEM_WRITE, hook_mem_access) <span class="comment"># その両方</span></div><div class="line">mu.hook_add(UC_HOOK_MEM_READ_UNMAPPED | UC_HOOK_MEM_WRITE_UNMAPPED, hook_mem_invalid) <span class="comment"># 無効なメモリアクセス</span></div><div class="line">mu.hook_add(UC_HOOK_INSN, hook_syscall, <span class="keyword">None</span>, <span class="number">1</span>, <span class="number">0</span>, UC_X86_INS_SYSCALL) <span class="comment"># システムコール</span></div><div class="line">mu.hook_add(UC_HOOK_INTR, hook_intr) <span class="comment"># 割り込み</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>　こうしたフックや，これまで用いてきたレジスタやメモリの読み書き・エミュレーションといった機能は<code>Uc</code>クラスのメソッドとして用意されている：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uc</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, arch, mode)</span>:</span></div><div class="line">        <span class="comment"># verify version compatibility with the core before doing anything</span></div><div class="line">        (major, minor, _combined) = uc_version()</div><div class="line">        <span class="keyword">if</span> major != uc.UC_API_MAJOR <span class="keyword">or</span> minor != uc.UC_API_MINOR:</div><div class="line">            self._uch = <span class="keyword">None</span></div><div class="line">            <span class="comment"># our binding version is different from the core's API version</span></div><div class="line">            <span class="keyword">raise</span> UcError(uc.UC_ERR_VERSION)</div><div class="line"></div><div class="line">        self._arch, self._mode = arch, mode</div><div class="line">        self._uch = ctypes.c_void_p()</div><div class="line">        status = _uc.uc_open(arch, mode, ctypes.byref(self._uch))</div><div class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</div><div class="line">            self._uch = <span class="keyword">None</span></div><div class="line">            <span class="keyword">raise</span> UcError(status)</div><div class="line">        <span class="comment"># internal mapping table to save callback &amp; userdata</span></div><div class="line">        self._callbacks = &#123;&#125;</div><div class="line">        self._ctype_cbs = &#123;&#125;</div><div class="line">        self._callback_count = <span class="number">0</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">    <span class="comment"># emulate from @begin, and stop when reaching address @until</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">emu_start</span><span class="params">(self, begin, until, timeout=<span class="number">0</span>, count=<span class="number">0</span>)</span>:</span></div><div class="line">        status = _uc.uc_emu_start(self._uch, begin, until, timeout, count)</div><div class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</div><div class="line">            <span class="keyword">raise</span> UcError(status)</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">    <span class="comment"># return the value of a register</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reg_read</span><span class="params">(self, reg_id)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._arch == uc.UC_ARCH_X86:</div><div class="line">            <span class="keyword">if</span> reg_id <span class="keyword">in</span> [x86_const.UC_X86_REG_IDTR, x86_const.UC_X86_REG_GDTR, x86_const.UC_X86_REG_LDTR, x86_const.UC_X86_REG_TR]:</div><div class="line">                reg = uc_x86_mmr()</div><div class="line">                status = _uc.uc_reg_read(self._uch, reg_id, ctypes.byref(reg))</div><div class="line">                <span class="keyword">if</span> status != uc.UC_ERR_OK:</div><div class="line">                    <span class="keyword">raise</span> UcError(status)</div><div class="line">                <span class="keyword">return</span> reg.selector, reg.base, reg.limit, reg.flags</div><div class="line">            <span class="keyword">if</span> reg_id <span class="keyword">in</span> range(x86_const.UC_X86_REG_FP0, x86_const.UC_X86_REG_FP0+<span class="number">8</span>):</div><div class="line">                reg = uc_x86_float80()</div><div class="line">                status = _uc.uc_reg_read(self._uch, reg_id, ctypes.byref(reg))</div><div class="line">                <span class="keyword">if</span> status != uc.UC_ERR_OK:</div><div class="line">                    <span class="keyword">raise</span> UcError(status)</div><div class="line">                <span class="keyword">return</span> reg.mantissa, reg.exponent</div><div class="line"></div><div class="line">        <span class="comment"># read to 64bit number to be safe</span></div><div class="line">        reg = ctypes.c_int64(<span class="number">0</span>)</div><div class="line">        status = _uc.uc_reg_read(self._uch, reg_id, ctypes.byref(reg))</div><div class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</div><div class="line">            <span class="keyword">raise</span> UcError(status)</div><div class="line">        <span class="keyword">return</span> reg.value</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">    <span class="comment"># read data from memory</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mem_read</span><span class="params">(self, address, size)</span>:</span></div><div class="line">        data = ctypes.create_string_buffer(size)</div><div class="line">        status = _uc.uc_mem_read(self._uch, address, data, size)</div><div class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</div><div class="line">            <span class="keyword">raise</span> UcError(status)</div><div class="line">        <span class="keyword">return</span> bytearray(data)</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">    <span class="comment"># add a hook</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hook_add</span><span class="params">(self, htype, callback, user_data=None, begin=<span class="number">1</span>, end=<span class="number">0</span>, arg1=<span class="number">0</span>)</span>:</span></div><div class="line">        _h2 = uc_hook_h()</div><div class="line"></div><div class="line">        <span class="comment"># save callback &amp; user_data</span></div><div class="line">        self._callback_count += <span class="number">1</span></div><div class="line">        self._callbacks[self._callback_count] = (callback, user_data)</div><div class="line">        cb = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> htype == uc.UC_HOOK_INSN: <span class="comment"># 特定の命令に応じた内部処理</span></div><div class="line">            insn = ctypes.c_int(arg1)</div><div class="line">            <span class="keyword">if</span> arg1 == x86_const.UC_X86_INS_IN:  <span class="comment"># IN命令</span></div><div class="line">                cb = ctypes.cast(UC_HOOK_INSN_IN_CB(self._hook_insn_in_cb), UC_HOOK_INSN_IN_CB)</div><div class="line">            <span class="keyword">if</span> arg1 == x86_const.UC_X86_INS_OUT:  <span class="comment"># OUT命令</span></div><div class="line">                cb = ctypes.cast(UC_HOOK_INSN_OUT_CB(self._hook_insn_out_cb), UC_HOOK_INSN_OUT_CB)</div><div class="line">            <span class="keyword">if</span> arg1 <span class="keyword">in</span> (x86_const.UC_X86_INS_SYSCALL, x86_const.UC_X86_INS_SYSENTER):  <span class="comment"># SYSCALL/SYSENTER命令</span></div><div class="line">                cb = ctypes.cast(UC_HOOK_INSN_SYSCALL_CB(self._hook_insn_syscall_cb), UC_HOOK_INSN_SYSCALL_CB)</div><div class="line">            status = _uc.uc_hook_add(</div><div class="line">                self._uch, ctypes.byref(_h2), htype, cb,</div><div class="line">                ctypes.cast(self._callback_count, ctypes.c_void_p),</div><div class="line">                ctypes.c_uint64(begin), ctypes.c_uint64(end), insn</div><div class="line">            )</div><div class="line">        <span class="keyword">elif</span> htype == uc.UC_HOOK_INTR: <span class="comment"># 割り込み</span></div><div class="line">            cb = ctypes.cast(UC_HOOK_INTR_CB(self._hook_intr_cb), UC_HOOK_INTR_CB)</div><div class="line">            status = _uc.uc_hook_add(</div><div class="line">                self._uch, ctypes.byref(_h2), htype, cb,</div><div class="line">                ctypes.cast(self._callback_count, ctypes.c_void_p),</div><div class="line">                ctypes.c_uint64(begin), ctypes.c_uint64(end)</div><div class="line">            )</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> htype <span class="keyword">in</span> (uc.UC_HOOK_BLOCK, uc.UC_HOOK_CODE): <span class="comment"># 基本ブロック・命令単位</span></div><div class="line">                <span class="comment"># set callback with wrapper, so it can be called</span></div><div class="line">                <span class="comment"># with this object as param</span></div><div class="line">                cb = ctypes.cast(UC_HOOK_CODE_CB(self._hookcode_cb), UC_HOOK_CODE_CB)</div><div class="line">                status = _uc.uc_hook_add(</div><div class="line">                    self._uch, ctypes.byref(_h2), htype, cb,</div><div class="line">                    ctypes.cast(self._callback_count, ctypes.c_void_p),</div><div class="line">                    ctypes.c_uint64(begin), ctypes.c_uint64(end)</div><div class="line">                )</div><div class="line">            <span class="keyword">elif</span> htype &amp; (uc.UC_HOOK_MEM_READ_UNMAPPED |  <span class="comment"># 無効なメモリアクセス</span></div><div class="line">                          uc.UC_HOOK_MEM_WRITE_UNMAPPED |</div><div class="line">                          uc.UC_HOOK_MEM_FETCH_UNMAPPED |</div><div class="line">                          uc.UC_HOOK_MEM_READ_PROT |      <span class="comment"># 保護された領域へのメモリアクセス</span></div><div class="line">                          uc.UC_HOOK_MEM_WRITE_PROT |</div><div class="line">                          uc.UC_HOOK_MEM_FETCH_PROT):</div><div class="line">                cb = ctypes.cast(UC_HOOK_MEM_INVALID_CB(self._hook_mem_invalid_cb), UC_HOOK_MEM_INVALID_CB)</div><div class="line">                status = _uc.uc_hook_add(</div><div class="line">                    self._uch, ctypes.byref(_h2), htype, cb,</div><div class="line">                    ctypes.cast(self._callback_count, ctypes.c_void_p),</div><div class="line">                    ctypes.c_uint64(begin), ctypes.c_uint64(end)</div><div class="line">                )</div><div class="line">            <span class="keyword">else</span>: <span class="comment"># メモリ読み書き</span></div><div class="line">                cb = ctypes.cast(UC_HOOK_MEM_ACCESS_CB(self._hook_mem_access_cb), UC_HOOK_MEM_ACCESS_CB)</div><div class="line">                status = _uc.uc_hook_add(</div><div class="line">                    self._uch, ctypes.byref(_h2), htype, cb,</div><div class="line">                    ctypes.cast(self._callback_count, ctypes.c_void_p),</div><div class="line">                    ctypes.c_uint64(begin), ctypes.c_uint64(end)</div><div class="line">                )</div><div class="line"></div><div class="line">        <span class="comment"># save the ctype function so gc will leave it alone.</span></div><div class="line">        self._ctype_cbs[self._callback_count] = cb</div><div class="line"></div><div class="line">        <span class="keyword">if</span> status != uc.UC_ERR_OK:</div><div class="line">            <span class="keyword">raise</span> UcError(status)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> _h2.value</div></pre></td></tr></table></figure>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　PythonからUnicornを利用する方法を紹介した．<br>　結局のところctypesでラップされており，こうした機能がどのようにして実行されるのかは本体のコードを読まなければ理解できない．そういうわけで，そのうちUnicorn本体の実装を読んでいくことにする．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　※Rackサーバの方のUnicornではない．&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;　&lt;a href=&quot;http://www.unicorn-e
    
    </summary>
    
    
      <category term="dynamic binary translation" scheme="http://ntddk.github.io/tags/dynamic-binary-translation/"/>
    
  </entry>
  
  <entry>
    <title>イスラエルのサイバーセキュリティ事情</title>
    <link href="http://ntddk.github.io/2016/06/29/cyber-security-in-israel/"/>
    <id>http://ntddk.github.io/2016/06/29/cyber-security-in-israel/</id>
    <published>2016-06-29T13:30:00.000Z</published>
    <updated>2016-06-30T00:46:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>　これはマルウェアに感染した端末の基板で構成されたトロイの木馬．国際会議<a href="http://cyberweek.tau.ac.il" target="_blank" rel="external">Cyber Week</a>の展示の一環．</p>
<p><img src="/image/israel/cyberhorse.jpg" width="100%" height="100%"></p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>　先週，イスラエル外務省からの招待でイスラエルのサイバーセキュリティ産業の視察に参加した．<br>　視察の参加者は日本政府・重要インフラ・セキュリティ業界関係に大別される．視察の目的は彼らにイスラエルの起業文化とサイバーセキュリティ技術を伝え，相互理解を図ることにあった．そんな視察になぜ一介のモラトリアム大学生でしかない私が潜り込めたのかというと，イスラエル外務省をハックしたから——というのは嘘．昨年発表した<a href="http://codeblue.jp/" target="_blank" rel="external">CODEBLUE</a>というセキュリティカンファレンスのオーガナイザーにイスラエル大使館から打診があり，若者枠に組み込まれたという経緯である．なんと旅費はイスラエル外務省の負担．<br>　そういうわけで，記憶が錆びつかないうちに，イスラエルのサイバーセキュリティ事情を紹介したい．</p>
<h1 id="総括"><a href="#総括" class="headerlink" title="総括"></a>総括</h1><p>　最初にまとめてしまうと，イスラエルのサイバーセキュリティ産業は小国ゆえのフットワークの軽さがあってこそ成り立っている．とりわけ，以下の要素に負うところが大きい：</p>
<ul>
<li>徴兵制による人的つながり</li>
<li>R&amp;Dを重視したスタートアップのエコシステム</li>
<li>危機感</li>
</ul>
<p>したがって，そのまま日本にあてはめて考えることはできないが，柔軟な組織間連携の体制は間違いなく参考になるはずだ．</p>
<h2 id="徴兵制による人的つながり"><a href="#徴兵制による人的つながり" class="headerlink" title="徴兵制による人的つながり"></a>徴兵制による人的つながり</h2><p>　イスラエルでは，18歳から男性は36ヶ月，女性は21ヶ月にわたる兵役が義務づけられている．高校を卒業して大学に進学するのではなく，まず国防軍 (IDF) に組み込まれるというわけだ．ツアーガイドの方が「6ヶ月間の基礎訓練が終わってはじめて教官が名前を教えてくれる．それからは下の名前で呼び合う，生涯にわたる仲になる」というエモい話を聞かせてくれたが，この兵役での人的つながりが，イスラエルのサイバーセキュリティ産業に多大な影響を及ぼしている．<strong>分野を越えたコネクションが形成され，小国ゆえに誰がどのように優秀か国が一元的に把握できる</strong>ためである．<br>　とりわけ優秀な人材は<a href="https://en.wikipedia.org/wiki/Talpiot_program" target="_blank" rel="external">タルピオット</a>という3年で数学と物理学の学位および中尉の階級を取得する人材育成プログラムに組み込まれるか，<a href="https://en.wikipedia.org/wiki/Unit_8200" target="_blank" rel="external">8200部隊</a>という諜報部隊——かのStuxnetをNSAと共同で開発したといういわくつきの——に配属され，それらの出身者であることがキャリアパス上の絶大なアピールポイントとなっている．<br>　このように兵役による能力のフィルタリングがあるため，学生は日本のように就職活動をするのではなく，優秀だった順に政府機関や企業から声がかかるという．多くの企業は軍との直接的なつながりを持たないが，重要インフラ事業者や政府のサイバーセキュリティ関連機関，軍需企業は軍と密接に結びついていて，盛んに情報を共有しているという．<br>　軍との関係は兵役が終わったらそれきりというわけではない．たとえば視察時に開催されていたCyber Week併設の全年齢対象CTFでは，空軍が（おそらくリクルートを兼ねて）作成した問題が用いられていた．開始早々に見学した問題の内容としてはMetasploitを用いるペンテストのようなものや，Androidアプリケーションのリバースエンジニアリングなど．</p>
<h2 id="R-amp-Dを重視したスタートアップのエコシステム"><a href="#R-amp-Dを重視したスタートアップのエコシステム" class="headerlink" title="R&amp;Dを重視したスタートアップのエコシステム"></a>R&amp;Dを重視したスタートアップのエコシステム</h2><p>　さて，イスラエル政府が擁するサイバーセキュリティ関連機関は軍を除くと次のような構造になっている：</p>
<ul>
<li>イスラエル首相府<ul>
<li><a href="http://www.pmo.gov.il/English/PrimeMinistersOffice/DivisionsAndAuthorities/cyber/Pages/default.aspx" target="_blank" rel="external">国家サイバー局 (NCB: National Cyber Bureau)</a><ul>
<li><a href="http://www.cyberspark.org.il/" target="_blank" rel="external">CyberSpark</a></li>
<li><a href="https://icrc.tau.ac.il/" target="_blank" rel="external">ICRC (Blavatnik Interdisciplinary Cyber Research Center)</a></li>
<li>IC3 (Israel Cyber Companies Consortium)</li>
</ul>
</li>
<li>国家サイバーセキュリティ委員会 (NCSA: National Cyber Security Authority)<ul>
<li><a href="https://il-cert.org.il/" target="_blank" rel="external">IL-CERT</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>　国家サイバー局は日本でいうところの<a href="http://www.nisc.go.jp/" target="_blank" rel="external">内閣サイバーセキュリティセンター (NISC) </a>的な立ち位置で，サイバーセキュリティ関連の産業育成と防衛について政府に進言する立場を担っている．国家サイバーセキュリティ委員会は各種標準化団体のほかCSIRTとしてIL-CERTを抱える機関である．<strong>IL-CERTではSTIX/TAXIIを用いた情報共有体制が確立されており，検体の挙動をタグベースで共有することで，機微情報を漏らすことなく複数機関にまたがったインシデントに対応できるようになっている</strong>らしい．視察では，ウェブベースの情報共有ツールも紹介された．<br>　国家サイバー局の下部にあるCyberSparkはイスラエル南部の中心都市ベエルシェバにある研究開発特区・機関で，ベンチャーキャピタル，国内のスタートアップ企業のほか，IBMやLockheed Martinといった多国籍企業，隣接するベン・グリオン大学から構成される．ネゲブ砂漠の開発を進めつつ，<strong>競合他社を大学との共同研究という形でまとめ，その研究をスタートアップとして興す</strong>ことを目的としているようだ．ICRCもまたテルアビブ大学を中心とした同様の学際的研究機関で，Cyber Weekのオーガナイザーでもあった．これらは東大京大と産総研やNII, NICTが直接つながっているようなものだと思えばよいが，研究内容を即座にスタートアップ化する点は興味深い．<br>　IC3は国営の軍需企業<a href="http://www.iai.co.il/" target="_blank" rel="external">IAI (Israel Aerospace Industries) </a>を中心としたジョイントベンチャーで，2020年の東京オリンピックに向けた日本市場開拓を虎視眈々とねらっている．<br>　この構造には，政府機関のほか次のようなベンチャーキャピタルとスタートアップ推進企業が噛んでいる：</p>
<ul>
<li><a href="https://www.bvp.com/" target="_blank" rel="external">BVP (Bessemer Venture Partners)</a></li>
<li><a href="www.jvpvc.com/">JVP (Jerusalem Venture Partners)</a></li>
<li><a href="http://www.team8.vc/" target="_blank" rel="external">Team8</a></li>
</ul>
<p>　BVPはアメリカ最古のベンチャーキャピタルだが，イスラエルのサイバーセキュリティ産業に熱視線を投げかけており，後述のTeam8や<a href="http://www.illusivenetworks.com/" target="_blank" rel="external">illusive networks</a>などに投資している．<br>　JVPはイスラエルのベンチャーキャピタルで，CyberSparkを構成する企業のひとつである．Cyber Labsという研究部門も設けており，軍と連携を図りつつ，国内のスタートアップをいくつも育成してきた．興味深かったのは<a href="http://www.cyactive.com/" target="_blank" rel="external">CyActive</a>なる企業の取り組み．遺伝的アルゴリズムを用いて既存のマルウェアを変異させることで，亜種そして未来のマルウェアに対して頑強なヒューリスティックエンジンを開発するといった研究を行っているそうだ．折しも今年のはじめに国際会議NDSSにおいて（PDFファイルに限定してはいるものの）<a href="http://www.internetsociety.org/sites/default/files/11_2-ndss2016-slides.pdf" target="_blank" rel="external">類似の研究</a>が発表されており，今後の動向に注目したい．<br>　Team8はサイバーセキュリティのR&amp;Dをスタートアップ化することを目的としたインキュベーション企業で，illusive networksの母体である．Team8の創設者はかの8200部隊出身者であり，軍で培った問題意識やマネジメント能力が糧となっていると語る．<br>　これらの企業の支援のもと興ったスタートアップは，狭いイスラエル国内でシェアを握るのではなく，海外市場の開拓とCyberSparkに参画しているような多国籍企業へのイグジットを目的としている．<br>　しかしこうした産学軍連携のスタートアップ促進体制は，<strong>イスラエルが小国であり，かつ物騒な隣人に恵まれていて，軍が産業の中核に食い込んでいるという特性</strong>（それは同時に「<strong>だからこそ</strong>イスラエルはサイバーセキュリティ先進国である」というイメージを抱かせることにも寄与している）あってこそだろう．</p>
<h2 id="危機感"><a href="#危機感" class="headerlink" title="危機感"></a>危機感</h2><p>　彼らの口ぶりからすると，やはり周辺諸国との関係がサイバーセキュリティ産業の発展を後押ししているようだ．<br>　たとえば，<a href="https://www.iec.co.il/" target="_blank" rel="external">イスラエル電力公社</a>は国内の電力を一手に担っており，発電所がサイバー攻撃によって停止してしまえばイスラエルの国防は壊滅的な打撃を被る（もちろん周辺諸国からの給電は望めない）．したがって彼らのサイバーセキュリティに対する意識はきわめて高い．彼らのSOCは各施設に派遣されたオペレーターとそこからのアラートを分析する本社施設に分散して設置されており，情報の集約（縮約）と即時共有に力を入れている様子がうかがえた．<br>　また，電力公社の子会社として，電力制御システムに対するサイバー攻撃とその防御の訓練施設<a href="http://www.cybergym.co.il/" target="_blank" rel="external">CyberGym</a>がある．CyberGymは電力公社における訓練のみならず，他社からの依頼に応じてその運用環境を可能な限り再現，かつ攻撃ベクタを強調した環境を用いた5日ほどの演習サービスを提供している．演習場には小型のプラント装置が設置されており，攻撃によってはそこから水が噴き出してくるという．そうした物理的な（！）非常事態への対応力を養うことも，演習の目的であるようだ．<br>　電力公社のほか，IAIは企業のネットワークに対するサイバー攻撃演習サービスを提供している．IAIの演習では，仮想マシン・仮想ネットワーク上の演習環境を用いて，シナリオベースで攻撃への対応を学べるようになっている．<br>　電力公社・IAIとも，ベンダを問わずハードウェア・サーバソフトウェアを柔軟に組み替えられる環境を提供しており，有事——<strong>つねに有事ともいえる</strong>——に備えた訓練に余念がない．</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　ざっくりとではあるが，イスラエルのサイバーセキュリティ事情を紹介してきた．<br>　国防上の要請があるため，どうしても緊張感は漂っているし，そこばかり強調したような文章になってしまったが，いい国だと思う．海は綺麗だし，食事も野菜が多く健康的で美味（帰国したらすぐに口内炎ができてしまった）．なにより，技術者が必要とされ，尊敬される風土である．サイバーセキュリティ関連の事業を興したいのであれば，移住を十分検討していい．とりあえずビザ申請しておくか……．<br>　はじめに断ったとおり，私はインテリジェンス活動や最新の脅威分析に携わっているわけではない，しがない学生なので，提示できる情報の解像度はこの程度である．同行した<a href="https://www.facebook.com/dnobori/posts/997712146972091?pnref=story" target="_blank" rel="external">ソフトイーサ登さんのレポート</a>も参照されたし．<br>　そのほかメモと感想：</p>
<ul>
<li>テルアビブ大学の学生のポスターセッション，みんな（セキュリティ分野なのに）機械学習やってて海外でも流行ってるんだなと思った</li>
<li>何の変哲もない（外には看板など一切なし）アパートの一区画を徴発して国家サイバー局が運営されていて流石にクソ興奮した，まあ見学者向けのダミーかもしれないが</li>
<li>イスラエル電力公社のSOCではおよそオペレーターの役には立たないだろう攻撃元の国をGoogle Mapにマッピングするシステムが表示されていたが，「可視化はきわめて重要だ．なぜなら，視察にきた海外政府関係者におたくの国からこれほど攻撃されている．ゆえに～とアピールできるからだ」と語っていたのがよかった．nicterやWADJETもそんな感じに使えるのかな</li>
<li>在イスラエル日本国大使館大使公邸にお邪魔したら入口の扉が3つあってモンティ・ホール問題かよと思った</li>
<li>飲み屋でチェイサーに水 (water) を頼んだら毎回ウォッカ (vodka) が出てくるので英語力の低さを呪っていたらロシア系移民のふざけた風習だった</li>
<li>エルサレムもテルアビブも治安としては渋谷とかその辺程度</li>
<li>人工知能による意思決定の文脈でadversarial examplesの問題を引き合いに出していた人がいて，やはりセキュリティ分野ではルールベースというか決定木に起こせないとトリアージが効かないから難しいなと思った</li>
<li>死海の名前の由来は「塩分濃度が高すぎて魚が住めないから」だそうだが，湖水の比重が高く多少の風では波立たないため時間が停まっているように見える様子が死を連想させる</li>
<li>IED兵士はみんなタボールを抱えているのかと思ったらベエルシェバの検問を除いて警察と同様みなCAR-15系にジェリコだった</li>
<li>イスラエルはLGBTに寛容で多様性を尊重する国であるというイメージ戦略なのだろうか，カーナビの地図上でLGBT区域が緑色に表示されるらしい</li>
<li>ベン・グリオン国際空港の端末はWindows + IE9でアエロフロート機内の端末はLinuxベース</li>
<li>トランジットで立ち寄ったシェレメチェボ空港での入出国審査はロシアだし「<a href="http://store.steampowered.com/app/239030/" target="_blank" rel="external">Papers, Please</a>」のような感じだと思っていたらそんなことはなかった</li>
<li>イスラエル出国審査時にパスポートの顔写真と顔が一致するかスキャンする（？）装置があったが，しっかりaccuracyが出るわけないのでおそらくはハリボテで，裏で人間がチェックしているのだろう</li>
<li>アラブ諸国に入国できなくなるという噂のパスポートへのスタンプは廃止されていた</li>
</ul>
<p>　はい．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　これはマルウェアに感染した端末の基板で構成されたトロイの木馬．国際会議&lt;a href=&quot;http://cyberweek.tau.ac.il&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyber Week&lt;/a&gt;の展示の一環．&lt;/p&gt;
&lt;p&gt;&lt;img
    
    </summary>
    
    
      <category term="intelligence" scheme="http://ntddk.github.io/tags/intelligence/"/>
    
  </entry>
  
  <entry>
    <title>写真から説明文を自動生成するbotを作った</title>
    <link href="http://ntddk.github.io/2016/03/26/neural-image-caption-generator-twitter-bot/"/>
    <id>http://ntddk.github.io/2016/03/26/neural-image-caption-generator-twitter-bot/</id>
    <published>2016-03-25T15:30:00.000Z</published>
    <updated>2017-12-14T07:40:54.601Z</updated>
    
    <content type="html"><![CDATA[<p><center><br><a class="twitter-timeline" href="https://twitter.com/img2cap" data-widget-id="713361832895860739" target="_blank" rel="external">@img2capさんのツイート</a></center></p>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

<h1 id="これはなに"><a href="#これはなに" class="headerlink" title="これはなに"></a>これはなに</h1><p>　<code>@img2cap file</code>という形式で画像を投げつけると説明文をつけ加えて返信するだけのTwitter bot.</p>
<h1 id="しくみ"><a href="#しくみ" class="headerlink" title="しくみ"></a>しくみ</h1><p>　CNN + LSTM.<br>　以下の論文や実装を参考にした．裏ではChainerが動いている．</p>
<ul>
<li>論文<ul>
<li><a href="http://arxiv.org/abs/1411.4555" target="_blank" rel="external">[1411.4555] Show and Tell: A Neural Image Caption Generator</a></li>
</ul>
</li>
<li>実装<ul>
<li><a href="https://github.com/apple2373/chainer_caption_generation" target="_blank" rel="external">apple2373/chainer_caption_generation: Caption generation from images using deep neural net</a></li>
<li><a href="https://github.com/dsanno/chainer-image-caption" target="_blank" rel="external">dsanno/chainer-image-caption</a></li>
</ul>
</li>
<li>データセット<ul>
<li><a href="http://mscoco.org" target="_blank" rel="external">Microsoft COCO</a>を<a href="https://gist.github.com/ksimonyan/3785162f95cd2d5fee77#file-readme-md" target="_blank" rel="external">VGG_ILSVRC_19_layers</a>で<a href="http://cs.stanford.edu/people/karpathy/deepimagesent/coco.zip" target="_blank" rel="external">学習したもの</a></li>
</ul>
</li>
</ul>
<p>　はじめは論文通りの活性化関数と勾配法を試してみたが，dsanno氏のいうようにSGDよりAdamの方が高速．MomentumSGDと比べてもみたが即Adam最高！　という気分にさせられた．AdamがそもそもAdaGradとRMSPropのいいとこどりらしいので，その両者は試していない．なおネットワーク構成は論文のまま．<br>　データセットに含まれているのは<strong>写真</strong>8万枚とその説明文だけ．よってTwitterの各位がいくらイラストを投げつけようと無駄な話で，その手のニーズに対応するには<a href="https://nico-opendata.jp/ja/index.html" target="_blank" rel="external">ニコニコ静画のデータセット</a>あたりを使う必要がありそう．これには画像とそのタグ，コメントを学習したモデルが含まれているそうだが，説明文の生成というタスクに向けてどう転移学習させるか目処は立っていない．<br>　当然ながら学習データと実際に各位が投げつけてくるデータの分布は全く異なるし，困ったものだ．</p>
<h1 id="謝辞"><a href="#謝辞" class="headerlink" title="謝辞"></a>謝辞</h1><p>　お遊びにGPU環境を貸してくれた<a href="https://twitter.com/georgioush" target="_blank" rel="external">@georgioush</a>, <a href="https://twitter.com/dasoran" target="_blank" rel="external">@dasoran</a>両氏に感謝．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;a class=&quot;twitter-timeline&quot; href=&quot;https://twitter.com/img2cap&quot; data-widget-id=&quot;713361832895860739&quot; target=&quot;_blank&quot; rel=&quot;exter
    
    </summary>
    
    
      <category term="machine learning" scheme="http://ntddk.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>ニューラルネットと脳の違いが知りたくて</title>
    <link href="http://ntddk.github.io/2016/03/21/book-guide-for-computational-neuroscience/"/>
    <id>http://ntddk.github.io/2016/03/21/book-guide-for-computational-neuroscience/</id>
    <published>2016-03-20T15:30:00.000Z</published>
    <updated>2017-12-14T07:40:23.725Z</updated>
    
    <content type="html"><![CDATA[<p>　読書メモ．</p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>　人間の脳を模したニューラルネットの手法，<ruby>深層学習<rt>ディープラーニング</rt></ruby>がめざましい成果を挙げている–といった謳い文句をよく目にする．だが機械学習の専門書を紐解いても出てくるのはロジスティック回帰のお化けばかり．<br>　われらがPRMLのニューラルネットを扱う章にはこうある．</p>
<blockquote>
<p>しかしながら，パターン認識という実際的な応用の観点からは，生物学的な現実性などは全く不要な制約である．<br>　　　　　　　　　　　　　　　　　　　　　　　　– C.M.ビショップ『<a href="http://www.amazon.co.jp/dp/4621061224" target="_blank" rel="external">パターン認識と機械学習 上</a>』 (p.226)</p>
</blockquote>
<p>　では，機械学習の文脈で言うところのニューラルネットと脳はどれほど異なっているのだろうか？</p>
<h1 id="ニューラルネットと脳の違い"><a href="#ニューラルネットと脳の違い" class="headerlink" title="ニューラルネットと脳の違い"></a>ニューラルネットと脳の違い</h1><p>　結論から言えば全然違うわけだが，ざっくり以下の三点から整理できる（と思う）：</p>
<ul>
<li>ニューロンのモデル</li>
<li>ネットワーク構造</li>
<li>微分計算の手法</li>
</ul>
<h2 id="ニューロンのモデル"><a href="#ニューロンのモデル" class="headerlink" title="ニューロンのモデル"></a>ニューロンのモデル</h2><p>　現在広く普及している多層パーセプトロンは，単純な差分方程式であるMcCulloch-Pittsモデルをベースに，層を重ねたとき微分できるような活性化関数を組み合わせている．だがそれ以外にも膜電位が変動するメカニズムを考慮した：</p>
<ul>
<li>Hodgkin-Huxleyモデル</li>
<li>FitzHugh-Nagumoモデル</li>
<li>Izhikevichモデル</li>
</ul>
<p>などが提案されている–というようなことは機械学習の道具としてニューラルネットを扱っている本にはあまり書かれていない．ひとまず手元にあった：</p>
<ul>
<li>はじパタこと『<a href="http://www.amazon.co.jp/dp/4627849710/" target="_blank" rel="external">はじめてのパターン認識</a>』</li>
<li>わかパタこと『<a href="http://www.amazon.co.jp/dp/4274131491/" target="_blank" rel="external">わかりやすいパターン認識</a>』</li>
<li>『<a href="http://www.amazon.co.jp/dp/B016Q22IX2/" target="_blank" rel="external">ITエンジニアのための機械学習理論入門</a>』</li>
<li>PRMLこと『<a href="http://www.amazon.co.jp/dp/4621061224/" target="_blank" rel="external">パターン認識と機械学習</a>』</li>
<li>青色の『<a href="http://www.amazon.co.jp/dp/B018K6C99A/" target="_blank" rel="external">深層学習</a>』</li>
<li>紫色の『<a href="http://www.amazon.co.jp/dp/B01B768QJW/" target="_blank" rel="external">深層学習</a>』</li>
</ul>
<p>はモデル名に言及しておらず，McCulloch-Pittsモデルを紹介していたのは：</p>
<ul>
<li>『<a href="http://www.amazon.co.jp/dp/4274218023/" target="_blank" rel="external">進化計算と深層学習</a>』</li>
<li>『<a href="http://www.amazon.co.jp/dp/406153825X" target="_blank" rel="external">イラストで学ぶディープラーニング</a>』</li>
</ul>
<p>だけだった．<br>　ちなみにこの中だと機械学習マジで何もわからんって人はまずサンプルコードを動かしながら『<a href="http://www.amazon.co.jp/dp/B016Q22IX2/" target="_blank" rel="external">ITエンジニアのための機械学習理論入門</a>』を読むとよい．深層学習については<a href="http://www.amazon.co.jp/dp/B01B768QJW/" target="_blank" rel="external">紫色の本</a>が好み．<a href="http://www.amazon.co.jp/dp/B018K6C99A/" target="_blank" rel="external">青色の本</a>は数式が追いにくい（どっちもどっちだが）上，深層学習以前と以後でどのような変遷があったのか不明瞭で，『<a href="http://www.amazon.co.jp/dp/4274218023/" target="_blank" rel="external">進化計算と深層学習</a>』は概論のみ．『<a href="http://www.amazon.co.jp/dp/406153825X" target="_blank" rel="external">イラストで学ぶディープラーニング</a>』は読みやすく，汎化性能を向上させる方法も載っていて実践的ではあるが，RNNに触れられていないのが惜しい．<br>　さて，それではニューロンのモデルが複雑であれば脳に近いのかというと，どうやらそういうわけでもないらしい．たとえば複雑かつイオンコンダクタンスの挙動が緻密なHodgkin-Huxleyモデルは，ヤリイカの軸索のニューロンをモデル化したものだが，これはヒトの大脳皮質とはタイプが異なるようだ．<br>　しかし，McCulloch-Pittsモデルには，STDP (Spike Timing Dependent Plasticity, スパイク時刻依存シナプス可塑性) を表現できていないという問題点がある．STDPはニューロンの発火タイミングに応じて重みを更新する規則で，脳はこれにより時系列を学習しているとされる．<br>　こういったことを把握するためにいくつか神経科学の本を読んでみた．だいたいの書籍がまず最初にニューロンのモデルを紹介し，それからニューロンの同期に章を割き，つづいて脳の任意の部位の詳説という体裁をとっている．</p>
<ul>
<li>『<a href="http://www.amazon.co.jp/dp/4130643010/" target="_blank" rel="external">脳の計算論</a>』</li>
<li>『<a href="http://www.amazon.co.jp/dp/4130623044/" target="_blank" rel="external">理工学系からの脳科学入門</a>』</li>
<li>『<a href="http://www.amazon.co.jp/dp/B006YKU67M/" target="_blank" rel="external">臨時別冊数理科学 SGCライブラリ 60 「計算神経科学への招待」脳の学習機構の理解を目指して 2007年 12月号</a>』</li>
<li>『<a href="http://www.amazon.co.jp/dp/478281514X/" target="_blank" rel="external">脳の計算理論</a>』</li>
</ul>
<p>など．全部読んだ感想としては『<a href="http://www.amazon.co.jp/dp/4130643010/" target="_blank" rel="external">脳の計算論</a>』が最も明快かつ簡潔で，STDPにも詳しく，この記事で触れている範囲のことはほぼカバーしている．<br>　Izhikevichモデルの考案者も『<a href="http://www.izhikevich.org/publications/dsn/index.htm" target="_blank" rel="external">Dynamical Systems in Neuroscience: The Geometry of Excitability and Bursting</a>』という本を書いているのだが，これは難しそう．<br>　本腰を入れて学ぶには「<a href="http://gaya.jp/research/LTP-papers.htm" target="_blank" rel="external">シナプス可塑性の初心者へ　推薦論文リスト</a>」を消化すべきなのだろう．</p>
<h2 id="ネットワーク構造"><a href="#ネットワーク構造" class="headerlink" title="ネットワーク構造"></a>ネットワーク構造</h2><p>　パーセプトロンは小脳に，BESOMは大脳皮質に，畳み込みニューラルネットは受容野に，TD学習は大脳基底核に似ていると言われている．ではどこが．<br>　小脳についてはさきほど挙げた『<a href="http://www.amazon.co.jp/dp/478281514X/" target="_blank" rel="external">脳の計算理論</a>』がよい．この<a href="http://www.cns.atr.jp/~kawato/Japanese.html" target="_blank" rel="external">著者</a>は小脳による運動の内部モデル獲得というテーマの大家だそうで，公開されている無料のPDFでその足跡が追える．Hodgkin-Huxleyモデルの解説も丁寧．あわせて“<a href="http://ci.nii.ac.jp/naid/10028190905" target="_blank" rel="external">現代の小脳パーセプトロン仮説</a>”も読みたい．<br>　大脳皮質については<a href="https://staff.aist.go.jp/y-ichisugi/j-index.html" target="_blank" rel="external">BESOMの人</a>の「<a href="https://staff.aist.go.jp/y-ichisugi/rapid-memo/brain-deep-learning.html" target="_blank" rel="external">大脳皮質と deep learning の類似点と相違点</a>」がとにかくわかりやすい．やはり正則化が重要なようだが，それについては「<a href="http://blog.livedoor.jp/brain_network/archives/50968197.html" target="_blank" rel="external">脳とネットワーク/The Swingy Brain:まとめてスパースコーディング - livedoor Blog（ブログ）</a>」に挙げられている論文を読むとよさそう．<br>　さらなる部位との関連については，「<a href="https://staff.aist.go.jp/y-ichisugi/brain-archi/j-index.html" target="_blank" rel="external">全脳アーキテクチャ解明に向けて</a>」から辿れる資料が親切だった．特に「<a href="http://www.slideshare.net/sato0427/wba3rd-satonao" target="_blank" rel="external">海馬神経回路の機能ダイナミクス</a>」で触れられている内容は元論文の古さとは裏腹にあまり書籍では見ない．</p>
<h2 id="微分計算の手法"><a href="#微分計算の手法" class="headerlink" title="微分計算の手法"></a>微分計算の手法</h2><p>　みんな大好き誤差逆伝播法は脳では使われていない．じゃあどうすればいいかというと：</p>
<ul>
<li>『<a href="http://www.amazon.co.jp/dp/0262650541" target="_blank" rel="external">Computational Explorations in Cognitive Neuroscience: Understanding the Mind by Simulating the Brain</a>』<ul>
<li>5章</li>
</ul>
</li>
<li>“<a href="http://arxiv.org/abs/1412.7525" target="_blank" rel="external">Difference Target Propagation</a>”<ul>
<li><a href="http://deeplearning.jp/wp-content/uploads/2014/04/20150826_suzuki.pdf" target="_blank" rel="external">日本語の解説</a></li>
</ul>
</li>
<li>“<a href="http://arxiv.org/abs/1502.04156" target="_blank" rel="external">Towards Biologically Plausible Deep Learning</a>”</li>
</ul>
<p>がある．後者2つは深層学習の大家であるBengioらの研究で，ここでSTDPが重要となってくるらしい．生物学的な妥当な深層学習まであと何年だろうか．</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　機械学習のことは多少わかるけど（計算論的）神経科学については何から勉強すればいいのかもわからないというところから，騙し騙しとはいえ論文を読める程度になるにはこのあたりを読むとよいのではないかと思います．<br>　なお，このブログに貼られているAmazonリンクはいずれも素のリンクです．ご安心ください．アフィリエイトリンクを貼りまくって小銭を稼ごうと画策しましたが審査に落ちました．</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　読書メモ．&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;　人間の脳を模したニューラルネットの手法，&lt;ruby&gt;深層学習&lt;rt&gt;ディープラーニング&lt;/rt
    
    </summary>
    
    
      <category term="machine learning" scheme="http://ntddk.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>寿司とメモ化再帰</title>
    <link href="http://ntddk.github.io/2016/03/02/sushi-and-memorized-recursion/"/>
    <id>http://ntddk.github.io/2016/03/02/sushi-and-memorized-recursion/</id>
    <published>2016-03-02T06:30:00.000Z</published>
    <updated>2017-12-14T07:41:58.077Z</updated>
    
    <content type="html"><![CDATA[<p>　わざわざブログに書くほどでもないことから書いていかないとなまるので書く．</p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>　寿司 虚空編[1]第2話で登場したアッカーマン関数というかS変換を実装する．</p>
<h1 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h1><p>　<span>$x, y$</span><!-- Has MathJax -->を非負整数として，</p>
<span>$$Ack(x,y)=
  \begin{cases}
   y+1 &amp; \text{if}\ x=0, \\
   Ack(x-1,1) &amp; \text{if}\ x&gt;0, y=0, \\
   Ack(x-1,Ack(x,y-1)) &amp; \text{otherwise}.
  \end{cases}$$</span><!-- Has MathJax -->
<p>　恥ずかしながら「Union-Find木のならし計算量はアッカーマン関数の逆関数となる」といった説明でしか見たことがない．</p>
<h1 id="実験"><a href="#実験" class="headerlink" title="実験"></a>実験</h1><p>　何も考えずに<span>$Ack(3, 3)$</span><!-- Has MathJax -->を実装．なお記号は寿司 虚空編に準拠．</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">  <span class="keyword">return</span> x + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">(m, n)</span>:</span></div><div class="line">  <span class="keyword">if</span> m == <span class="number">0</span> <span class="keyword">and</span> n &gt; <span class="number">0</span>:</div><div class="line">    <span class="keyword">return</span> f(n)</div><div class="line">  <span class="keyword">elif</span> m &gt; <span class="number">0</span> <span class="keyword">and</span> n == <span class="number">0</span>:</div><div class="line">    <span class="keyword">return</span> b(m - <span class="number">1</span>, <span class="number">1</span>) </div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    <span class="keyword">return</span> b(m - <span class="number">1</span>, b(m, n - <span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(x)</span>:</span></div><div class="line">  <span class="keyword">return</span> b(x, x)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">print</span> g(<span class="number">3</span>) <span class="comment"># Ack(3, 3)</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">  main()</div></pre></td></tr></table></figure>
<p>　実行してみる．ついでにプロファイリング．</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># python -m cProfile -s time ./sushi.py</div><div class="line">61</div><div class="line">         3624 function calls (1193 primitive calls) in 0.006 seconds</div><div class="line"></div><div class="line">   Ordered by: internal time</div><div class="line"></div><div class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</div><div class="line">   2432/1    0.005    0.000    0.006    0.006 sushi.py:4(b)</div><div class="line">     1188    0.001    0.000    0.001    0.000 sushi.py:1(f)</div><div class="line">        1    0.000    0.000    0.006    0.006 sushi.py:15(main)</div><div class="line">        1    0.000    0.000    0.006    0.006 sushi.py:1(&lt;module&gt;)</div><div class="line">        1    0.000    0.000    0.006    0.006 sushi.py:12(g)</div><div class="line">        1    0.000    0.000    0.000    0.000 &#123;method &apos;disable&apos; of &apos;_lsprof.Profiler&apos; objects&#125;</div></pre></td></tr></table></figure>
<p>　このプログラムで<span>$Ack(x, y)$</span><!-- Has MathJax -->を計算しようとすると<code>RuntimeError: maximum recursion depth exceeded</code>となって死ぬ．<br>　そこで次の手法を導入する：</p>
<ul>
<li>スタック制限の緩和</li>
<li>再帰深度制限の緩和</li>
<li>メモ化再帰</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys, threading, thread</div><div class="line"></div><div class="line">memo = &#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">  <span class="keyword">return</span> x + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">(m, n)</span>:</span></div><div class="line">  <span class="keyword">if</span> (m, n) <span class="keyword">not</span> <span class="keyword">in</span> memo:</div><div class="line">    memo[(m, n)] = (</div><div class="line">      f(n)        <span class="keyword">if</span> m == <span class="number">0</span> <span class="keyword">and</span> n &gt; <span class="number">0</span> <span class="keyword">else</span></div><div class="line">      b(m - <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">if</span> m &gt; <span class="number">0</span> <span class="keyword">and</span> n == <span class="number">0</span> <span class="keyword">else</span></div><div class="line">      b(m - <span class="number">1</span>, b(m, n - <span class="number">1</span>))</div><div class="line">    )</div><div class="line">  <span class="keyword">return</span> memo[(m,n)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(x)</span>:</span></div><div class="line">  <span class="keyword">return</span> b(x, x)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">print</span> g(<span class="number">3</span>)   <span class="comment"># 61</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">  sys.setrecursionlimit(<span class="number">1024</span>*<span class="number">1024</span>)</div><div class="line">  thread.stack_size(<span class="number">128</span>*<span class="number">1024</span>*<span class="number">1024</span>)</div><div class="line">  threading.Thread(target=main).start()</div></pre></td></tr></table></figure>
<p>　やる．</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"># python -m cProfile -s time ./sushi.py</div><div class="line">61</div><div class="line">         415 function calls in 0.002 seconds</div><div class="line"></div><div class="line">   Ordered by: internal time</div><div class="line"></div><div class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</div><div class="line">        1    0.000    0.000    0.002    0.002 threading.py:1(&lt;module&gt;)</div><div class="line">        1    0.000    0.000    0.000    0.000 collections.py:1(&lt;module&gt;)</div><div class="line">        1    0.000    0.000    0.002    0.002 sushi.py:1(&lt;module&gt;)</div><div class="line">        7    0.000    0.000    0.000    0.000 &#123;method &apos;acquire&apos; of &apos;thread.lock&apos; objects&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 heapq.py:31(&lt;module&gt;)</div><div class="line">       91    0.000    0.000    0.000    0.000 &#123;method &apos;append&apos; of &apos;list&apos; objects&#125;</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_parse.py:379(_parse)</div><div class="line">       28    0.000    0.000    0.000    0.000 sre_parse.py:182(__next)</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_compile.py:359(_compile_info)</div><div class="line">       73    0.000    0.000    0.000    0.000 &#123;len&#125;</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_compile.py:32(_compile)</div><div class="line">       26    0.000    0.000    0.000    0.000 sre_parse.py:201(get)</div><div class="line">       22    0.000    0.000    0.000    0.000 sre_parse.py:138(append)</div><div class="line">        1    0.000    0.000    0.000    0.000 &#123;thread.start_new_thread&#125;</div><div class="line">        4    0.000    0.000    0.000    0.000 threading.py:259(__init__)</div><div class="line">        2    0.000    0.000    0.000    0.000 threading.py:656(__init__)</div><div class="line">        2    0.000    0.000    0.001    0.000 re.py:226(_compile)</div><div class="line">       21    0.000    0.000    0.000    0.000 &#123;ord&#125;</div><div class="line">        2    0.000    0.000    0.001    0.000 sre_compile.py:493(compile)</div><div class="line">        1    0.000    0.000    0.001    0.001 warnings.py:45(filterwarnings)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:308(wait)</div><div class="line">        8    0.000    0.000    0.000    0.000 threading.py:58(__init__)</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_parse.py:675(parse)</div><div class="line">        2    0.000    0.000    0.000    0.000 threading.py:560(__init__)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:640(Thread)</div><div class="line">        4    0.000    0.000    0.000    0.000 threading.py:241(Condition)</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_parse.py:140(getwidth)</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_parse.py:301(_parse_sub)</div><div class="line">       12    0.000    0.000    0.000    0.000 &#123;_sre.getlower&#125;</div><div class="line">       10    0.000    0.000    0.000    0.000 &#123;isinstance&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:726(start)</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_compile.py:478(_code)</div><div class="line">        4    0.000    0.000    0.000    0.000 sre_compile.py:472(isstring)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:1090(__init__)</div><div class="line">        2    0.000    0.000    0.000    0.000 &#123;method &apos;setter&apos; of &apos;property&apos; objects&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 collections.py:26(OrderedDict)</div><div class="line">        6    0.000    0.000    0.000    0.000 &#123;thread.allocate_lock&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:602(wait)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:124(_RLock)</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_parse.py:178(__init__)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:627(_newname)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:575(set)</div><div class="line">        4    0.000    0.000    0.000    0.000 &#123;min&#125;</div><div class="line">        2    0.000    0.000    0.001    0.000 re.py:188(compile)</div><div class="line">        3    0.000    0.000    0.000    0.000 &#123;thread.get_ident&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 keyword.py:11(&lt;module&gt;)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:372(notify)</div><div class="line">        1    0.000    0.000    0.000    0.000 &#123;thread.stack_size&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:709(_set_daemon)</div><div class="line">        2    0.000    0.000    0.000    0.000 threading.py:541(Event)</div><div class="line">        2    0.000    0.000    0.000    0.000 threading.py:299(_is_owned)</div><div class="line">        2    0.000    0.000    0.000    0.000 &#123;_sre.compile&#125;</div><div class="line">        3    0.000    0.000    0.000    0.000 &#123;method &apos;release&apos; of &apos;thread.lock&apos; objects&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:296(_acquire_restore)</div><div class="line">        1    0.000    0.000    0.000    0.000 &#123;sys.setrecursionlimit&#125;</div><div class="line">        2    0.000    0.000    0.000    0.000 &#123;method &apos;extend&apos; of &apos;list&apos; objects&#125;</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_parse.py:67(__init__)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:399(notifyAll)</div><div class="line">        1    0.000    0.000    0.000    0.000 collections.py:387(Counter)</div><div class="line">        2    0.000    0.000    0.000    0.000 &#123;method &apos;get&apos; of &apos;dict&apos; objects&#125;</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_parse.py:90(__init__)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:293(_release_save)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:551(_Event)</div><div class="line">        2    0.000    0.000    0.000    0.000 sre_parse.py:195(match)</div><div class="line">        3    0.000    0.000    0.000    0.000 threading.py:63(_note)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:1152(currentThread)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:254(_Condition)</div><div class="line">        2    0.000    0.000    0.000    0.000 &#123;method &apos;items&apos; of &apos;dict&apos; objects&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:789(_set_ident)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:1058(_Timer)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:1088(_MainThread)</div><div class="line">        1    0.000    0.000    0.000    0.000 &#123;method &apos;insert&apos; of &apos;list&apos; objects&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:422(_Semaphore)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:1097(_set_daemon)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:569(isSet)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:56(_Verbose)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:1128(_DummyThread)</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:1008(daemon)</div><div class="line">        1    0.000    0.000    0.000    0.000 &#123;issubclass&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 &#123;method &apos;disable&apos; of &apos;_lsprof.Profiler&apos; objects&#125;</div><div class="line">        1    0.000    0.000    0.000    0.000 threading.py:514(_BoundedSemaphore)</div></pre></td></tr></table></figure>
<p>　関数呼び出し回数が3624回から415回まで減り，4msec高速化．</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　それでも<span>$Ack(4, 2)$</span><!-- Has MathJax -->でSEGVするのでこのお話はなかったことに．<span>$2^{65536}-3$</span><!-- Has MathJax -->は遠い．</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li>[1] 寿司 虚空編 -Sushi Kokuu Hen- - pixivコミックで漫画を無料試し読み．<a href="https://comic.pixiv.net/works/1505" target="_blank" rel="external">https://comic.pixiv.net/works/1505</a></li>
<li>[2] S変換 - 巨大数研究 Wiki - Wikia．<a href="http://ja.googology.wikia.com/wiki/S%E5%A4%89%E6%8F%9B" target="_blank" rel="external">http://ja.googology.wikia.com/wiki/S%E5%A4%89%E6%8F%9B</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　わざわざブログに書くほどでもないことから書いていかないとなまるので書く．&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;　寿司 虚空編[1]第2話で登場し
    
    </summary>
    
    
      <category term="optimization" scheme="http://ntddk.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>凧揚げ</title>
    <link href="http://ntddk.github.io/2016/01/08/controlling-rolling-spider-with-leap-motion-cylon-js/"/>
    <id>http://ntddk.github.io/2016/01/08/controlling-rolling-spider-with-leap-motion-cylon-js/</id>
    <published>2016-01-08T09:00:00.000Z</published>
    <updated>2016-04-02T00:51:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>　凧揚げの様子．</p>
<center><iframe src="https://vine.co/v/ihdD7VVeeYz/embed/simple" width="300" height="300" frameborder="0"></iframe><script src="https://platform.vine.co/static/scripts/embed.js"></script></center>

<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR:"></a>TL;DR:</h1><p>　新年なので凧揚げをやる．<br>　具体的にはCylon.jsを用いてLeap MotionからRolling Spiderを操作し，ついでにSlackに通知する．<br>　依存関係は次の通り．<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># npm install cylon cylon-keyboard cylon-leapmotion cylon-rolling-spider node-slack</div></pre></td></tr></table></figure></p>
<h1 id="Cylon-js"><a href="#Cylon-js" class="headerlink" title="Cylon.js"></a>Cylon.js</h1><p>　<a href="http://cylonjs.com/" target="_blank" rel="external">Cylon.js</a>はロボティクス向けに開発されているJavaScriptのラッパーライブラリ．<br>　マイコンボードやドローン，スマートウォッチなど，さまざまなガジェットのSDKを統一されたインターフェイスで利用できる．反面，バグを踏み抜くと少ししんどい．<br>　たとえばキーボードに接続するには，次のように書く．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Cylon = <span class="built_in">require</span>(<span class="string">'cylon'</span>);</div><div class="line"></div><div class="line">Cylon.robot(&#123;</div><div class="line">    <span class="attr">connections</span>: &#123;</div><div class="line">        <span class="string">'keyboard'</span>: &#123; <span class="attr">adaptor</span>: <span class="string">'keyboard'</span> &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">devices</span>: &#123;</div><div class="line">        <span class="attr">keyboard</span>: &#123;<span class="attr">driver</span>: <span class="string">'keyboard'</span>, <span class="attr">connection</span>: <span class="string">'keyboard'</span>&#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">work</span>: <span class="function"><span class="keyword">function</span> (<span class="params">my</span>) </span>&#123;</div><div class="line">        my.keyboard.on(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">            my.log(<span class="string">"A PRESSED!"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>　これでお手軽キーロガーのできあがりだ．内部ではkeypressというモジュールが呼ばれる．</p>
<h1 id="Leap-Motion"><a href="#Leap-Motion" class="headerlink" title="Leap Motion"></a>Leap Motion</h1><p>　<a href="https://www.leapmotion.com/" target="_blank" rel="external">Leap Motion</a>は人間の手の動きを入力に変換できるモーションセンサー．<br>　以前から研究室に転がっていたものの，これまで<a href="http://radiatoryang.itch.io/hurt-me-plenty" target="_blank" rel="external">ケツ叩きゲーム</a>にしか使われてこなかった．<br>　Cylon.jsで複数のガジェットを扱うときは，<code>connections</code>と<code>devices</code>に追記していけばよい．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Cylon = <span class="built_in">require</span>(<span class="string">'cylon'</span>);</div><div class="line"></div><div class="line">Cylon.robot(&#123;</div><div class="line">    <span class="attr">connections</span>: &#123;</div><div class="line">        <span class="string">'keyboard'</span>: &#123; <span class="attr">adaptor</span>: <span class="string">'keyboard'</span> &#125;,</div><div class="line">        <span class="string">'leapmotion'</span>: &#123; <span class="attr">adaptor</span>: <span class="string">'leapmotion'</span> &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">devices</span>: &#123;</div><div class="line">        <span class="attr">keyboard</span>: &#123;<span class="attr">driver</span>: <span class="string">'keyboard'</span>, <span class="attr">connection</span>: <span class="string">'keyboard'</span>&#125;,</div><div class="line">        <span class="attr">leapmotion</span>: &#123; <span class="attr">driver</span>: <span class="string">'leapmotion'</span>, <span class="attr">connection</span>: <span class="string">'leapmotion'</span>&#125;,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">work</span>: <span class="function"><span class="keyword">function</span> (<span class="params">my</span>) </span>&#123;</div><div class="line">        my.leapmotion.on(<span class="string">'gesture'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">g</span>) </span>&#123;</div><div class="line">            my.log(g.type.toString());</div><div class="line">            <span class="keyword">if</span> (g.type == <span class="string">"circle"</span>) &#123;</div><div class="line">                ...</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>　これで手の動きが取れる．内部ではleapjsというモジュールが呼ばれる．<br>　次はドローンだ．</p>
<h1 id="Rolling-Spider"><a href="#Rolling-Spider" class="headerlink" title="Rolling Spider"></a>Rolling Spider</h1><p>　<a href="http://www.parrot.com/jp/products/rolling-spider/" target="_blank" rel="external">Rolling Spider</a>はParrot社の小型ドローン．というとすぐドローンの定義は自律航行可能であるとかないとかクアッドコプターという呼称がどうとか言いだすやつがいるけど，ここではドローンと呼んでいる．<br>　それでは，Rolling SpiderをLeap Motionで操作してみよう．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Cylon = <span class="built_in">require</span>(<span class="string">'cylon'</span>);</div><div class="line"></div><div class="line">Cylon.robot(&#123;</div><div class="line">    <span class="attr">connections</span>: &#123;</div><div class="line">        <span class="string">'keyboard'</span>: &#123; <span class="attr">adaptor</span>: <span class="string">'keyboard'</span> &#125;,</div><div class="line">        <span class="string">'leapmotion'</span>: &#123; <span class="attr">adaptor</span>: <span class="string">'leapmotion'</span> &#125;,</div><div class="line">        <span class="string">'rolling-spider'</span>: &#123; <span class="attr">adaptor</span>: <span class="string">'rolling-spider'</span>, <span class="attr">uuid</span>: <span class="string">'***'</span> &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">devices</span>: &#123;</div><div class="line">        <span class="attr">keyboard</span>: &#123;<span class="attr">driver</span>: <span class="string">'keyboard'</span>, <span class="attr">connection</span>: <span class="string">'keyboard'</span>&#125;,</div><div class="line">        <span class="attr">leapmotion</span>: &#123; <span class="attr">driver</span>: <span class="string">'leapmotion'</span>, <span class="attr">connection</span>: <span class="string">'leapmotion'</span>&#125;,</div><div class="line">        <span class="attr">drone</span>: &#123; <span class="attr">driver</span>: <span class="string">'rolling-spider'</span>, <span class="attr">connection</span>: <span class="string">'rolling-spider'</span> &#125;</div><div class="line">    &#125;,</div><div class="line">​</div><div class="line">    work: <span class="function"><span class="keyword">function</span> (<span class="params">my</span>) </span>&#123;</div><div class="line">        my.leapmotion.on(<span class="string">'gesture'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">g</span>) </span>&#123;</div><div class="line">            my.log(g.type.toString());</div><div class="line">            <span class="keyword">if</span> (g.type == <span class="string">"circle"</span>) &#123;</div><div class="line">                my.drone.takeOff();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (g.type == <span class="string">"swipe"</span> &amp;&amp; !flag) &#123;</div><div class="line">                <span class="keyword">var</span> isHorizontal = <span class="built_in">Math</span>.abs(g.direction[<span class="number">0</span>]) &gt; <span class="built_in">Math</span>.abs(g.direction[<span class="number">1</span>]);</div><div class="line">                <span class="keyword">if</span>(isHorizontal)&#123;</div><div class="line">                    <span class="keyword">if</span>(g.direction[<span class="number">0</span>] &gt; <span class="number">0</span>)&#123;</div><div class="line">                        my.drone.right();</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        my.drone.left();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span>(g.direction[<span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</div><div class="line">                        my.drone.up();</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        my.drone.down();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (g.type == <span class="string">"keyTap"</span>) &#123;</div><div class="line">                my.drone.land();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        my.keyboard.on(<span class="string">"down"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            my.drone.land();    </div><div class="line">        &#125;);</div><div class="line">        my.keyboard.on(<span class="string">"m"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            my.drone.emergency();</div><div class="line">        &#125;);</div><div class="line">        my.keyboard.on(<span class="string">"q"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            Cylon.halt();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>　とりあえずこれで動く．指を回すとドローンが飛び上がり，スワイプに応じて移動する．内部ではnode-rolling-spiderというモジュールが呼ばれる．<br>　複数台の機体に接続できるから，ドローンの編隊飛行も夢ではない．とはいえ，Bluetoothを経由した中央集権的な制御なので，自律飛行にはいたらないが．ほんとうに自律させたければ，ドローン側のファームウェアに手を入れる必要がある．Parrot社が公開している<a href="https://github.com/Parrot-Developers/RollingSpiderEdu" target="_blank" rel="external">RollingSpiderEdu</a>によると，どうやら共有ライブラリを用いてドローンのファームウェアに機能を追加できるようだ．いずれはレクサスのPVのように美しく飛ばしてみたいが，いっそドローンから自作したほうがいいかもしれないな．</p>
<center><iframe width="560" height="315" src="https://www.youtube.com/embed/uj0v1BgzUdc" frameborder="0" allowfullscreen></iframe></center>

<p>　なおRolling Spiderの総重量は65gなので，空港等の周辺や人口中心地区の上空でのドローン飛行を制限する<a href="http://www.mlit.go.jp/koku/koku_tk10_000003.html" target="_blank" rel="external">改正航空法</a>の対象とはならない．</p>
<h1 id="Slack"><a href="#Slack" class="headerlink" title="Slack"></a>Slack</h1><p>　凧揚げもChatOpsの時代．<br>　node-slackというモジュールと，ドローンのコールバック機能を用いれば，バッテリー残量をSlackに通知できる．SlackのWebHooks URLに投げるだけだ．</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Cylon = <span class="built_in">require</span>(<span class="string">'cylon'</span>),</div><div class="line">    Slack = <span class="built_in">require</span>(<span class="string">'node-slack'</span>),</div><div class="line">    slack = <span class="keyword">new</span> Slack(<span class="string">'https://hooks.slack.com/services/***'</span>);</div><div class="line">...</div><div class="line">    work: <span class="function"><span class="keyword">function</span> (<span class="params">my</span>) </span>&#123;</div><div class="line">...</div><div class="line">        my.drone.on(<span class="string">'battery'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            slack.send(&#123;</div><div class="line">                <span class="attr">text</span>: <span class="string">':battery:: '</span> + my.drone.getBatteryLevel() + <span class="string">'%'</span>,</div><div class="line">                <span class="attr">channel</span>: <span class="string">'#drone'</span>,</div><div class="line">                <span class="attr">username</span>: <span class="string">'Drone'</span></div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">...</div></pre></td></tr></table></figure>
<p>　こんなふうに通知される．</p>
<p><img src="/image/drone/slack.png" width="50%" height="50%"></p>
<p>　ちなみに，ドローンが移動するたびに通知なんかしていると「短期間に送信されたメッセージが多すぎるから表示しないよ！」と怒られる．</p>
<h1 id="その他の凧揚げ"><a href="#その他の凧揚げ" class="headerlink" title="その他の凧揚げ"></a>その他の凧揚げ</h1><p>　Leap Motionによるドローンの操作はたぶんこの人が初．</p>
<center><iframe width="560" height="315" src="https://www.youtube.com/embed/hfq2SisPvCU" frameborder="0" allowfullscreen></iframe></center>

<p>　やっぱデカいドローンを飛ばしたいっすね．</p>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　ジェスチャーでドローンを操作できるようになったことだし，フォースの力みたいでかっこいいと思って，年始にRolling Spiderを多摩川の土手で飛ばしていたらドローン嫌いっぽい人にクソ怒られた．すいません．<br>　あとドローンといえば『<a href="http://www.amazon.co.jp/dp/415031201X" target="_blank" rel="external">伊藤計劃トリビュート</a>』所収の藤井太洋「公正的戦闘規範」がおもしろいぞ！！！</p>
<h1 id="謝辞"><a href="#謝辞" class="headerlink" title="謝辞"></a>謝辞</h1><ul>
<li>Leap Motionは<a href="https://twitter.com/shunki9" target="_blank" rel="external">@shunki9</a>から借りた．</li>
<li>Rolling Spiderは<a href="http://www.gehirn.co.jp/" target="_blank" rel="external">Gehirn Inc.</a>に買ってもらった．</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　凧揚げの様子．&lt;/p&gt;
&lt;center&gt;&lt;iframe src=&quot;https://vine.co/v/ihdD7VVeeYz/embed/simple&quot; width=&quot;300&quot; height=&quot;300&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;script s
    
    </summary>
    
    
      <category term="drone" scheme="http://ntddk.github.io/tags/drone/"/>
    
  </entry>
  
  <entry>
    <title>RNNLMによる論文タイトルの自動生成</title>
    <link href="http://ntddk.github.io/2015/12/19/generating-thesis-titles-with-rnnlm/"/>
    <id>http://ntddk.github.io/2015/12/19/generating-thesis-titles-with-rnnlm/</id>
    <published>2015-12-19T14:45:00.000Z</published>
    <updated>2017-12-14T07:40:39.717Z</updated>
    
    <content type="html"><![CDATA[<p>　本稿は<a href="http://www.adventar.org/calendars/1053" target="_blank" rel="external">慶應義塾大学SFC村井&amp;徳田研 Advent Calendar 2015</a>の19日目である．</p>
<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR:"></a>TL;DR:</h1><p>　村井研・徳田研の卒論・修論・博論アーカイブから過去の論文タイトルを収集し，RNNLM（Recurrent Neural Network Language Model, 再帰型ニューラルネット言語モデル）[1]を用いて論文タイトルを自動生成する．</p>
<h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><ol>
<li><a href="http://www.sfc.wide.ad.jp/paper.html" target="_blank" rel="external">論文アーカイブ</a>を雑にスクレイピング．</li>
<li>簡単のため英語タイトルを削る．データサイズは540行・16294字．</li>
<li>MeCabの<code>-Owakati</code>オプションで分かち書き．単語数は6272と少ない．</li>
<li>RNNLMで学習，出力．</li>
</ol>
<p>　生成した論文タイトルは次の通り．</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">改変適応機環境におけるインターネット化の設計と実装</div><div class="line">暮らし計算発見を利用したUDL機器</div><div class="line">インターネットを用いた機器プローブ体系のVoDについて開発な攻撃運用手法</div><div class="line">自律計算ネットワークの行動に-移動システムに関する研究</div><div class="line">衛星情報を用いたビジュアライゼーション定義アーキテクチャ表をする検出ユビキタスノードのファイル構成に関する研究</div><div class="line">あしあと適応セキュリティネットワークを用いた負荷議事取り入れたセンサNEMOMANET解決</div><div class="line">ユーザエンティティに適した仮想な通信接近による制御対象の設計と実装</div><div class="line">蓄積学校利用性のための再作業に関する持続</div><div class="line">型連携ネットワークのインターネットに基づく遠隔コードの向けたデジタル機構の構築</div><div class="line">アプリケーション：型と時間特定を用いた利用型路準拠相関の構築</div><div class="line">自律電話教育における異種品質空間支援システムの設計と実装</div><div class="line">位置AV端末著作授業特殊トポロジ型し分析高速構築</div><div class="line">広域を利用した次応用におけるレイヤーな授業に関する研究プロシステムに関する研究</div><div class="line">次制御対するカメラを利用したAd型間屋外パブリック構築</div><div class="line">協調:不sネットワークにおけるOSストリーミングの考慮機器コミュニケーション配信システムの設計と実装</div><div class="line">センサ環境におけるデバイスソフトウェア文字通信システム</div><div class="line">無線作業めぐるにおけるパケットIP発信・支援機構</div><div class="line">ELA上環境に応じたしたコンピュータ測定に関する研究</div><div class="line">インターネット型プラットホームの遠隔パケットとシステム</div><div class="line">無線コントロールセンサを考慮する参加参加サービスの研究</div><div class="line">移動者における位置適応オブジェクト手法の研究</div><div class="line">インターネットグルーピングの回覧性をシステムした経路消耗性の実現</div><div class="line">自己情報を用いた実を量子よる協調表行動流通</div><div class="line">デジタル前遠隔しるしの情報共有支援機構</div><div class="line">ネットワークト可視ネットワークを車的基盤」関数の分析</div><div class="line">環境Computing通信DVB携帯性に関する移動同期利用の設計と実装</div><div class="line">マルチパスFunction無線センサノードを用いた技術マルチ支援支援促進に関する研究</div><div class="line">スマート世代ネットワークにおける相互ブリッジ家電システムの設計と実装</div><div class="line">インターネット情報のための興味無支援システムの構築</div><div class="line">オペレーティング型IP環境のプロファイリング的な信頼に関する研究</div><div class="line">実方向自動ポロジにおける同期機器性における研究</div><div class="line">センサ-抽出生成を支援情報登録抽出機構の構築</div><div class="line">アドホックOSにおけるOS環境のGlass性基盤機構の構築</div><div class="line">DV地アプリケーションの者による最適いアルゴリズム</div><div class="line">商上のための選択なMobile効率システムの構築</div><div class="line">ユビキタス世代環境における効率Wireless情報のMarkit</div><div class="line">系列演奏位置スレッドサービス二マッチングマルチプロアクティブモデルの構築</div><div class="line">パケット適応付け利用を考慮したネットワークブログモデルの設計と実装</div><div class="line">TranS情報環境におけるグループホスト同期への安全履歴と分散</div><div class="line">の情報対象でのMediatorコラボレーションに関する研究</div><div class="line">類似Allシステム</div><div class="line">情報グループを利用するデジタル制御動画像配送システムの構築</div><div class="line">RFIDを利用したネットワークのプラットフォーム転送に関する研究</div><div class="line">周辺上セキュリティにおけるコンテキスト者基無線の提案に関する研究</div><div class="line">Link型服行動RCSにおける効率しない機構</div><div class="line">クラシック型車載インターネットを解決した分散音声なりすましシステム</div><div class="line">Dynamic特徴解析に基づく仮想制御機構の設計と実装</div><div class="line">多段CSMAにおける多様な解析管理機構の設計と実装</div><div class="line">移動機:を用いた-コンテンツシステムの構築</div><div class="line">技術センサ環境におけるホーム化による経路サーバ</div><div class="line">アプリケーション回線に基づく薦環境におけるする作成への行動利用に関する研究</div><div class="line">インターネットを用いたしたな動画ルールに関する研究</div><div class="line">機器協調利用Efficientのネットワーク解決のエンド映像構築</div><div class="line">計算情報を利用した家電抽象の迷い連携への構築</div><div class="line">関連情報教育における動的メールイベント収集の研究</div><div class="line">通知におけるデータベース方式購買によるした状態時間グループに関する研究</div><div class="line">コンテキスト:6のためのための設計と実装</div><div class="line">電子ネットワークのための提案と実装</div><div class="line">自己電話を利用したオブジェクト分散型授業属性制御機構の実現</div><div class="line">ネットワークの抽出化環境の向上圧縮システムの構築</div><div class="line">Networks対戦ネットワークにおける家庭テリトリー手法の構築</div><div class="line">広バイト依存患者のための収集及び積極システム</div><div class="line">IPコンテキスト精度点のデータベース的と-発見環境動画像モデル行動-</div><div class="line">通信作業システムの含む属性センサノード付け可能メディアの提案と開発</div><div class="line">情報世代環境時による最適視点環境機構の設計と実装</div><div class="line">協調蓄積モバイルバッテリ支援Shumu機器型設置インシデントIrma保護量</div><div class="line">分散回線にセンサデータ適応をマッチングと基準化に関する研究</div><div class="line">環境さ時複数用方式と審議に関する研究</div><div class="line">自律リンク環境におけるインターネット・属性品質</div><div class="line">オブジェクトしにおけるインタフェース技法化推薦機構の研究</div><div class="line">インターネットにおける光を用いた最適遠隔支援環境の構築</div><div class="line">モーバイルs利用とへの実現自動手法の設計と実装</div><div class="line">インターネットに適した時端末型TCP型データ基準の内</div><div class="line">インターネットを用いた受信・辞書収集</div><div class="line">DOS的利用環境におけるbased配信システムの構築</div><div class="line">i：と利用した情報モーダルの作成に関する研究</div><div class="line">APIの情報におけるソフトウェアするをシステムの自律</div><div class="line">インターネットを用いたセル内回避手法アプリケーションFunction選択制御機構</div><div class="line">マルチ:ユーザ時のLooking支援競合の参加情報に関する研究</div><div class="line">マルチネットワークによる動的リモコンアーキテクチャの分析に関する研究</div><div class="line">インターネット：文字を含むと対策軽減地理ファイルの構築</div><div class="line">アプリケーションのデジタル行動環境における負荷教育の設計と実装</div><div class="line">移動制御型メディア取り入れたにおける自律トポロジモデルの提案</div><div class="line">日本回線時におけるセンサのアーキテクチャ</div><div class="line">『世代sionを支援情報ユーザの実現</div><div class="line">Mobileの行動空間に基づくするコンポーネントシステムの設計と構築</div><div class="line">キットライブラリのアドレス利用を支援するアプリケーションの行動に関する研究</div><div class="line">間:環境における認証検出の考察</div><div class="line">鍵盤を用いた基盤経路トポロジ支援手法の研究</div><div class="line">RFIDネットワークを用いたとユーザ</div><div class="line">自律型機的な支援レイヤー手法の設計と実装</div><div class="line">アドホックを用いたデジタル最適暗号システムの研究</div><div class="line">WWW人IPvシステムの動的2を化フローインフォメーション配送化手法</div><div class="line">次的機タフェース6システムの実現</div><div class="line">IPレイヤーネットワークにおけるグループ取得遠隔システムに関する研究</div><div class="line">二通信ユニバーサルにおける複数共有再についての研究</div><div class="line">Tapirus上の情報的実現あるの構築</div><div class="line">環境上における仮想指機構の構築</div><div class="line">インターネットにおけるRFID経路エンドノードデータベース付けモデルの設計と実装</div><div class="line">2回線学習への効率的型環境の提案と構築</div><div class="line">...</div></pre></td></tr></table></figure>
<p>　これはRNNLMが生成した論文タイトルを100件無作為抽出したもの．全リストは<a href="https://gist.github.com/ntddk/c1dd4476677667157a97" target="_blank" rel="external">gist</a>に置いている．この程度のデータサイズでRNNLMの性能を云々するのはいささか危うい気がするが，論文タイトルの末尾はえてして「～の構築」「～の研究」「～の実現」になるというルールを獲得できている，ということだろうか．<br>　同じデータセットから，ありがちな2単語プリフィックスのマルコフ連鎖で生成した論文タイトルは次の通り．</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">注目した二点間接続基盤ソフトウエアの構築インターネット</div><div class="line">地域における高等教育協力手法の研究ホームネットワークにおける多様</div><div class="line">かつスケーラブルな識別子管理システムゲームコンソールに対応する管理</div><div class="line">運用基盤分析に関する研究ポリシ経路制御に関する研究大</div><div class="line">任意の物理的量子ビットに対する効率的な情報閲覧</div><div class="line">脳疲労検知システムの提案次世代インターネット経路制御を用い</div><div class="line">鍵交換機構の実装と評価初等中等教育におけるWWW</div><div class="line">プロセスデザイン片方向ブロードキャストメディアを用いたユビキタスコンピューティング環境に適し</div><div class="line">連携システムの設計と実装exPhoto:周辺機器と撮影</div><div class="line">に関する研究分散環境におけるプロアクティブ制御方式に関する研究アドホック</div><div class="line">...</div></pre></td></tr></table></figure>
<p>　パッと見でRNNLMが生成した論文タイトルの方がより自然に思える．で，RNNLMって何なの？</p>
<h1 id="RNNLM"><a href="#RNNLM" class="headerlink" title="RNNLM"></a>RNNLM</h1><p>　読んで字のごとくRNNLMはRNNの言語モデルへの応用である．<br>　RNNは内部に有向閉路をもつニューラルネット．系列データの各時刻<span>$t$</span><!-- Has MathJax -->につき1つの入力<span>$x^t$</span><!-- Has MathJax -->をとり1つの出力<span>$y^t$</span><!-- Has MathJax -->を返す．ふつう順伝播型ニューラルネットは入力1つをとり1つの入力を与える写像を表現するが，RNNは任意の系列–すなわち過去のすべての入力から任意の系列への写像を表現する．<br>　これは<strong>時刻<span>$t-1$</span><!-- Has MathJax -->の隠れ層の出力を，時刻<span>$t$</span><!-- Has MathJax -->の隠れ層の入力に与える</strong>ことで実現される．</p>
<p><img src="/image/rnnlm/rnnlm.png" width="30%" height="30%"></p>
<p>　文章は系列データであり，文章に含まれる各単語は直前の単語の並びに依存している．そこで，1990年のエルマンネット[2]以来，RNNを用いた文章の分析が試みられてきた–近頃「RNNは深層学習の一種」というような言辞を見かけるが，RNN<span>$\in$</span><!-- Has MathJax -->深層学習では<strong>ない</strong>．<br>　RNNLMと既存手法との相違点は，単語を潜在空間に写像して単語の意味を獲得しようとしているところだ．<br>　上図において隠れ層のベクトルは単語の潜在ベクトルとその履歴より<span>$\begin{split}s(t) =&amp; f(Uw(t) + Ws(t-1))\end{split}$</span><!-- Has MathJax -->となる．次の単語の確率は<span>$\begin{split}y(t) =&amp; g(Vs(t))\end{split}$</span><!-- Has MathJax -->となる．<br>　ここで活性化関数<span>$f(z)$</span><!-- Has MathJax -->は標準シグモイド関数で，<span>$g(z)$</span><!-- Has MathJax -->はソフトマックス関数<span>$\dfrac {e^{zm}} {\Sigma _{k}e^{zm}}$</span><!-- Has MathJax -->である．<br>　学習では確率的勾配降下法を用いて重み<span>$U$</span><!-- Has MathJax -->, <span>$W$</span><!-- Has MathJax -->, <span>$V$</span><!-- Has MathJax -->を更新していくが，このときRNNLMは各層を時間方向に展開し，最後の時刻<span>$t$</span><!-- Has MathJax -->から誤差逆伝播計算をおこなう（BPTT, Backpropagation through time法）．<br>　ここにおいてRNNは多層の順伝播型ニューラルネットのようにみなせる．</p>
<p><img src="/image/rnnlm/bptt.png" width="30%" height="30%"></p>
<p>　BPTT法において，ある時刻<span>$t$</span><!-- Has MathJax -->における出力層の誤差は正解ベクトル<span>$d(t)$</span><!-- Has MathJax -->から出力<span>$y(t)$</span><!-- Has MathJax -->を引いた出力誤差<span>$e_{o}(t)$</span><!-- Has MathJax -->と，時刻<span>$t+1$</span><!-- Has MathJax -->から伝播してきた誤差の和となる．ここでたとえば<span>$V(t+1) = V(t) + s(t)e_{o}(t)^t\alpha - V(t)\beta$</span><!-- Has MathJax -->．<span>$\alpha$</span><!-- Has MathJax -->は学習率であり，各層で行列の勾配に掛かる．<span>$\beta$</span><!-- Has MathJax -->はL2正則化の係数．<br>　このBPTT法で長い系列を扱うとき勾配が消失してしまう問題[3]があり，解決策としてLSTM（Long Short-Term Memory, 長・短期記憶）[4]が提案されているが，割愛する．<br>　なお今回のパラメータは次の通り．</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">last probability of validation data: -441.610349</div><div class="line">number of finished iterations: 14</div><div class="line">current position in training data: 0</div><div class="line">current probability of training data: -441.576456</div><div class="line">save after processing # words: 0</div><div class="line"># of training words: 6272</div><div class="line">input layer size: 1295</div><div class="line">hidden layer size: 200</div><div class="line">compression layer size: 0</div><div class="line">output layer size: 1096</div><div class="line">direct connections: 0</div><div class="line">direct order: 3</div><div class="line">bptt: 6</div><div class="line">bptt block: 10</div><div class="line">vocabulary size: 1095</div><div class="line">class size: 1</div><div class="line">old classes: 0</div><div class="line">independent sentences mode: 1</div><div class="line">starting learning rate: 0.100000</div><div class="line">current learning rate: 0.000195</div><div class="line">learning rate decrease: 1</div></pre></td></tr></table></figure>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>　恥知らずのクソ野郎なので何番煎じともわからない記事を書いてしまった．元ネタは<a href="http://www.phontron.com/nlp-title/" target="_blank" rel="external">NLP論文ネタ一覧</a>．<br>　このほか青空文庫やなろう小説[5]をRNNに学習させてはいるが，LSTM込みでもいまだ人間が見て自然に思える文章の生成は難しく思える．<br>　いずれは論文タイトルばかりか論文の内容も自動生成して知の欺瞞をもう一発カマしたいのだが．SFC自体が知の欺瞞っぽいところはさておき．<br>　物語の自動生成なら円城塔がなんとかしてくれるだろう．</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li>[1] “RNNLM Toolkit,” <a href="http://rnnlm.org/" target="_blank" rel="external">http://rnnlm.org/</a><ul>
<li>記事中の画像は開発者による<a href="http://www.fit.vutbr.cz/~imikolov/rnnlm/google.pdf" target="_blank" rel="external">紹介スライド</a>より．</li>
<li>解説は<a href="http://kiyukuta.github.io/2013/12/09/mlac2013_day9_recurrent_neural_network_language_model.html" target="_blank" rel="external">これもある意味Deep Learning，Recurrent Neural Network Language Modelの話 [MLAC2013_9日目] – KiyuHu</a>がわかりやすい．</li>
</ul>
</li>
<li>[2] Jeffrey L. Elman, “<a href="http://crl.ucsd.edu/~elman/Papers/fsit.pdf" target="_blank" rel="external">Finding Structure in Time[PDF]</a>,” Cognitive Science, vol. 14, issue. 2, pp. 179-211, 1990.</li>
<li>[3] Sepp Hochreiter, “<a href="http://www.bioinf.jku.at/publications/older/3804.pdf" target="_blank" rel="external">Untersuchungen zu dynamischen neuronalen Netzen[PDF]</a>,” Diploma thesis, TU Munich, 1991.<ul>
<li>読めない．</li>
</ul>
</li>
<li>[4] Sepp Hochreiter and Jürgen Schmidhuber, “<a href="http://deeplearning.cs.cmu.edu/pdfs/Hochreiter97_lstm.pdf" target="_blank" rel="external">Long Short-Term Memory[PDF]</a>,” Neural Computation, vol. 9, no. 8, pp. 1735-1780, 1997.<ul>
<li>解説は<a href="http://qiita.com/t_Signull/items/21b82be280b46f467d1b" target="_blank" rel="external">MachineLearning - わかるLSTM ～ 最近の動向と共に - Qiita</a>がわかりやすい．</li>
</ul>
</li>
<li>[5] <a href="http://ncode.syosetu.com/n9073ca/" target="_blank" rel="external">幻想再帰のアリュージョニスト</a>，おすすめです．</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　本稿は&lt;a href=&quot;http://www.adventar.org/calendars/1053&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;慶應義塾大学SFC村井&amp;amp;徳田研 Advent Calendar 2015&lt;/a&gt;の19日目である．
    
    </summary>
    
    
      <category term="machine learning" scheme="http://ntddk.github.io/tags/machine-learning/"/>
    
  </entry>
  
</feed>
